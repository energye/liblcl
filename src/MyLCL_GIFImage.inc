
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function GIFImage_Create: TGIFImage; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TGIFImage.Create;
  handleExceptionEnd
end;

procedure GIFImage_Free(AObj: TGIFImage); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_SaveToStream(AObj: TGIFImage; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_LoadFromStream(AObj: TGIFImage; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_Clear(AObj: TGIFImage); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_Assign(AObj: TGIFImage; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_Equals(AObj: TGIFImage; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_LoadFromFile(AObj: TGIFImage; Filename: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromFile(Filename);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_SaveToFile(AObj: TGIFImage; Filename: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToFile(Filename);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GIFImage_SetSize(AObj: TGIFImage; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetSize(AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_GetNamePath(AObj: TGIFImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_ClassType(AObj: TGIFImage): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_ClassName(AObj: TGIFImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_InstanceSize(AObj: TGIFImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_InheritsFrom(AObj: TGIFImage; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_GetHashCode(AObj: TGIFImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GIFImage_ToString(AObj: TGIFImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function GIFImage_GetBitsPerPixel(AObj: TGIFImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BitsPerPixel;
  handleExceptionEnd
end;

function GIFImage_GetEmpty(AObj: TGIFImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Empty;
  handleExceptionEnd
end;

function GIFImage_GetHeight(AObj: TGIFImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure GIFImage_SetHeight(AObj: TGIFImage; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function GIFImage_GetModified(AObj: TGIFImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure GIFImage_SetModified(AObj: TGIFImage; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function GIFImage_GetPalette(AObj: TGIFImage): HPALETTE; extdecl;
begin
{$ifdef UsehandleException}Result := HPALETTE(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Palette;
  handleExceptionEnd
end;

procedure GIFImage_SetPalette(AObj: TGIFImage; AValue: HPALETTE); extdecl;
begin
  handleExceptionBegin
  AObj.Palette := AValue;
  handleExceptionEnd
end;

function GIFImage_GetPaletteModified(AObj: TGIFImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.PaletteModified;
  handleExceptionEnd
end;

procedure GIFImage_SetPaletteModified(AObj: TGIFImage; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.PaletteModified := AValue;
  handleExceptionEnd
end;

function GIFImage_GetTransparent(AObj: TGIFImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Transparent;
  handleExceptionEnd
end;

function GIFImage_GetWidth(AObj: TGIFImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure GIFImage_SetWidth(AObj: TGIFImage; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure GIFImage_SetOnChange(AObj: TGIFImage; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function GIFImage_StaticClassType: TClass; extdecl;
begin
  Result := TGIFImage;
end;

exports
  GIFImage_Create,
  GIFImage_Free,
  GIFImage_SaveToStream,
  GIFImage_LoadFromStream,
  GIFImage_Clear,
  GIFImage_Assign,
  GIFImage_Equals,
  GIFImage_LoadFromFile,
  GIFImage_SaveToFile,
  GIFImage_SetSize,
  GIFImage_GetNamePath,
  GIFImage_ClassType,
  GIFImage_ClassName,
  GIFImage_InstanceSize,
  GIFImage_InheritsFrom,
  GIFImage_GetHashCode,
  GIFImage_ToString,
  GIFImage_GetBitsPerPixel,
  GIFImage_GetEmpty,
  GIFImage_GetHeight,
  GIFImage_SetHeight,
  GIFImage_GetModified,
  GIFImage_SetModified,
  GIFImage_GetPalette,
  GIFImage_SetPalette,
  GIFImage_GetPaletteModified,
  GIFImage_SetPaletteModified,
  GIFImage_GetTransparent,
  GIFImage_GetWidth,
  GIFImage_SetWidth,
  GIFImage_SetOnChange,
  GIFImage_StaticClassType;

