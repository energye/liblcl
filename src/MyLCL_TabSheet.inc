
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function TabSheet_Create(AOwner: TComponent): TTabSheet; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TTabSheet.Create(AOwner);
  handleExceptionEnd
end;

procedure TabSheet_Free(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_CanFocus(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ContainsControl(AObj: TTabSheet; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function TabSheet_ControlAtPos(AObj: TTabSheet; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_DisableAlign(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_EnableAlign(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_FindChildControl(AObj: TTabSheet; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_FlipChildren(AObj: TTabSheet; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Focused(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_HandleAllocated(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_InsertControl(AObj: TTabSheet; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Invalidate(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_PaintTo(AObj: TTabSheet; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_RemoveControl(AObj: TTabSheet; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Realign(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Repaint(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_ScaleBy(AObj: TTabSheet; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_ScrollBy(AObj: TTabSheet; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_SetBounds(AObj: TTabSheet; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_SetFocus(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Update(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_BringToFront(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TabSheet_ClientToScreen(AObj: TTabSheet; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TabSheet_ClientToParent(AObj: TTabSheet; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Dragging(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_HasParent(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Hide(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Perform(AObj: TTabSheet; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Refresh(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TabSheet_ScreenToClient(AObj: TTabSheet; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TabSheet_ParentToClient(AObj: TTabSheet; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_SendToBack(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Show(AObj: TTabSheet); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_GetTextBuf(AObj: TTabSheet; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_GetTextLen(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_SetTextBuf(AObj: TTabSheet; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_FindComponent(AObj: TTabSheet; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_GetNamePath(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_Assign(AObj: TTabSheet; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ClassType(AObj: TTabSheet): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ClassName(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_InstanceSize(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_InheritsFrom(AObj: TTabSheet; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Equals(AObj: TTabSheet; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_GetHashCode(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ToString(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorToNeighbour(AObj: TTabSheet; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorParallel(AObj: TTabSheet; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorHorizontalCenterTo(AObj: TTabSheet; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorVerticalCenterTo(AObj: TTabSheet; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorSame(AObj: TTabSheet; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorAsAlign(AObj: TTabSheet; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AnchorClient(AObj: TTabSheet; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleDesignToForm(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleFormToDesign(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Scale96ToForm(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleFormTo96(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Scale96ToFont(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleFontTo96(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleScreenToFont(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleFontToScreen(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_Scale96ToScreen(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TabSheet_ScaleScreenTo96(AObj: TTabSheet; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_AutoAdjustLayout(AObj: TTabSheet; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TabSheet_FixDesignFontsPPI(AObj: TTabSheet; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure TabSheet_ScaleFontsPPI(AObj: TTabSheet; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function TabSheet_GetPageControl(AObj: TTabSheet): TPageControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PageControl;
  handleExceptionEnd
end;

procedure TabSheet_SetPageControl(AObj: TTabSheet; AValue: TPageControl); extdecl;
begin
  handleExceptionBegin
  AObj.PageControl := AValue;
  handleExceptionEnd
end;

function TabSheet_GetTabIndex(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabIndex;
  handleExceptionEnd
end;

function TabSheet_GetBorderWidth(AObj: TTabSheet): TBorderWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TBorderWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure TabSheet_SetBorderWidth(AObj: TTabSheet; AValue: TBorderWidth); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function TabSheet_GetCaption(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure TabSheet_SetCaption(AObj: TTabSheet; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function TabSheet_GetDoubleBuffered(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure TabSheet_SetDoubleBuffered(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function TabSheet_GetEnabled(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure TabSheet_SetEnabled(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function TabSheet_GetFont(AObj: TTabSheet): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure TabSheet_SetFont(AObj: TTabSheet; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function TabSheet_GetHeight(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure TabSheet_SetHeight(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function TabSheet_GetImageIndex(AObj: TTabSheet): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndex;
  handleExceptionEnd
end;

procedure TabSheet_SetImageIndex(AObj: TTabSheet; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndex := AValue;
  handleExceptionEnd
end;

function TabSheet_GetLeft(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure TabSheet_SetLeft(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function TabSheet_GetConstraints(AObj: TTabSheet): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure TabSheet_SetConstraints(AObj: TTabSheet; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function TabSheet_GetPageIndex(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PageIndex;
  handleExceptionEnd
end;

procedure TabSheet_SetPageIndex(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PageIndex := AValue;
  handleExceptionEnd
end;

function TabSheet_GetParentDoubleBuffered(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure TabSheet_SetParentDoubleBuffered(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function TabSheet_GetParentFont(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure TabSheet_SetParentFont(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function TabSheet_GetParentShowHint(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure TabSheet_SetParentShowHint(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function TabSheet_GetPopupMenu(AObj: TTabSheet): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure TabSheet_SetPopupMenu(AObj: TTabSheet; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function TabSheet_GetShowHint(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure TabSheet_SetShowHint(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function TabSheet_GetTabVisible(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabVisible;
  handleExceptionEnd
end;

procedure TabSheet_SetTabVisible(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabVisible := AValue;
  handleExceptionEnd
end;

function TabSheet_GetTop(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure TabSheet_SetTop(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function TabSheet_GetVisible(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure TabSheet_SetVisible(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function TabSheet_GetWidth(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure TabSheet_SetWidth(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TContextPopupEvent
procedure TabSheet_SetOnContextPopup(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure TabSheet_SetOnDragDrop(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure TabSheet_SetOnDragOver(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure TabSheet_SetOnEndDrag(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnEnter(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnExit(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnHide(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnHide}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure TabSheet_SetOnMouseDown(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnMouseEnter(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnMouseLeave(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure TabSheet_SetOnMouseMove(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure TabSheet_SetOnMouseUp(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnResize(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TabSheet_SetOnShow(AObj: TTabSheet; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnShow}
  EventMethodCode
end;

function TabSheet_GetDockClientCount(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function TabSheet_GetDockSite(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure TabSheet_SetDockSite(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function TabSheet_GetMouseInClient(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function TabSheet_GetVisibleDockClientCount(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function TabSheet_GetBrush(AObj: TTabSheet): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function TabSheet_GetControlCount(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function TabSheet_GetHandle(AObj: TTabSheet): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function TabSheet_GetParentWindow(AObj: TTabSheet): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure TabSheet_SetParentWindow(AObj: TTabSheet; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function TabSheet_GetShowing(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function TabSheet_GetTabOrder(AObj: TTabSheet): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure TabSheet_SetTabOrder(AObj: TTabSheet; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function TabSheet_GetTabStop(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure TabSheet_SetTabStop(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function TabSheet_GetUseDockManager(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure TabSheet_SetUseDockManager(AObj: TTabSheet; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAction(AObj: TTabSheet): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure TabSheet_SetAction(AObj: TTabSheet; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAlign(AObj: TTabSheet): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure TabSheet_SetAlign(AObj: TTabSheet; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAnchors(AObj: TTabSheet): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure TabSheet_SetAnchors(AObj: TTabSheet; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function TabSheet_GetBiDiMode(AObj: TTabSheet): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure TabSheet_SetBiDiMode(AObj: TTabSheet; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TabSheet_GetBoundsRect(AObj: TTabSheet; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure TabSheet_SetBoundsRect(AObj: TTabSheet; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function TabSheet_GetClientHeight(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure TabSheet_SetClientHeight(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TabSheet_GetClientOrigin(AObj: TTabSheet; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TabSheet_GetClientRect(AObj: TTabSheet; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function TabSheet_GetClientWidth(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure TabSheet_SetClientWidth(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function TabSheet_GetControlState(AObj: TTabSheet): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure TabSheet_SetControlState(AObj: TTabSheet; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function TabSheet_GetControlStyle(AObj: TTabSheet): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure TabSheet_SetControlStyle(AObj: TTabSheet; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function TabSheet_GetFloating(AObj: TTabSheet): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function TabSheet_GetParent(AObj: TTabSheet): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure TabSheet_SetParent(AObj: TTabSheet; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function TabSheet_GetCursor(AObj: TTabSheet): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure TabSheet_SetCursor(AObj: TTabSheet; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function TabSheet_GetHint(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure TabSheet_SetHint(AObj: TTabSheet; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function TabSheet_GetComponentCount(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function TabSheet_GetComponentIndex(AObj: TTabSheet): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure TabSheet_SetComponentIndex(AObj: TTabSheet; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function TabSheet_GetOwner(AObj: TTabSheet): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function TabSheet_GetName(AObj: TTabSheet): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure TabSheet_SetName(AObj: TTabSheet; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function TabSheet_GetTag(AObj: TTabSheet): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure TabSheet_SetTag(AObj: TTabSheet; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAnchorSideLeft(AObj: TTabSheet): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure TabSheet_SetAnchorSideLeft(AObj: TTabSheet; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAnchorSideTop(AObj: TTabSheet): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure TabSheet_SetAnchorSideTop(AObj: TTabSheet; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAnchorSideRight(AObj: TTabSheet): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure TabSheet_SetAnchorSideRight(AObj: TTabSheet; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function TabSheet_GetAnchorSideBottom(AObj: TTabSheet): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure TabSheet_SetAnchorSideBottom(AObj: TTabSheet; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function TabSheet_GetChildSizing(AObj: TTabSheet): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure TabSheet_SetChildSizing(AObj: TTabSheet; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function TabSheet_GetBorderSpacing(AObj: TTabSheet): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure TabSheet_SetBorderSpacing(AObj: TTabSheet; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function TabSheet_GetDockClients(AObj: TTabSheet; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function TabSheet_GetControls(AObj: TTabSheet; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function TabSheet_GetComponents(AObj: TTabSheet; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function TabSheet_GetAnchorSide(AObj: TTabSheet; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function TabSheet_StaticClassType: TClass; extdecl;
begin
  Result := TTabSheet;
end;

exports
  TabSheet_Create,
  TabSheet_Free,
  TabSheet_CanFocus,
  TabSheet_ContainsControl,
  TabSheet_ControlAtPos,
  TabSheet_DisableAlign,
  TabSheet_EnableAlign,
  TabSheet_FindChildControl,
  TabSheet_FlipChildren,
  TabSheet_Focused,
  TabSheet_HandleAllocated,
  TabSheet_InsertControl,
  TabSheet_Invalidate,
  TabSheet_PaintTo,
  TabSheet_RemoveControl,
  TabSheet_Realign,
  TabSheet_Repaint,
  TabSheet_ScaleBy,
  TabSheet_ScrollBy,
  TabSheet_SetBounds,
  TabSheet_SetFocus,
  TabSheet_Update,
  TabSheet_BringToFront,
  TabSheet_ClientToScreen,
  TabSheet_ClientToParent,
  TabSheet_Dragging,
  TabSheet_HasParent,
  TabSheet_Hide,
  TabSheet_Perform,
  TabSheet_Refresh,
  TabSheet_ScreenToClient,
  TabSheet_ParentToClient,
  TabSheet_SendToBack,
  TabSheet_Show,
  TabSheet_GetTextBuf,
  TabSheet_GetTextLen,
  TabSheet_SetTextBuf,
  TabSheet_FindComponent,
  TabSheet_GetNamePath,
  TabSheet_Assign,
  TabSheet_ClassType,
  TabSheet_ClassName,
  TabSheet_InstanceSize,
  TabSheet_InheritsFrom,
  TabSheet_Equals,
  TabSheet_GetHashCode,
  TabSheet_ToString,
  TabSheet_AnchorToNeighbour,
  TabSheet_AnchorParallel,
  TabSheet_AnchorHorizontalCenterTo,
  TabSheet_AnchorVerticalCenterTo,
  TabSheet_AnchorSame,
  TabSheet_AnchorAsAlign,
  TabSheet_AnchorClient,
  TabSheet_ScaleDesignToForm,
  TabSheet_ScaleFormToDesign,
  TabSheet_Scale96ToForm,
  TabSheet_ScaleFormTo96,
  TabSheet_Scale96ToFont,
  TabSheet_ScaleFontTo96,
  TabSheet_ScaleScreenToFont,
  TabSheet_ScaleFontToScreen,
  TabSheet_Scale96ToScreen,
  TabSheet_ScaleScreenTo96,
  TabSheet_AutoAdjustLayout,
  TabSheet_FixDesignFontsPPI,
  TabSheet_ScaleFontsPPI,
  TabSheet_GetPageControl,
  TabSheet_SetPageControl,
  TabSheet_GetTabIndex,
  TabSheet_GetBorderWidth,
  TabSheet_SetBorderWidth,
  TabSheet_GetCaption,
  TabSheet_SetCaption,
  TabSheet_GetDoubleBuffered,
  TabSheet_SetDoubleBuffered,
  TabSheet_GetEnabled,
  TabSheet_SetEnabled,
  TabSheet_GetFont,
  TabSheet_SetFont,
  TabSheet_GetHeight,
  TabSheet_SetHeight,
  TabSheet_GetImageIndex,
  TabSheet_SetImageIndex,
  TabSheet_GetLeft,
  TabSheet_SetLeft,
  TabSheet_GetConstraints,
  TabSheet_SetConstraints,
  TabSheet_GetPageIndex,
  TabSheet_SetPageIndex,
  TabSheet_GetParentDoubleBuffered,
  TabSheet_SetParentDoubleBuffered,
  TabSheet_GetParentFont,
  TabSheet_SetParentFont,
  TabSheet_GetParentShowHint,
  TabSheet_SetParentShowHint,
  TabSheet_GetPopupMenu,
  TabSheet_SetPopupMenu,
  TabSheet_GetShowHint,
  TabSheet_SetShowHint,
  TabSheet_GetTabVisible,
  TabSheet_SetTabVisible,
  TabSheet_GetTop,
  TabSheet_SetTop,
  TabSheet_GetVisible,
  TabSheet_SetVisible,
  TabSheet_GetWidth,
  TabSheet_SetWidth,
  TabSheet_SetOnContextPopup,
  TabSheet_SetOnDragDrop,
  TabSheet_SetOnDragOver,
  TabSheet_SetOnEndDrag,
  TabSheet_SetOnEnter,
  TabSheet_SetOnExit,
  TabSheet_SetOnHide,
  TabSheet_SetOnMouseDown,
  TabSheet_SetOnMouseEnter,
  TabSheet_SetOnMouseLeave,
  TabSheet_SetOnMouseMove,
  TabSheet_SetOnMouseUp,
  TabSheet_SetOnResize,
  TabSheet_SetOnShow,
  TabSheet_GetDockClientCount,
  TabSheet_GetDockSite,
  TabSheet_SetDockSite,
  TabSheet_GetMouseInClient,
  TabSheet_GetVisibleDockClientCount,
  TabSheet_GetBrush,
  TabSheet_GetControlCount,
  TabSheet_GetHandle,
  TabSheet_GetParentWindow,
  TabSheet_SetParentWindow,
  TabSheet_GetShowing,
  TabSheet_GetTabOrder,
  TabSheet_SetTabOrder,
  TabSheet_GetTabStop,
  TabSheet_SetTabStop,
  TabSheet_GetUseDockManager,
  TabSheet_SetUseDockManager,
  TabSheet_GetAction,
  TabSheet_SetAction,
  TabSheet_GetAlign,
  TabSheet_SetAlign,
  TabSheet_GetAnchors,
  TabSheet_SetAnchors,
  TabSheet_GetBiDiMode,
  TabSheet_SetBiDiMode,
  TabSheet_GetBoundsRect,
  TabSheet_SetBoundsRect,
  TabSheet_GetClientHeight,
  TabSheet_SetClientHeight,
  TabSheet_GetClientOrigin,
  TabSheet_GetClientRect,
  TabSheet_GetClientWidth,
  TabSheet_SetClientWidth,
  TabSheet_GetControlState,
  TabSheet_SetControlState,
  TabSheet_GetControlStyle,
  TabSheet_SetControlStyle,
  TabSheet_GetFloating,
  TabSheet_GetParent,
  TabSheet_SetParent,
  TabSheet_GetCursor,
  TabSheet_SetCursor,
  TabSheet_GetHint,
  TabSheet_SetHint,
  TabSheet_GetComponentCount,
  TabSheet_GetComponentIndex,
  TabSheet_SetComponentIndex,
  TabSheet_GetOwner,
  TabSheet_GetName,
  TabSheet_SetName,
  TabSheet_GetTag,
  TabSheet_SetTag,
  TabSheet_GetAnchorSideLeft,
  TabSheet_SetAnchorSideLeft,
  TabSheet_GetAnchorSideTop,
  TabSheet_SetAnchorSideTop,
  TabSheet_GetAnchorSideRight,
  TabSheet_SetAnchorSideRight,
  TabSheet_GetAnchorSideBottom,
  TabSheet_SetAnchorSideBottom,
  TabSheet_GetChildSizing,
  TabSheet_SetChildSizing,
  TabSheet_GetBorderSpacing,
  TabSheet_SetBorderSpacing,
  TabSheet_GetDockClients,
  TabSheet_GetControls,
  TabSheet_GetComponents,
  TabSheet_GetAnchorSide,
  TabSheet_StaticClassType;

