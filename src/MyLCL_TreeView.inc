
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function TreeView_Create(AOwner: TComponent): TTreeView; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TTreeView.Create(AOwner);
  handleExceptionEnd
end;

procedure TreeView_Free(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_AlphaSort(AObj: TTreeView; ARecurse: LongBool): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AlphaSort(ARecurse);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_FullCollapse(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.FullCollapse;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_FullExpand(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.FullExpand;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetHitTestInfoAt(AObj: TTreeView; X: Integer; Y: Integer): THitTests; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHitTestInfoAt(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetNodeAt(AObj: TTreeView; X: Integer; Y: Integer): TTreeNode; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetNodeAt(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_IsEditing(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsEditing;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_LoadFromFile(AObj: TTreeView; FileName: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromFile(FileName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_LoadFromStream(AObj: TTreeView; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SaveToFile(AObj: TTreeView; FileName: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToFile(FileName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SaveToStream(AObj: TTreeView; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_ClearSelection(AObj: TTreeView; KeepPrimary: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection(KeepPrimary);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_CustomSort(AObj: TTreeView; SortProc: PFNTVCOMPARE; Data: NativeInt; ARecurse: LongBool): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CustomSort(SortProc, Data, ARecurse);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_CanFocus(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ContainsControl(AObj: TTreeView; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function TreeView_ControlAtPos(AObj: TTreeView; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_DisableAlign(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_EnableAlign(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_FindChildControl(AObj: TTreeView; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_FlipChildren(AObj: TTreeView; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Focused(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_HandleAllocated(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_InsertControl(AObj: TTreeView; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Invalidate(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_PaintTo(AObj: TTreeView; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_RemoveControl(AObj: TTreeView; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Realign(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Repaint(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_ScaleBy(AObj: TTreeView; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_ScrollBy(AObj: TTreeView; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SetBounds(AObj: TTreeView; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SetFocus(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Update(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_BringToFront(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TreeView_ClientToScreen(AObj: TTreeView; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TreeView_ClientToParent(AObj: TTreeView; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Dragging(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_HasParent(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Hide(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Perform(AObj: TTreeView; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Refresh(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TreeView_ScreenToClient(AObj: TTreeView; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure TreeView_ParentToClient(AObj: TTreeView; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SendToBack(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Show(AObj: TTreeView); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetTextBuf(AObj: TTreeView; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetTextLen(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_SetTextBuf(AObj: TTreeView; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_FindComponent(AObj: TTreeView; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetNamePath(AObj: TTreeView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_Assign(AObj: TTreeView; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ClassType(AObj: TTreeView): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ClassName(AObj: TTreeView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_InstanceSize(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_InheritsFrom(AObj: TTreeView; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Equals(AObj: TTreeView; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_GetHashCode(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ToString(AObj: TTreeView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorToNeighbour(AObj: TTreeView; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorParallel(AObj: TTreeView; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorHorizontalCenterTo(AObj: TTreeView; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorVerticalCenterTo(AObj: TTreeView; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorSame(AObj: TTreeView; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorAsAlign(AObj: TTreeView; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AnchorClient(AObj: TTreeView; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleDesignToForm(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleFormToDesign(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Scale96ToForm(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleFormTo96(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Scale96ToFont(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleFontTo96(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleScreenToFont(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleFontToScreen(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_Scale96ToScreen(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TreeView_ScaleScreenTo96(AObj: TTreeView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_AutoAdjustLayout(AObj: TTreeView; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TreeView_FixDesignFontsPPI(AObj: TTreeView; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure TreeView_ScaleFontsPPI(AObj: TTreeView; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function TreeView_GetDefaultItemHeight(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DefaultItemHeight;
  handleExceptionEnd
end;

procedure TreeView_SetDefaultItemHeight(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultItemHeight := AValue;
  handleExceptionEnd
end;

function TreeView_GetExpandSignColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ExpandSignColor;
  handleExceptionEnd
end;

procedure TreeView_SetExpandSignColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.ExpandSignColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetExpandSignSize(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ExpandSignSize;
  handleExceptionEnd
end;

procedure TreeView_SetExpandSignSize(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ExpandSignSize := AValue;
  handleExceptionEnd
end;

function TreeView_GetExpandSignType(AObj: TTreeView): TTreeViewExpandSignType; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TTreeViewExpandSignType);{$endif}
  handleExceptionBegin
  Result :=  AObj.ExpandSignType;
  handleExceptionEnd
end;

procedure TreeView_SetExpandSignType(AObj: TTreeView; AValue: TTreeViewExpandSignType); extdecl;
begin
  handleExceptionBegin
  AObj.ExpandSignType := AValue;
  handleExceptionEnd
end;

function TreeView_GetHotTrackColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HotTrackColor;
  handleExceptionEnd
end;

procedure TreeView_SetHotTrackColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.HotTrackColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetImagesWidth(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImagesWidth;
  handleExceptionEnd
end;

procedure TreeView_SetImagesWidth(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImagesWidth := AValue;
  handleExceptionEnd
end;

function TreeView_GetOptions(AObj: TTreeView): TTreeViewOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure TreeView_SetOptions(AObj: TTreeView; AValue: TTreeViewOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function TreeView_GetScrollBars(AObj: TTreeView): TScrollStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TScrollStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScrollBars;
  handleExceptionEnd
end;

procedure TreeView_SetScrollBars(AObj: TTreeView; AValue: TScrollStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBars := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelectionColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectionColor;
  handleExceptionEnd
end;

procedure TreeView_SetSelectionColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.SelectionColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelectionFontColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectionFontColor;
  handleExceptionEnd
end;

procedure TreeView_SetSelectionFontColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.SelectionFontColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelectionFontColorUsed(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectionFontColorUsed;
  handleExceptionEnd
end;

procedure TreeView_SetSelectionFontColorUsed(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.SelectionFontColorUsed := AValue;
  handleExceptionEnd
end;

function TreeView_GetSeparatorColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SeparatorColor;
  handleExceptionEnd
end;

procedure TreeView_SetSeparatorColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.SeparatorColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetStateImagesWidth(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.StateImagesWidth;
  handleExceptionEnd
end;

procedure TreeView_SetStateImagesWidth(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.StateImagesWidth := AValue;
  handleExceptionEnd
end;

function TreeView_GetToolTips(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ToolTips;
  handleExceptionEnd
end;

procedure TreeView_SetToolTips(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ToolTips := AValue;
  handleExceptionEnd
end;

function TreeView_GetTreeLineColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TreeLineColor;
  handleExceptionEnd
end;

procedure TreeView_SetTreeLineColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.TreeLineColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetTreeLinePenStyle(AObj: TTreeView): TPenStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TPenStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.TreeLinePenStyle;
  handleExceptionEnd
end;

procedure TreeView_SetTreeLinePenStyle(AObj: TTreeView; AValue: TPenStyle); extdecl;
begin
  handleExceptionBegin
  AObj.TreeLinePenStyle := AValue;
  handleExceptionEnd
end;

function TreeView_GetAlign(AObj: TTreeView): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure TreeView_SetAlign(AObj: TTreeView; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function TreeView_GetAnchors(AObj: TTreeView): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure TreeView_SetAnchors(AObj: TTreeView; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function TreeView_GetAutoExpand(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoExpand;
  handleExceptionEnd
end;

procedure TreeView_SetAutoExpand(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoExpand := AValue;
  handleExceptionEnd
end;

function TreeView_GetBiDiMode(AObj: TTreeView): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure TreeView_SetBiDiMode(AObj: TTreeView; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function TreeView_GetBorderStyle(AObj: TTreeView): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure TreeView_SetBorderStyle(AObj: TTreeView; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function TreeView_GetBorderWidth(AObj: TTreeView): TBorderWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TBorderWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure TreeView_SetBorderWidth(AObj: TTreeView; AValue: TBorderWidth); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function TreeView_GetColor(AObj: TTreeView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure TreeView_SetColor(AObj: TTreeView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function TreeView_GetConstraints(AObj: TTreeView): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure TreeView_SetConstraints(AObj: TTreeView; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function TreeView_GetDoubleBuffered(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure TreeView_SetDoubleBuffered(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function TreeView_GetDragKind(AObj: TTreeView): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure TreeView_SetDragKind(AObj: TTreeView; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function TreeView_GetDragCursor(AObj: TTreeView): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure TreeView_SetDragCursor(AObj: TTreeView; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function TreeView_GetDragMode(AObj: TTreeView): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure TreeView_SetDragMode(AObj: TTreeView; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function TreeView_GetEnabled(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure TreeView_SetEnabled(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function TreeView_GetFont(AObj: TTreeView): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure TreeView_SetFont(AObj: TTreeView; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function TreeView_GetHideSelection(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HideSelection;
  handleExceptionEnd
end;

procedure TreeView_SetHideSelection(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HideSelection := AValue;
  handleExceptionEnd
end;

function TreeView_GetHotTrack(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HotTrack;
  handleExceptionEnd
end;

procedure TreeView_SetHotTrack(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HotTrack := AValue;
  handleExceptionEnd
end;

function TreeView_GetImages(AObj: TTreeView): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Images;
  handleExceptionEnd
end;

procedure TreeView_SetImages(AObj: TTreeView; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Images := AValue;
  handleExceptionEnd
end;

function TreeView_GetIndent(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Indent;
  handleExceptionEnd
end;

procedure TreeView_SetIndent(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Indent := AValue;
  handleExceptionEnd
end;

function TreeView_GetMultiSelect(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MultiSelect;
  handleExceptionEnd
end;

procedure TreeView_SetMultiSelect(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.MultiSelect := AValue;
  handleExceptionEnd
end;

function TreeView_GetMultiSelectStyle(AObj: TTreeView): TMultiSelectStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.MultiSelectStyle;
  handleExceptionEnd
end;

procedure TreeView_SetMultiSelectStyle(AObj: TTreeView; AValue: TMultiSelectStyle); extdecl;
begin
  handleExceptionBegin
  AObj.MultiSelectStyle := AValue;
  handleExceptionEnd
end;

function TreeView_GetParentColor(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure TreeView_SetParentColor(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function TreeView_GetParentDoubleBuffered(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure TreeView_SetParentDoubleBuffered(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function TreeView_GetParentFont(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure TreeView_SetParentFont(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function TreeView_GetParentShowHint(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure TreeView_SetParentShowHint(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function TreeView_GetPopupMenu(AObj: TTreeView): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure TreeView_SetPopupMenu(AObj: TTreeView; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function TreeView_GetReadOnly(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure TreeView_SetReadOnly(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function TreeView_GetRightClickSelect(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.RightClickSelect;
  handleExceptionEnd
end;

procedure TreeView_SetRightClickSelect(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.RightClickSelect := AValue;
  handleExceptionEnd
end;

function TreeView_GetRowSelect(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.RowSelect;
  handleExceptionEnd
end;

procedure TreeView_SetRowSelect(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.RowSelect := AValue;
  handleExceptionEnd
end;

function TreeView_GetShowButtons(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowButtons;
  handleExceptionEnd
end;

procedure TreeView_SetShowButtons(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowButtons := AValue;
  handleExceptionEnd
end;

function TreeView_GetShowHint(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure TreeView_SetShowHint(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function TreeView_GetShowLines(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowLines;
  handleExceptionEnd
end;

procedure TreeView_SetShowLines(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowLines := AValue;
  handleExceptionEnd
end;

function TreeView_GetShowRoot(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowRoot;
  handleExceptionEnd
end;

procedure TreeView_SetShowRoot(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowRoot := AValue;
  handleExceptionEnd
end;

function TreeView_GetSortType(AObj: TTreeView): TSortType; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TSortType);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortType;
  handleExceptionEnd
end;

procedure TreeView_SetSortType(AObj: TTreeView; AValue: TSortType); extdecl;
begin
  handleExceptionBegin
  AObj.SortType := AValue;
  handleExceptionEnd
end;

function TreeView_GetStateImages(AObj: TTreeView): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.StateImages;
  handleExceptionEnd
end;

procedure TreeView_SetStateImages(AObj: TTreeView; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.StateImages := AValue;
  handleExceptionEnd
end;

function TreeView_GetTabOrder(AObj: TTreeView): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure TreeView_SetTabOrder(AObj: TTreeView; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function TreeView_GetTabStop(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure TreeView_SetTabStop(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function TreeView_GetVisible(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure TreeView_SetVisible(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TTVExpandedEvent
procedure TreeView_SetOnAddition(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandedEvent}
  {$DEFINE EventName := OnAddition}
  EventMethodCode
end;

//EVENT_TYPE:TTVAdvancedCustomDrawEvent
procedure TreeView_SetOnAdvancedCustomDraw(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVAdvancedCustomDrawEvent}
  {$DEFINE EventName := OnAdvancedCustomDraw}
  EventMethodCode
end;

//EVENT_TYPE:TTVAdvancedCustomDrawItemEvent
procedure TreeView_SetOnAdvancedCustomDrawItem(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVAdvancedCustomDrawItemEvent}
  {$DEFINE EventName := OnAdvancedCustomDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TTVChangedEvent
procedure TreeView_SetOnChange(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVChangedEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TTVChangingEvent
procedure TreeView_SetOnChanging(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVChangingEvent}
  {$DEFINE EventName := OnChanging}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnClick(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TTVExpandedEvent
procedure TreeView_SetOnCollapsed(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandedEvent}
  {$DEFINE EventName := OnCollapsed}
  EventMethodCode
end;

//EVENT_TYPE:TTVCollapsingEvent
procedure TreeView_SetOnCollapsing(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVCollapsingEvent}
  {$DEFINE EventName := OnCollapsing}
  EventMethodCode
end;

//EVENT_TYPE:TTVCompareEvent
procedure TreeView_SetOnCompare(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVCompareEvent}
  {$DEFINE EventName := OnCompare}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure TreeView_SetOnContextPopup(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TTVCustomDrawEvent
procedure TreeView_SetOnCustomDraw(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVCustomDrawEvent}
  {$DEFINE EventName := OnCustomDraw}
  EventMethodCode
end;

//EVENT_TYPE:TTVCustomDrawItemEvent
procedure TreeView_SetOnCustomDrawItem(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVCustomDrawItemEvent}
  {$DEFINE EventName := OnCustomDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnDblClick(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TTVExpandedEvent
procedure TreeView_SetOnDeletion(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandedEvent}
  {$DEFINE EventName := OnDeletion}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure TreeView_SetOnDragDrop(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure TreeView_SetOnDragOver(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TTVEditedEvent
procedure TreeView_SetOnEdited(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVEditedEvent}
  {$DEFINE EventName := OnEdited}
  EventMethodCode
end;

//EVENT_TYPE:TTVEditingEvent
procedure TreeView_SetOnEditing(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVEditingEvent}
  {$DEFINE EventName := OnEditing}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure TreeView_SetOnEndDrag(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnEnter(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnExit(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TTVExpandingEvent
procedure TreeView_SetOnExpanding(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandingEvent}
  {$DEFINE EventName := OnExpanding}
  EventMethodCode
end;

//EVENT_TYPE:TTVExpandedEvent
procedure TreeView_SetOnExpanded(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandedEvent}
  {$DEFINE EventName := OnExpanded}
  EventMethodCode
end;

//EVENT_TYPE:TTVExpandedEvent
procedure TreeView_SetOnGetSelectedIndex(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTTVExpandedEvent}
  {$DEFINE EventName := OnGetSelectedIndex}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure TreeView_SetOnKeyDown(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure TreeView_SetOnKeyPress(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure TreeView_SetOnKeyUp(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure TreeView_SetOnMouseDown(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnMouseEnter(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure TreeView_SetOnMouseLeave(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure TreeView_SetOnMouseMove(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure TreeView_SetOnMouseUp(AObj: TTreeView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function TreeView_GetItems(AObj: TTreeView): TTreeNodes; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

procedure TreeView_SetItems(AObj: TTreeView; AValue: TTreeNodes); extdecl;
begin
  handleExceptionBegin
  AObj.Items := AValue;
  handleExceptionEnd
end;

function TreeView_GetCanvas(AObj: TTreeView): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function TreeView_GetDropTarget(AObj: TTreeView): TTreeNode; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DropTarget;
  handleExceptionEnd
end;

procedure TreeView_SetDropTarget(AObj: TTreeView; AValue: TTreeNode); extdecl;
begin
  handleExceptionBegin
  AObj.DropTarget := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelected(AObj: TTreeView): TTreeNode; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Selected;
  handleExceptionEnd
end;

procedure TreeView_SetSelected(AObj: TTreeView; AValue: TTreeNode); extdecl;
begin
  handleExceptionBegin
  AObj.Selected := AValue;
  handleExceptionEnd
end;

function TreeView_GetTopItem(AObj: TTreeView): TTreeNode; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.TopItem;
  handleExceptionEnd
end;

procedure TreeView_SetTopItem(AObj: TTreeView; AValue: TTreeNode); extdecl;
begin
  handleExceptionBegin
  AObj.TopItem := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelectionCount(AObj: TTreeView): Cardinal; extdecl;
begin
{$ifdef UsehandleException}Result := Cardinal(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectionCount;
  handleExceptionEnd
end;

function TreeView_GetDockClientCount(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function TreeView_GetDockSite(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure TreeView_SetDockSite(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function TreeView_GetMouseInClient(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function TreeView_GetVisibleDockClientCount(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function TreeView_GetBrush(AObj: TTreeView): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function TreeView_GetControlCount(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function TreeView_GetHandle(AObj: TTreeView): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function TreeView_GetParentWindow(AObj: TTreeView): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure TreeView_SetParentWindow(AObj: TTreeView; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function TreeView_GetShowing(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function TreeView_GetUseDockManager(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure TreeView_SetUseDockManager(AObj: TTreeView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function TreeView_GetAction(AObj: TTreeView): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure TreeView_SetAction(AObj: TTreeView; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TreeView_GetBoundsRect(AObj: TTreeView; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure TreeView_SetBoundsRect(AObj: TTreeView; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function TreeView_GetClientHeight(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure TreeView_SetClientHeight(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TreeView_GetClientOrigin(AObj: TTreeView; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure TreeView_GetClientRect(AObj: TTreeView; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function TreeView_GetClientWidth(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure TreeView_SetClientWidth(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function TreeView_GetControlState(AObj: TTreeView): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure TreeView_SetControlState(AObj: TTreeView; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function TreeView_GetControlStyle(AObj: TTreeView): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure TreeView_SetControlStyle(AObj: TTreeView; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function TreeView_GetFloating(AObj: TTreeView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function TreeView_GetParent(AObj: TTreeView): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure TreeView_SetParent(AObj: TTreeView; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function TreeView_GetLeft(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure TreeView_SetLeft(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function TreeView_GetTop(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure TreeView_SetTop(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function TreeView_GetWidth(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure TreeView_SetWidth(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function TreeView_GetHeight(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure TreeView_SetHeight(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function TreeView_GetCursor(AObj: TTreeView): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure TreeView_SetCursor(AObj: TTreeView; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function TreeView_GetHint(AObj: TTreeView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure TreeView_SetHint(AObj: TTreeView; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function TreeView_GetComponentCount(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function TreeView_GetComponentIndex(AObj: TTreeView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure TreeView_SetComponentIndex(AObj: TTreeView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function TreeView_GetOwner(AObj: TTreeView): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function TreeView_GetName(AObj: TTreeView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure TreeView_SetName(AObj: TTreeView; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function TreeView_GetTag(AObj: TTreeView): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure TreeView_SetTag(AObj: TTreeView; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function TreeView_GetAnchorSideLeft(AObj: TTreeView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure TreeView_SetAnchorSideLeft(AObj: TTreeView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function TreeView_GetAnchorSideTop(AObj: TTreeView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure TreeView_SetAnchorSideTop(AObj: TTreeView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function TreeView_GetAnchorSideRight(AObj: TTreeView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure TreeView_SetAnchorSideRight(AObj: TTreeView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function TreeView_GetAnchorSideBottom(AObj: TTreeView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure TreeView_SetAnchorSideBottom(AObj: TTreeView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function TreeView_GetChildSizing(AObj: TTreeView): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure TreeView_SetChildSizing(AObj: TTreeView; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function TreeView_GetBorderSpacing(AObj: TTreeView): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure TreeView_SetBorderSpacing(AObj: TTreeView; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function TreeView_GetSelections(AObj: TTreeView; Index: Integer): TTreeNode; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Selections[Index];
  handleExceptionEnd
end;

function TreeView_GetDockClients(AObj: TTreeView; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function TreeView_GetControls(AObj: TTreeView; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function TreeView_GetComponents(AObj: TTreeView; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function TreeView_GetAnchorSide(AObj: TTreeView; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function TreeView_StaticClassType: TClass; extdecl;
begin
  Result := TTreeView;
end;

exports
  TreeView_Create,
  TreeView_Free,
  TreeView_AlphaSort,
  TreeView_FullCollapse,
  TreeView_FullExpand,
  TreeView_GetHitTestInfoAt,
  TreeView_GetNodeAt,
  TreeView_IsEditing,
  TreeView_LoadFromFile,
  TreeView_LoadFromStream,
  TreeView_SaveToFile,
  TreeView_SaveToStream,
  TreeView_ClearSelection,
  TreeView_CustomSort,
  TreeView_CanFocus,
  TreeView_ContainsControl,
  TreeView_ControlAtPos,
  TreeView_DisableAlign,
  TreeView_EnableAlign,
  TreeView_FindChildControl,
  TreeView_FlipChildren,
  TreeView_Focused,
  TreeView_HandleAllocated,
  TreeView_InsertControl,
  TreeView_Invalidate,
  TreeView_PaintTo,
  TreeView_RemoveControl,
  TreeView_Realign,
  TreeView_Repaint,
  TreeView_ScaleBy,
  TreeView_ScrollBy,
  TreeView_SetBounds,
  TreeView_SetFocus,
  TreeView_Update,
  TreeView_BringToFront,
  TreeView_ClientToScreen,
  TreeView_ClientToParent,
  TreeView_Dragging,
  TreeView_HasParent,
  TreeView_Hide,
  TreeView_Perform,
  TreeView_Refresh,
  TreeView_ScreenToClient,
  TreeView_ParentToClient,
  TreeView_SendToBack,
  TreeView_Show,
  TreeView_GetTextBuf,
  TreeView_GetTextLen,
  TreeView_SetTextBuf,
  TreeView_FindComponent,
  TreeView_GetNamePath,
  TreeView_Assign,
  TreeView_ClassType,
  TreeView_ClassName,
  TreeView_InstanceSize,
  TreeView_InheritsFrom,
  TreeView_Equals,
  TreeView_GetHashCode,
  TreeView_ToString,
  TreeView_AnchorToNeighbour,
  TreeView_AnchorParallel,
  TreeView_AnchorHorizontalCenterTo,
  TreeView_AnchorVerticalCenterTo,
  TreeView_AnchorSame,
  TreeView_AnchorAsAlign,
  TreeView_AnchorClient,
  TreeView_ScaleDesignToForm,
  TreeView_ScaleFormToDesign,
  TreeView_Scale96ToForm,
  TreeView_ScaleFormTo96,
  TreeView_Scale96ToFont,
  TreeView_ScaleFontTo96,
  TreeView_ScaleScreenToFont,
  TreeView_ScaleFontToScreen,
  TreeView_Scale96ToScreen,
  TreeView_ScaleScreenTo96,
  TreeView_AutoAdjustLayout,
  TreeView_FixDesignFontsPPI,
  TreeView_ScaleFontsPPI,
  TreeView_GetDefaultItemHeight,
  TreeView_SetDefaultItemHeight,
  TreeView_GetExpandSignColor,
  TreeView_SetExpandSignColor,
  TreeView_GetExpandSignSize,
  TreeView_SetExpandSignSize,
  TreeView_GetExpandSignType,
  TreeView_SetExpandSignType,
  TreeView_GetHotTrackColor,
  TreeView_SetHotTrackColor,
  TreeView_GetImagesWidth,
  TreeView_SetImagesWidth,
  TreeView_GetOptions,
  TreeView_SetOptions,
  TreeView_GetScrollBars,
  TreeView_SetScrollBars,
  TreeView_GetSelectionColor,
  TreeView_SetSelectionColor,
  TreeView_GetSelectionFontColor,
  TreeView_SetSelectionFontColor,
  TreeView_GetSelectionFontColorUsed,
  TreeView_SetSelectionFontColorUsed,
  TreeView_GetSeparatorColor,
  TreeView_SetSeparatorColor,
  TreeView_GetStateImagesWidth,
  TreeView_SetStateImagesWidth,
  TreeView_GetToolTips,
  TreeView_SetToolTips,
  TreeView_GetTreeLineColor,
  TreeView_SetTreeLineColor,
  TreeView_GetTreeLinePenStyle,
  TreeView_SetTreeLinePenStyle,
  TreeView_GetAlign,
  TreeView_SetAlign,
  TreeView_GetAnchors,
  TreeView_SetAnchors,
  TreeView_GetAutoExpand,
  TreeView_SetAutoExpand,
  TreeView_GetBiDiMode,
  TreeView_SetBiDiMode,
  TreeView_GetBorderStyle,
  TreeView_SetBorderStyle,
  TreeView_GetBorderWidth,
  TreeView_SetBorderWidth,
  TreeView_GetColor,
  TreeView_SetColor,
  TreeView_GetConstraints,
  TreeView_SetConstraints,
  TreeView_GetDoubleBuffered,
  TreeView_SetDoubleBuffered,
  TreeView_GetDragKind,
  TreeView_SetDragKind,
  TreeView_GetDragCursor,
  TreeView_SetDragCursor,
  TreeView_GetDragMode,
  TreeView_SetDragMode,
  TreeView_GetEnabled,
  TreeView_SetEnabled,
  TreeView_GetFont,
  TreeView_SetFont,
  TreeView_GetHideSelection,
  TreeView_SetHideSelection,
  TreeView_GetHotTrack,
  TreeView_SetHotTrack,
  TreeView_GetImages,
  TreeView_SetImages,
  TreeView_GetIndent,
  TreeView_SetIndent,
  TreeView_GetMultiSelect,
  TreeView_SetMultiSelect,
  TreeView_GetMultiSelectStyle,
  TreeView_SetMultiSelectStyle,
  TreeView_GetParentColor,
  TreeView_SetParentColor,
  TreeView_GetParentDoubleBuffered,
  TreeView_SetParentDoubleBuffered,
  TreeView_GetParentFont,
  TreeView_SetParentFont,
  TreeView_GetParentShowHint,
  TreeView_SetParentShowHint,
  TreeView_GetPopupMenu,
  TreeView_SetPopupMenu,
  TreeView_GetReadOnly,
  TreeView_SetReadOnly,
  TreeView_GetRightClickSelect,
  TreeView_SetRightClickSelect,
  TreeView_GetRowSelect,
  TreeView_SetRowSelect,
  TreeView_GetShowButtons,
  TreeView_SetShowButtons,
  TreeView_GetShowHint,
  TreeView_SetShowHint,
  TreeView_GetShowLines,
  TreeView_SetShowLines,
  TreeView_GetShowRoot,
  TreeView_SetShowRoot,
  TreeView_GetSortType,
  TreeView_SetSortType,
  TreeView_GetStateImages,
  TreeView_SetStateImages,
  TreeView_GetTabOrder,
  TreeView_SetTabOrder,
  TreeView_GetTabStop,
  TreeView_SetTabStop,
  TreeView_GetVisible,
  TreeView_SetVisible,
  TreeView_SetOnAddition,
  TreeView_SetOnAdvancedCustomDraw,
  TreeView_SetOnAdvancedCustomDrawItem,
  TreeView_SetOnChange,
  TreeView_SetOnChanging,
  TreeView_SetOnClick,
  TreeView_SetOnCollapsed,
  TreeView_SetOnCollapsing,
  TreeView_SetOnCompare,
  TreeView_SetOnContextPopup,
  TreeView_SetOnCustomDraw,
  TreeView_SetOnCustomDrawItem,
  TreeView_SetOnDblClick,
  TreeView_SetOnDeletion,
  TreeView_SetOnDragDrop,
  TreeView_SetOnDragOver,
  TreeView_SetOnEdited,
  TreeView_SetOnEditing,
  TreeView_SetOnEndDrag,
  TreeView_SetOnEnter,
  TreeView_SetOnExit,
  TreeView_SetOnExpanding,
  TreeView_SetOnExpanded,
  TreeView_SetOnGetSelectedIndex,
  TreeView_SetOnKeyDown,
  TreeView_SetOnKeyPress,
  TreeView_SetOnKeyUp,
  TreeView_SetOnMouseDown,
  TreeView_SetOnMouseEnter,
  TreeView_SetOnMouseLeave,
  TreeView_SetOnMouseMove,
  TreeView_SetOnMouseUp,
  TreeView_GetItems,
  TreeView_SetItems,
  TreeView_GetCanvas,
  TreeView_GetDropTarget,
  TreeView_SetDropTarget,
  TreeView_GetSelected,
  TreeView_SetSelected,
  TreeView_GetTopItem,
  TreeView_SetTopItem,
  TreeView_GetSelectionCount,
  TreeView_GetDockClientCount,
  TreeView_GetDockSite,
  TreeView_SetDockSite,
  TreeView_GetMouseInClient,
  TreeView_GetVisibleDockClientCount,
  TreeView_GetBrush,
  TreeView_GetControlCount,
  TreeView_GetHandle,
  TreeView_GetParentWindow,
  TreeView_SetParentWindow,
  TreeView_GetShowing,
  TreeView_GetUseDockManager,
  TreeView_SetUseDockManager,
  TreeView_GetAction,
  TreeView_SetAction,
  TreeView_GetBoundsRect,
  TreeView_SetBoundsRect,
  TreeView_GetClientHeight,
  TreeView_SetClientHeight,
  TreeView_GetClientOrigin,
  TreeView_GetClientRect,
  TreeView_GetClientWidth,
  TreeView_SetClientWidth,
  TreeView_GetControlState,
  TreeView_SetControlState,
  TreeView_GetControlStyle,
  TreeView_SetControlStyle,
  TreeView_GetFloating,
  TreeView_GetParent,
  TreeView_SetParent,
  TreeView_GetLeft,
  TreeView_SetLeft,
  TreeView_GetTop,
  TreeView_SetTop,
  TreeView_GetWidth,
  TreeView_SetWidth,
  TreeView_GetHeight,
  TreeView_SetHeight,
  TreeView_GetCursor,
  TreeView_SetCursor,
  TreeView_GetHint,
  TreeView_SetHint,
  TreeView_GetComponentCount,
  TreeView_GetComponentIndex,
  TreeView_SetComponentIndex,
  TreeView_GetOwner,
  TreeView_GetName,
  TreeView_SetName,
  TreeView_GetTag,
  TreeView_SetTag,
  TreeView_GetAnchorSideLeft,
  TreeView_SetAnchorSideLeft,
  TreeView_GetAnchorSideTop,
  TreeView_SetAnchorSideTop,
  TreeView_GetAnchorSideRight,
  TreeView_SetAnchorSideRight,
  TreeView_GetAnchorSideBottom,
  TreeView_SetAnchorSideBottom,
  TreeView_GetChildSizing,
  TreeView_SetChildSizing,
  TreeView_GetBorderSpacing,
  TreeView_SetBorderSpacing,
  TreeView_GetSelections,
  TreeView_GetDockClients,
  TreeView_GetControls,
  TreeView_GetComponents,
  TreeView_GetAnchorSide,
  TreeView_StaticClassType;

