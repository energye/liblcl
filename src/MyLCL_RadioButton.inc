
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function RadioButton_Create(AOwner: TComponent): TRadioButton; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TRadioButton.Create(AOwner);
  handleExceptionEnd
end;

procedure RadioButton_Free(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_CanFocus(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ContainsControl(AObj: TRadioButton; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function RadioButton_ControlAtPos(AObj: TRadioButton; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_DisableAlign(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_EnableAlign(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_FindChildControl(AObj: TRadioButton; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_FlipChildren(AObj: TRadioButton; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Focused(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_HandleAllocated(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_InsertControl(AObj: TRadioButton; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Invalidate(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_PaintTo(AObj: TRadioButton; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_RemoveControl(AObj: TRadioButton; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Realign(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Repaint(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_ScaleBy(AObj: TRadioButton; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_ScrollBy(AObj: TRadioButton; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_SetBounds(AObj: TRadioButton; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_SetFocus(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Update(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_BringToFront(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioButton_ClientToScreen(AObj: TRadioButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioButton_ClientToParent(AObj: TRadioButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Dragging(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_HasParent(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Hide(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Perform(AObj: TRadioButton; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Refresh(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioButton_ScreenToClient(AObj: TRadioButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioButton_ParentToClient(AObj: TRadioButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_SendToBack(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Show(AObj: TRadioButton); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_GetTextBuf(AObj: TRadioButton; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_GetTextLen(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_SetTextBuf(AObj: TRadioButton; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_FindComponent(AObj: TRadioButton; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_GetNamePath(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_Assign(AObj: TRadioButton; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ClassType(AObj: TRadioButton): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ClassName(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_InstanceSize(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_InheritsFrom(AObj: TRadioButton; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Equals(AObj: TRadioButton; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_GetHashCode(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ToString(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorToNeighbour(AObj: TRadioButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorParallel(AObj: TRadioButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorHorizontalCenterTo(AObj: TRadioButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorVerticalCenterTo(AObj: TRadioButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorSame(AObj: TRadioButton; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorAsAlign(AObj: TRadioButton; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AnchorClient(AObj: TRadioButton; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleDesignToForm(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleFormToDesign(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Scale96ToForm(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleFormTo96(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Scale96ToFont(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleFontTo96(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleScreenToFont(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleFontToScreen(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_Scale96ToScreen(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioButton_ScaleScreenTo96(AObj: TRadioButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_AutoAdjustLayout(AObj: TRadioButton; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioButton_FixDesignFontsPPI(AObj: TRadioButton; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure RadioButton_ScaleFontsPPI(AObj: TRadioButton; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnChange(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function RadioButton_GetAction(AObj: TRadioButton): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure RadioButton_SetAction(AObj: TRadioButton; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAlign(AObj: TRadioButton): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure RadioButton_SetAlign(AObj: TRadioButton; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAlignment(AObj: TRadioButton): TLeftRight; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TLeftRight);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure RadioButton_SetAlignment(AObj: TRadioButton; AValue: TLeftRight); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAnchors(AObj: TRadioButton): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure RadioButton_SetAnchors(AObj: TRadioButton; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function RadioButton_GetBiDiMode(AObj: TRadioButton): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure RadioButton_SetBiDiMode(AObj: TRadioButton; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function RadioButton_GetCaption(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure RadioButton_SetCaption(AObj: TRadioButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function RadioButton_GetChecked(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Checked;
  handleExceptionEnd
end;

procedure RadioButton_SetChecked(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Checked := AValue;
  handleExceptionEnd
end;

function RadioButton_GetColor(AObj: TRadioButton): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure RadioButton_SetColor(AObj: TRadioButton; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function RadioButton_GetConstraints(AObj: TRadioButton): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure RadioButton_SetConstraints(AObj: TRadioButton; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function RadioButton_GetDoubleBuffered(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure RadioButton_SetDoubleBuffered(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function RadioButton_GetDragCursor(AObj: TRadioButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure RadioButton_SetDragCursor(AObj: TRadioButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function RadioButton_GetDragKind(AObj: TRadioButton): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure RadioButton_SetDragKind(AObj: TRadioButton; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function RadioButton_GetDragMode(AObj: TRadioButton): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure RadioButton_SetDragMode(AObj: TRadioButton; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function RadioButton_GetEnabled(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure RadioButton_SetEnabled(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function RadioButton_GetFont(AObj: TRadioButton): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure RadioButton_SetFont(AObj: TRadioButton; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function RadioButton_GetParentColor(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure RadioButton_SetParentColor(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function RadioButton_GetParentDoubleBuffered(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure RadioButton_SetParentDoubleBuffered(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function RadioButton_GetParentFont(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure RadioButton_SetParentFont(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function RadioButton_GetParentShowHint(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure RadioButton_SetParentShowHint(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function RadioButton_GetPopupMenu(AObj: TRadioButton): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure RadioButton_SetPopupMenu(AObj: TRadioButton; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function RadioButton_GetShowHint(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure RadioButton_SetShowHint(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function RadioButton_GetTabOrder(AObj: TRadioButton): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure RadioButton_SetTabOrder(AObj: TRadioButton; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function RadioButton_GetTabStop(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure RadioButton_SetTabStop(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function RadioButton_GetVisible(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure RadioButton_SetVisible(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnClick(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure RadioButton_SetOnContextPopup(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure RadioButton_SetOnDragDrop(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure RadioButton_SetOnDragOver(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure RadioButton_SetOnEndDrag(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnEnter(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnExit(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure RadioButton_SetOnKeyDown(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure RadioButton_SetOnKeyPress(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure RadioButton_SetOnKeyUp(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure RadioButton_SetOnMouseDown(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnMouseEnter(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioButton_SetOnMouseLeave(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure RadioButton_SetOnMouseMove(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure RadioButton_SetOnMouseUp(AObj: TRadioButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function RadioButton_GetDockClientCount(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function RadioButton_GetDockSite(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure RadioButton_SetDockSite(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function RadioButton_GetMouseInClient(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function RadioButton_GetVisibleDockClientCount(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function RadioButton_GetBrush(AObj: TRadioButton): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function RadioButton_GetControlCount(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function RadioButton_GetHandle(AObj: TRadioButton): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function RadioButton_GetParentWindow(AObj: TRadioButton): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure RadioButton_SetParentWindow(AObj: TRadioButton; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function RadioButton_GetShowing(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function RadioButton_GetUseDockManager(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure RadioButton_SetUseDockManager(AObj: TRadioButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioButton_GetBoundsRect(AObj: TRadioButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure RadioButton_SetBoundsRect(AObj: TRadioButton; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function RadioButton_GetClientHeight(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure RadioButton_SetClientHeight(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioButton_GetClientOrigin(AObj: TRadioButton; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioButton_GetClientRect(AObj: TRadioButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function RadioButton_GetClientWidth(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure RadioButton_SetClientWidth(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function RadioButton_GetControlState(AObj: TRadioButton): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure RadioButton_SetControlState(AObj: TRadioButton; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function RadioButton_GetControlStyle(AObj: TRadioButton): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure RadioButton_SetControlStyle(AObj: TRadioButton; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function RadioButton_GetFloating(AObj: TRadioButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function RadioButton_GetParent(AObj: TRadioButton): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure RadioButton_SetParent(AObj: TRadioButton; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function RadioButton_GetLeft(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure RadioButton_SetLeft(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function RadioButton_GetTop(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure RadioButton_SetTop(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function RadioButton_GetWidth(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure RadioButton_SetWidth(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function RadioButton_GetHeight(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure RadioButton_SetHeight(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function RadioButton_GetCursor(AObj: TRadioButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure RadioButton_SetCursor(AObj: TRadioButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function RadioButton_GetHint(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure RadioButton_SetHint(AObj: TRadioButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function RadioButton_GetComponentCount(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function RadioButton_GetComponentIndex(AObj: TRadioButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure RadioButton_SetComponentIndex(AObj: TRadioButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function RadioButton_GetOwner(AObj: TRadioButton): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function RadioButton_GetName(AObj: TRadioButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure RadioButton_SetName(AObj: TRadioButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function RadioButton_GetTag(AObj: TRadioButton): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure RadioButton_SetTag(AObj: TRadioButton; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAnchorSideLeft(AObj: TRadioButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure RadioButton_SetAnchorSideLeft(AObj: TRadioButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAnchorSideTop(AObj: TRadioButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure RadioButton_SetAnchorSideTop(AObj: TRadioButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAnchorSideRight(AObj: TRadioButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure RadioButton_SetAnchorSideRight(AObj: TRadioButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function RadioButton_GetAnchorSideBottom(AObj: TRadioButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure RadioButton_SetAnchorSideBottom(AObj: TRadioButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function RadioButton_GetChildSizing(AObj: TRadioButton): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure RadioButton_SetChildSizing(AObj: TRadioButton; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function RadioButton_GetBorderSpacing(AObj: TRadioButton): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure RadioButton_SetBorderSpacing(AObj: TRadioButton; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function RadioButton_GetDockClients(AObj: TRadioButton; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function RadioButton_GetControls(AObj: TRadioButton; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function RadioButton_GetComponents(AObj: TRadioButton; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function RadioButton_GetAnchorSide(AObj: TRadioButton; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function RadioButton_StaticClassType: TClass; extdecl;
begin
  Result := TRadioButton;
end;

exports
  RadioButton_Create,
  RadioButton_Free,
  RadioButton_CanFocus,
  RadioButton_ContainsControl,
  RadioButton_ControlAtPos,
  RadioButton_DisableAlign,
  RadioButton_EnableAlign,
  RadioButton_FindChildControl,
  RadioButton_FlipChildren,
  RadioButton_Focused,
  RadioButton_HandleAllocated,
  RadioButton_InsertControl,
  RadioButton_Invalidate,
  RadioButton_PaintTo,
  RadioButton_RemoveControl,
  RadioButton_Realign,
  RadioButton_Repaint,
  RadioButton_ScaleBy,
  RadioButton_ScrollBy,
  RadioButton_SetBounds,
  RadioButton_SetFocus,
  RadioButton_Update,
  RadioButton_BringToFront,
  RadioButton_ClientToScreen,
  RadioButton_ClientToParent,
  RadioButton_Dragging,
  RadioButton_HasParent,
  RadioButton_Hide,
  RadioButton_Perform,
  RadioButton_Refresh,
  RadioButton_ScreenToClient,
  RadioButton_ParentToClient,
  RadioButton_SendToBack,
  RadioButton_Show,
  RadioButton_GetTextBuf,
  RadioButton_GetTextLen,
  RadioButton_SetTextBuf,
  RadioButton_FindComponent,
  RadioButton_GetNamePath,
  RadioButton_Assign,
  RadioButton_ClassType,
  RadioButton_ClassName,
  RadioButton_InstanceSize,
  RadioButton_InheritsFrom,
  RadioButton_Equals,
  RadioButton_GetHashCode,
  RadioButton_ToString,
  RadioButton_AnchorToNeighbour,
  RadioButton_AnchorParallel,
  RadioButton_AnchorHorizontalCenterTo,
  RadioButton_AnchorVerticalCenterTo,
  RadioButton_AnchorSame,
  RadioButton_AnchorAsAlign,
  RadioButton_AnchorClient,
  RadioButton_ScaleDesignToForm,
  RadioButton_ScaleFormToDesign,
  RadioButton_Scale96ToForm,
  RadioButton_ScaleFormTo96,
  RadioButton_Scale96ToFont,
  RadioButton_ScaleFontTo96,
  RadioButton_ScaleScreenToFont,
  RadioButton_ScaleFontToScreen,
  RadioButton_Scale96ToScreen,
  RadioButton_ScaleScreenTo96,
  RadioButton_AutoAdjustLayout,
  RadioButton_FixDesignFontsPPI,
  RadioButton_ScaleFontsPPI,
  RadioButton_SetOnChange,
  RadioButton_GetAction,
  RadioButton_SetAction,
  RadioButton_GetAlign,
  RadioButton_SetAlign,
  RadioButton_GetAlignment,
  RadioButton_SetAlignment,
  RadioButton_GetAnchors,
  RadioButton_SetAnchors,
  RadioButton_GetBiDiMode,
  RadioButton_SetBiDiMode,
  RadioButton_GetCaption,
  RadioButton_SetCaption,
  RadioButton_GetChecked,
  RadioButton_SetChecked,
  RadioButton_GetColor,
  RadioButton_SetColor,
  RadioButton_GetConstraints,
  RadioButton_SetConstraints,
  RadioButton_GetDoubleBuffered,
  RadioButton_SetDoubleBuffered,
  RadioButton_GetDragCursor,
  RadioButton_SetDragCursor,
  RadioButton_GetDragKind,
  RadioButton_SetDragKind,
  RadioButton_GetDragMode,
  RadioButton_SetDragMode,
  RadioButton_GetEnabled,
  RadioButton_SetEnabled,
  RadioButton_GetFont,
  RadioButton_SetFont,
  RadioButton_GetParentColor,
  RadioButton_SetParentColor,
  RadioButton_GetParentDoubleBuffered,
  RadioButton_SetParentDoubleBuffered,
  RadioButton_GetParentFont,
  RadioButton_SetParentFont,
  RadioButton_GetParentShowHint,
  RadioButton_SetParentShowHint,
  RadioButton_GetPopupMenu,
  RadioButton_SetPopupMenu,
  RadioButton_GetShowHint,
  RadioButton_SetShowHint,
  RadioButton_GetTabOrder,
  RadioButton_SetTabOrder,
  RadioButton_GetTabStop,
  RadioButton_SetTabStop,
  RadioButton_GetVisible,
  RadioButton_SetVisible,
  RadioButton_SetOnClick,
  RadioButton_SetOnContextPopup,
  RadioButton_SetOnDragDrop,
  RadioButton_SetOnDragOver,
  RadioButton_SetOnEndDrag,
  RadioButton_SetOnEnter,
  RadioButton_SetOnExit,
  RadioButton_SetOnKeyDown,
  RadioButton_SetOnKeyPress,
  RadioButton_SetOnKeyUp,
  RadioButton_SetOnMouseDown,
  RadioButton_SetOnMouseEnter,
  RadioButton_SetOnMouseLeave,
  RadioButton_SetOnMouseMove,
  RadioButton_SetOnMouseUp,
  RadioButton_GetDockClientCount,
  RadioButton_GetDockSite,
  RadioButton_SetDockSite,
  RadioButton_GetMouseInClient,
  RadioButton_GetVisibleDockClientCount,
  RadioButton_GetBrush,
  RadioButton_GetControlCount,
  RadioButton_GetHandle,
  RadioButton_GetParentWindow,
  RadioButton_SetParentWindow,
  RadioButton_GetShowing,
  RadioButton_GetUseDockManager,
  RadioButton_SetUseDockManager,
  RadioButton_GetBoundsRect,
  RadioButton_SetBoundsRect,
  RadioButton_GetClientHeight,
  RadioButton_SetClientHeight,
  RadioButton_GetClientOrigin,
  RadioButton_GetClientRect,
  RadioButton_GetClientWidth,
  RadioButton_SetClientWidth,
  RadioButton_GetControlState,
  RadioButton_SetControlState,
  RadioButton_GetControlStyle,
  RadioButton_SetControlStyle,
  RadioButton_GetFloating,
  RadioButton_GetParent,
  RadioButton_SetParent,
  RadioButton_GetLeft,
  RadioButton_SetLeft,
  RadioButton_GetTop,
  RadioButton_SetTop,
  RadioButton_GetWidth,
  RadioButton_SetWidth,
  RadioButton_GetHeight,
  RadioButton_SetHeight,
  RadioButton_GetCursor,
  RadioButton_SetCursor,
  RadioButton_GetHint,
  RadioButton_SetHint,
  RadioButton_GetComponentCount,
  RadioButton_GetComponentIndex,
  RadioButton_SetComponentIndex,
  RadioButton_GetOwner,
  RadioButton_GetName,
  RadioButton_SetName,
  RadioButton_GetTag,
  RadioButton_SetTag,
  RadioButton_GetAnchorSideLeft,
  RadioButton_SetAnchorSideLeft,
  RadioButton_GetAnchorSideTop,
  RadioButton_SetAnchorSideTop,
  RadioButton_GetAnchorSideRight,
  RadioButton_SetAnchorSideRight,
  RadioButton_GetAnchorSideBottom,
  RadioButton_SetAnchorSideBottom,
  RadioButton_GetChildSizing,
  RadioButton_SetChildSizing,
  RadioButton_GetBorderSpacing,
  RadioButton_SetBorderSpacing,
  RadioButton_GetDockClients,
  RadioButton_GetControls,
  RadioButton_GetComponents,
  RadioButton_GetAnchorSide,
  RadioButton_StaticClassType;

