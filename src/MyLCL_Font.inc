
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Font_Create: TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TFont.Create;
  handleExceptionEnd
end;

procedure Font_Free(AObj: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Font_Assign(AObj: TFont; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_HandleAllocated(AObj: TFont): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_GetNamePath(AObj: TFont): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_ClassType(AObj: TFont): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_ClassName(AObj: TFont): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_InstanceSize(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_InheritsFrom(AObj: TFont; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_Equals(AObj: TFont; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_GetHashCode(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Font_ToString(AObj: TFont): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function Font_GetHandle(AObj: TFont): HFONT; extdecl;
begin
{$ifdef UsehandleException}Result := HFONT(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

procedure Font_SetHandle(AObj: TFont; AValue: HFONT); extdecl;
begin
  handleExceptionBegin
  AObj.Handle := AValue;
  handleExceptionEnd
end;

function Font_GetPixelsPerInch(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PixelsPerInch;
  handleExceptionEnd
end;

procedure Font_SetPixelsPerInch(AObj: TFont; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PixelsPerInch := AValue;
  handleExceptionEnd
end;

function Font_GetCharset(AObj: TFont): TFontCharset; extdecl;
begin
{$ifdef UsehandleException}Result := TFontCharset(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Charset;
  handleExceptionEnd
end;

procedure Font_SetCharset(AObj: TFont; AValue: TFontCharset); extdecl;
begin
  handleExceptionBegin
  AObj.Charset := AValue;
  handleExceptionEnd
end;

function Font_GetColor(AObj: TFont): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure Font_SetColor(AObj: TFont; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function Font_GetHeight(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Font_SetHeight(AObj: TFont; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Font_GetName(AObj: TFont): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Font_SetName(AObj: TFont; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Font_GetOrientation(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Orientation;
  handleExceptionEnd
end;

procedure Font_SetOrientation(AObj: TFont; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Orientation := AValue;
  handleExceptionEnd
end;

function Font_GetPitch(AObj: TFont): TFontPitch; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TFontPitch);{$endif}
  handleExceptionBegin
  Result :=  AObj.Pitch;
  handleExceptionEnd
end;

procedure Font_SetPitch(AObj: TFont; AValue: TFontPitch); extdecl;
begin
  handleExceptionBegin
  AObj.Pitch := AValue;
  handleExceptionEnd
end;

function Font_GetSize(AObj: TFont): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Size;
  handleExceptionEnd
end;

procedure Font_SetSize(AObj: TFont; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Size := AValue;
  handleExceptionEnd
end;

function Font_GetStyle(AObj: TFont): TFontStyles; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Style;
  handleExceptionEnd
end;

procedure Font_SetStyle(AObj: TFont; AValue: TFontStyles); extdecl;
begin
  handleExceptionBegin
  AObj.Style := AValue;
  handleExceptionEnd
end;

function Font_GetQuality(AObj: TFont): TFontQuality; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TFontQuality);{$endif}
  handleExceptionBegin
  Result :=  AObj.Quality;
  handleExceptionEnd
end;

procedure Font_SetQuality(AObj: TFont; AValue: TFontQuality); extdecl;
begin
  handleExceptionBegin
  AObj.Quality := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Font_SetOnChange(AObj: TFont; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function Font_StaticClassType: TClass; extdecl;
begin
  Result := TFont;
end;

exports
  Font_Create,
  Font_Free,
  Font_Assign,
  Font_HandleAllocated,
  Font_GetNamePath,
  Font_ClassType,
  Font_ClassName,
  Font_InstanceSize,
  Font_InheritsFrom,
  Font_Equals,
  Font_GetHashCode,
  Font_ToString,
  Font_GetHandle,
  Font_SetHandle,
  Font_GetPixelsPerInch,
  Font_SetPixelsPerInch,
  Font_GetCharset,
  Font_SetCharset,
  Font_GetColor,
  Font_SetColor,
  Font_GetHeight,
  Font_SetHeight,
  Font_GetName,
  Font_SetName,
  Font_GetOrientation,
  Font_SetOrientation,
  Font_GetPitch,
  Font_SetPitch,
  Font_GetSize,
  Font_SetSize,
  Font_GetStyle,
  Font_SetStyle,
  Font_GetQuality,
  Font_SetQuality,
  Font_SetOnChange,
  Font_StaticClassType;

