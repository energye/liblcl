
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Memo_Create(AOwner: TComponent): TMemo; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TMemo.Create(AOwner);
  handleExceptionEnd
end;

procedure Memo_Free(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Append(AObj: TMemo; Value: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Append(Value);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Clear(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_ClearSelection(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_CopyToClipboard(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.CopyToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_CutToClipboard(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.CutToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_PasteFromClipboard(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.PasteFromClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Undo(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Undo;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_SelectAll(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_CanFocus(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ContainsControl(AObj: TMemo; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function Memo_ControlAtPos(AObj: TMemo; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_DisableAlign(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_EnableAlign(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_FindChildControl(AObj: TMemo; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_FlipChildren(AObj: TMemo; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Focused(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_HandleAllocated(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_InsertControl(AObj: TMemo; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Invalidate(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_PaintTo(AObj: TMemo; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_RemoveControl(AObj: TMemo; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Realign(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Repaint(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_ScaleBy(AObj: TMemo; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_ScrollBy(AObj: TMemo; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_SetBounds(AObj: TMemo; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_SetFocus(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Update(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_BringToFront(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Memo_ClientToScreen(AObj: TMemo; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Memo_ClientToParent(AObj: TMemo; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Dragging(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_HasParent(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Hide(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Perform(AObj: TMemo; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Refresh(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Memo_ScreenToClient(AObj: TMemo; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Memo_ParentToClient(AObj: TMemo; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_SendToBack(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Show(AObj: TMemo); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_GetTextBuf(AObj: TMemo; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_GetTextLen(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_SetTextBuf(AObj: TMemo; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_FindComponent(AObj: TMemo; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_GetNamePath(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_Assign(AObj: TMemo; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ClassType(AObj: TMemo): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ClassName(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_InstanceSize(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_InheritsFrom(AObj: TMemo; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Equals(AObj: TMemo; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_GetHashCode(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ToString(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorToNeighbour(AObj: TMemo; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorParallel(AObj: TMemo; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorHorizontalCenterTo(AObj: TMemo; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorVerticalCenterTo(AObj: TMemo; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorSame(AObj: TMemo; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorAsAlign(AObj: TMemo; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AnchorClient(AObj: TMemo; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleDesignToForm(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleFormToDesign(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Scale96ToForm(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleFormTo96(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Scale96ToFont(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleFontTo96(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleScreenToFont(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleFontToScreen(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_Scale96ToScreen(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Memo_ScaleScreenTo96(AObj: TMemo; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_AutoAdjustLayout(AObj: TMemo; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Memo_FixDesignFontsPPI(AObj: TMemo; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure Memo_ScaleFontsPPI(AObj: TMemo; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function Memo_GetAlign(AObj: TMemo): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure Memo_SetAlign(AObj: TMemo; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function Memo_GetAlignment(AObj: TMemo): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure Memo_SetAlignment(AObj: TMemo; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function Memo_GetAnchors(AObj: TMemo): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure Memo_SetAnchors(AObj: TMemo; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function Memo_GetBiDiMode(AObj: TMemo): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Memo_SetBiDiMode(AObj: TMemo; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function Memo_GetBorderStyle(AObj: TMemo): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure Memo_SetBorderStyle(AObj: TMemo; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function Memo_GetCharCase(AObj: TMemo): TEditCharCase; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TEditCharCase);{$endif}
  handleExceptionBegin
  Result :=  AObj.CharCase;
  handleExceptionEnd
end;

procedure Memo_SetCharCase(AObj: TMemo; AValue: TEditCharCase); extdecl;
begin
  handleExceptionBegin
  AObj.CharCase := AValue;
  handleExceptionEnd
end;

function Memo_GetColor(AObj: TMemo): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure Memo_SetColor(AObj: TMemo; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function Memo_GetConstraints(AObj: TMemo): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure Memo_SetConstraints(AObj: TMemo; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function Memo_GetDoubleBuffered(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure Memo_SetDoubleBuffered(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function Memo_GetDragCursor(AObj: TMemo): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure Memo_SetDragCursor(AObj: TMemo; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function Memo_GetDragKind(AObj: TMemo): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure Memo_SetDragKind(AObj: TMemo; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function Memo_GetDragMode(AObj: TMemo): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure Memo_SetDragMode(AObj: TMemo; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function Memo_GetEnabled(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Memo_SetEnabled(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Memo_GetFont(AObj: TMemo): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure Memo_SetFont(AObj: TMemo; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function Memo_GetHideSelection(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HideSelection;
  handleExceptionEnd
end;

procedure Memo_SetHideSelection(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HideSelection := AValue;
  handleExceptionEnd
end;

function Memo_GetLines(AObj: TMemo): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Lines;
  handleExceptionEnd
end;

procedure Memo_SetLines(AObj: TMemo; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Lines := AValue;
  handleExceptionEnd
end;

function Memo_GetMaxLength(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxLength;
  handleExceptionEnd
end;

procedure Memo_SetMaxLength(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxLength := AValue;
  handleExceptionEnd
end;

function Memo_GetParentColor(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure Memo_SetParentColor(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function Memo_GetParentDoubleBuffered(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure Memo_SetParentDoubleBuffered(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function Memo_GetParentFont(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure Memo_SetParentFont(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function Memo_GetParentShowHint(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure Memo_SetParentShowHint(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function Memo_GetPopupMenu(AObj: TMemo): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure Memo_SetPopupMenu(AObj: TMemo; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function Memo_GetReadOnly(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure Memo_SetReadOnly(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function Memo_GetScrollBars(AObj: TMemo): TScrollStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TScrollStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScrollBars;
  handleExceptionEnd
end;

procedure Memo_SetScrollBars(AObj: TMemo; AValue: TScrollStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBars := AValue;
  handleExceptionEnd
end;

function Memo_GetShowHint(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Memo_SetShowHint(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Memo_GetTabOrder(AObj: TMemo): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure Memo_SetTabOrder(AObj: TMemo; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function Memo_GetTabStop(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure Memo_SetTabStop(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function Memo_GetVisible(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Memo_SetVisible(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function Memo_GetWantReturns(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.WantReturns;
  handleExceptionEnd
end;

procedure Memo_SetWantReturns(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.WantReturns := AValue;
  handleExceptionEnd
end;

function Memo_GetWantTabs(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.WantTabs;
  handleExceptionEnd
end;

procedure Memo_SetWantTabs(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.WantTabs := AValue;
  handleExceptionEnd
end;

function Memo_GetWordWrap(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.WordWrap;
  handleExceptionEnd
end;

procedure Memo_SetWordWrap(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.WordWrap := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnChange(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnClick(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure Memo_SetOnContextPopup(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnDblClick(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure Memo_SetOnDragDrop(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure Memo_SetOnDragOver(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure Memo_SetOnEndDrag(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnEnter(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnExit(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Memo_SetOnKeyDown(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure Memo_SetOnKeyPress(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Memo_SetOnKeyUp(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Memo_SetOnMouseDown(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnMouseEnter(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Memo_SetOnMouseLeave(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure Memo_SetOnMouseMove(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Memo_SetOnMouseUp(AObj: TMemo; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//RETURNISLASTPARAM:
procedure Memo_GetCaretPos(AObj: TMemo; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.CaretPos;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure Memo_SetCaretPos(AObj: TMemo; var AValue: TPoint); extdecl;
begin
  handleExceptionBegin
  AObj.CaretPos := AValue;
  handleExceptionEnd
end;

function Memo_GetCanUndo(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanUndo;
  handleExceptionEnd
end;

function Memo_GetModified(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure Memo_SetModified(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function Memo_GetSelLength(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure Memo_SetSelLength(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function Memo_GetSelStart(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure Memo_SetSelStart(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function Memo_GetSelText(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure Memo_SetSelText(AObj: TMemo; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function Memo_GetText(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure Memo_SetText(AObj: TMemo; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function Memo_GetTextHint(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure Memo_SetTextHint(AObj: TMemo; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function Memo_GetDockClientCount(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function Memo_GetDockSite(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure Memo_SetDockSite(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function Memo_GetMouseInClient(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function Memo_GetVisibleDockClientCount(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function Memo_GetBrush(AObj: TMemo): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function Memo_GetControlCount(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function Memo_GetHandle(AObj: TMemo): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function Memo_GetParentWindow(AObj: TMemo): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure Memo_SetParentWindow(AObj: TMemo; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function Memo_GetShowing(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function Memo_GetUseDockManager(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure Memo_SetUseDockManager(AObj: TMemo; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function Memo_GetAction(AObj: TMemo): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure Memo_SetAction(AObj: TMemo; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Memo_GetBoundsRect(AObj: TMemo; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure Memo_SetBoundsRect(AObj: TMemo; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function Memo_GetClientHeight(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure Memo_SetClientHeight(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Memo_GetClientOrigin(AObj: TMemo; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Memo_GetClientRect(AObj: TMemo; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function Memo_GetClientWidth(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure Memo_SetClientWidth(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function Memo_GetControlState(AObj: TMemo): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure Memo_SetControlState(AObj: TMemo; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function Memo_GetControlStyle(AObj: TMemo): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure Memo_SetControlStyle(AObj: TMemo; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function Memo_GetFloating(AObj: TMemo): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function Memo_GetParent(AObj: TMemo): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure Memo_SetParent(AObj: TMemo; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function Memo_GetLeft(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure Memo_SetLeft(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function Memo_GetTop(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure Memo_SetTop(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function Memo_GetWidth(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure Memo_SetWidth(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function Memo_GetHeight(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Memo_SetHeight(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Memo_GetCursor(AObj: TMemo): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure Memo_SetCursor(AObj: TMemo; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function Memo_GetHint(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Memo_SetHint(AObj: TMemo; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Memo_GetComponentCount(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Memo_GetComponentIndex(AObj: TMemo): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Memo_SetComponentIndex(AObj: TMemo; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Memo_GetOwner(AObj: TMemo): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Memo_GetName(AObj: TMemo): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Memo_SetName(AObj: TMemo; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Memo_GetTag(AObj: TMemo): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Memo_SetTag(AObj: TMemo; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Memo_GetAnchorSideLeft(AObj: TMemo): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure Memo_SetAnchorSideLeft(AObj: TMemo; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function Memo_GetAnchorSideTop(AObj: TMemo): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure Memo_SetAnchorSideTop(AObj: TMemo; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function Memo_GetAnchorSideRight(AObj: TMemo): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure Memo_SetAnchorSideRight(AObj: TMemo; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function Memo_GetAnchorSideBottom(AObj: TMemo): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure Memo_SetAnchorSideBottom(AObj: TMemo; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function Memo_GetChildSizing(AObj: TMemo): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure Memo_SetChildSizing(AObj: TMemo; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function Memo_GetBorderSpacing(AObj: TMemo): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure Memo_SetBorderSpacing(AObj: TMemo; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function Memo_GetDockClients(AObj: TMemo; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function Memo_GetControls(AObj: TMemo; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function Memo_GetComponents(AObj: TMemo; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Memo_GetAnchorSide(AObj: TMemo; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function Memo_StaticClassType: TClass; extdecl;
begin
  Result := TMemo;
end;

exports
  Memo_Create,
  Memo_Free,
  Memo_Append,
  Memo_Clear,
  Memo_ClearSelection,
  Memo_CopyToClipboard,
  Memo_CutToClipboard,
  Memo_PasteFromClipboard,
  Memo_Undo,
  Memo_SelectAll,
  Memo_CanFocus,
  Memo_ContainsControl,
  Memo_ControlAtPos,
  Memo_DisableAlign,
  Memo_EnableAlign,
  Memo_FindChildControl,
  Memo_FlipChildren,
  Memo_Focused,
  Memo_HandleAllocated,
  Memo_InsertControl,
  Memo_Invalidate,
  Memo_PaintTo,
  Memo_RemoveControl,
  Memo_Realign,
  Memo_Repaint,
  Memo_ScaleBy,
  Memo_ScrollBy,
  Memo_SetBounds,
  Memo_SetFocus,
  Memo_Update,
  Memo_BringToFront,
  Memo_ClientToScreen,
  Memo_ClientToParent,
  Memo_Dragging,
  Memo_HasParent,
  Memo_Hide,
  Memo_Perform,
  Memo_Refresh,
  Memo_ScreenToClient,
  Memo_ParentToClient,
  Memo_SendToBack,
  Memo_Show,
  Memo_GetTextBuf,
  Memo_GetTextLen,
  Memo_SetTextBuf,
  Memo_FindComponent,
  Memo_GetNamePath,
  Memo_Assign,
  Memo_ClassType,
  Memo_ClassName,
  Memo_InstanceSize,
  Memo_InheritsFrom,
  Memo_Equals,
  Memo_GetHashCode,
  Memo_ToString,
  Memo_AnchorToNeighbour,
  Memo_AnchorParallel,
  Memo_AnchorHorizontalCenterTo,
  Memo_AnchorVerticalCenterTo,
  Memo_AnchorSame,
  Memo_AnchorAsAlign,
  Memo_AnchorClient,
  Memo_ScaleDesignToForm,
  Memo_ScaleFormToDesign,
  Memo_Scale96ToForm,
  Memo_ScaleFormTo96,
  Memo_Scale96ToFont,
  Memo_ScaleFontTo96,
  Memo_ScaleScreenToFont,
  Memo_ScaleFontToScreen,
  Memo_Scale96ToScreen,
  Memo_ScaleScreenTo96,
  Memo_AutoAdjustLayout,
  Memo_FixDesignFontsPPI,
  Memo_ScaleFontsPPI,
  Memo_GetAlign,
  Memo_SetAlign,
  Memo_GetAlignment,
  Memo_SetAlignment,
  Memo_GetAnchors,
  Memo_SetAnchors,
  Memo_GetBiDiMode,
  Memo_SetBiDiMode,
  Memo_GetBorderStyle,
  Memo_SetBorderStyle,
  Memo_GetCharCase,
  Memo_SetCharCase,
  Memo_GetColor,
  Memo_SetColor,
  Memo_GetConstraints,
  Memo_SetConstraints,
  Memo_GetDoubleBuffered,
  Memo_SetDoubleBuffered,
  Memo_GetDragCursor,
  Memo_SetDragCursor,
  Memo_GetDragKind,
  Memo_SetDragKind,
  Memo_GetDragMode,
  Memo_SetDragMode,
  Memo_GetEnabled,
  Memo_SetEnabled,
  Memo_GetFont,
  Memo_SetFont,
  Memo_GetHideSelection,
  Memo_SetHideSelection,
  Memo_GetLines,
  Memo_SetLines,
  Memo_GetMaxLength,
  Memo_SetMaxLength,
  Memo_GetParentColor,
  Memo_SetParentColor,
  Memo_GetParentDoubleBuffered,
  Memo_SetParentDoubleBuffered,
  Memo_GetParentFont,
  Memo_SetParentFont,
  Memo_GetParentShowHint,
  Memo_SetParentShowHint,
  Memo_GetPopupMenu,
  Memo_SetPopupMenu,
  Memo_GetReadOnly,
  Memo_SetReadOnly,
  Memo_GetScrollBars,
  Memo_SetScrollBars,
  Memo_GetShowHint,
  Memo_SetShowHint,
  Memo_GetTabOrder,
  Memo_SetTabOrder,
  Memo_GetTabStop,
  Memo_SetTabStop,
  Memo_GetVisible,
  Memo_SetVisible,
  Memo_GetWantReturns,
  Memo_SetWantReturns,
  Memo_GetWantTabs,
  Memo_SetWantTabs,
  Memo_GetWordWrap,
  Memo_SetWordWrap,
  Memo_SetOnChange,
  Memo_SetOnClick,
  Memo_SetOnContextPopup,
  Memo_SetOnDblClick,
  Memo_SetOnDragDrop,
  Memo_SetOnDragOver,
  Memo_SetOnEndDrag,
  Memo_SetOnEnter,
  Memo_SetOnExit,
  Memo_SetOnKeyDown,
  Memo_SetOnKeyPress,
  Memo_SetOnKeyUp,
  Memo_SetOnMouseDown,
  Memo_SetOnMouseEnter,
  Memo_SetOnMouseLeave,
  Memo_SetOnMouseMove,
  Memo_SetOnMouseUp,
  Memo_GetCaretPos,
  Memo_SetCaretPos,
  Memo_GetCanUndo,
  Memo_GetModified,
  Memo_SetModified,
  Memo_GetSelLength,
  Memo_SetSelLength,
  Memo_GetSelStart,
  Memo_SetSelStart,
  Memo_GetSelText,
  Memo_SetSelText,
  Memo_GetText,
  Memo_SetText,
  Memo_GetTextHint,
  Memo_SetTextHint,
  Memo_GetDockClientCount,
  Memo_GetDockSite,
  Memo_SetDockSite,
  Memo_GetMouseInClient,
  Memo_GetVisibleDockClientCount,
  Memo_GetBrush,
  Memo_GetControlCount,
  Memo_GetHandle,
  Memo_GetParentWindow,
  Memo_SetParentWindow,
  Memo_GetShowing,
  Memo_GetUseDockManager,
  Memo_SetUseDockManager,
  Memo_GetAction,
  Memo_SetAction,
  Memo_GetBoundsRect,
  Memo_SetBoundsRect,
  Memo_GetClientHeight,
  Memo_SetClientHeight,
  Memo_GetClientOrigin,
  Memo_GetClientRect,
  Memo_GetClientWidth,
  Memo_SetClientWidth,
  Memo_GetControlState,
  Memo_SetControlState,
  Memo_GetControlStyle,
  Memo_SetControlStyle,
  Memo_GetFloating,
  Memo_GetParent,
  Memo_SetParent,
  Memo_GetLeft,
  Memo_SetLeft,
  Memo_GetTop,
  Memo_SetTop,
  Memo_GetWidth,
  Memo_SetWidth,
  Memo_GetHeight,
  Memo_SetHeight,
  Memo_GetCursor,
  Memo_SetCursor,
  Memo_GetHint,
  Memo_SetHint,
  Memo_GetComponentCount,
  Memo_GetComponentIndex,
  Memo_SetComponentIndex,
  Memo_GetOwner,
  Memo_GetName,
  Memo_SetName,
  Memo_GetTag,
  Memo_SetTag,
  Memo_GetAnchorSideLeft,
  Memo_SetAnchorSideLeft,
  Memo_GetAnchorSideTop,
  Memo_SetAnchorSideTop,
  Memo_GetAnchorSideRight,
  Memo_SetAnchorSideRight,
  Memo_GetAnchorSideBottom,
  Memo_SetAnchorSideBottom,
  Memo_GetChildSizing,
  Memo_SetChildSizing,
  Memo_GetBorderSpacing,
  Memo_SetBorderSpacing,
  Memo_GetDockClients,
  Memo_GetControls,
  Memo_GetComponents,
  Memo_GetAnchorSide,
  Memo_StaticClassType;

