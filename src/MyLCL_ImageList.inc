
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ImageList_Create(AOwner: TComponent): TImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TImageList.Create(AOwner);
  handleExceptionEnd
end;

procedure ImageList_Free(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:4=nonPtr
procedure ImageList_StretchDraw(AObj: TImageList; ACanvas: TCanvas; AIndex: Integer; var ARect: TRect; AEnabled: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.StretchDraw(ACanvas, AIndex, ARect, AEnabled);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_AddSliced(AObj: TImageList; Image: TCustomBitmap; AHorizontalCount: Integer; AVerticalCount: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AddSliced(Image, AHorizontalCount, AVerticalCount);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_Add(AObj: TImageList; Image: TCustomBitmap; Mask: TCustomBitmap): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Add(Image, Mask);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Insert(AObj: TImageList; AIndex: Integer; AImage: TCustomBitmap; AMask: TCustomBitmap); extdecl;
begin
  handleExceptionBegin
  AObj.Insert(AIndex, AImage, AMask);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_InsertMasked(AObj: TImageList; Index: Integer; AImage: TCustomBitmap; MaskColor: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.InsertMasked(Index, AImage, MaskColor);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Replace(AObj: TImageList; AIndex: Integer; AImage: TCustomBitmap; AMask: TCustomBitmap; AllResolutions: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Replace(AIndex, AImage, AMask, AllResolutions);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_ReplaceMasked(AObj: TImageList; Index: Integer; NewImage: TCustomBitmap; MaskColor: TColor; AllResolutions: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReplaceMasked(Index, NewImage, MaskColor, AllResolutions);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_ReplaceIcon(AObj: TImageList; AIndex: Integer; AIcon: TIcon); extdecl;
begin
  handleExceptionBegin
  AObj.ReplaceIcon(AIndex, AIcon);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_GetBitmap(AObj: TImageList; Index: Integer; Image: TCustomBitmap; AEffect: TGraphicsDrawEffect); extdecl;
begin
  handleExceptionBegin
  AObj.GetBitmap(Index, Image, AEffect);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_GetFullBitmap(AObj: TImageList; Image: TCustomBitmap; AEffect: TGraphicsDrawEffect); extdecl;
begin
  handleExceptionBegin
  AObj.GetFullBitmap(Image, AEffect);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
procedure ImageList_GetHotSpot(AObj: TImageList; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.GetHotSpot;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_HideDragImage(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.HideDragImage;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_ShowDragImage(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.ShowDragImage;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Assign(AObj: TImageList; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_AddIcon(AObj: TImageList; Image: TIcon): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AddIcon(Image);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_AddImages(AObj: TImageList; Value: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.AddImages(Value);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_AddMasked(AObj: TImageList; Image: TBitmap; MaskColor: TColor): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AddMasked(Image, MaskColor);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Clear(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Delete(AObj: TImageList; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_InsertIcon(AObj: TImageList; Index: Integer; Image: TIcon); extdecl;
begin
  handleExceptionBegin
  AObj.InsertIcon(Index, Image);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_Move(AObj: TImageList; CurIndex: Integer; NewIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Move(CurIndex, NewIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_BeginUpdate(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.BeginUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageList_EndUpdate(AObj: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.EndUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_FindComponent(AObj: TImageList; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_GetNamePath(AObj: TImageList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_HasParent(AObj: TImageList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_ClassType(AObj: TImageList): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_ClassName(AObj: TImageList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_InstanceSize(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_InheritsFrom(AObj: TImageList; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_Equals(AObj: TImageList; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_GetHashCode(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageList_ToString(AObj: TImageList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ImageList_GetScaled(AObj: TImageList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Scaled;
  handleExceptionEnd
end;

procedure ImageList_SetScaled(AObj: TImageList; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Scaled := AValue;
  handleExceptionEnd
end;

function ImageList_GetShareImages(AObj: TImageList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShareImages;
  handleExceptionEnd
end;

procedure ImageList_SetShareImages(AObj: TImageList; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShareImages := AValue;
  handleExceptionEnd
end;

function ImageList_GetCount(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function ImageList_GetBlendColor(AObj: TImageList): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BlendColor;
  handleExceptionEnd
end;

procedure ImageList_SetBlendColor(AObj: TImageList; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.BlendColor := AValue;
  handleExceptionEnd
end;

function ImageList_GetBkColor(AObj: TImageList): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BkColor;
  handleExceptionEnd
end;

procedure ImageList_SetBkColor(AObj: TImageList; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.BkColor := AValue;
  handleExceptionEnd
end;

function ImageList_GetAllocBy(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AllocBy;
  handleExceptionEnd
end;

procedure ImageList_SetAllocBy(AObj: TImageList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AllocBy := AValue;
  handleExceptionEnd
end;

function ImageList_GetDrawingStyle(AObj: TImageList): TDrawingStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDrawingStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.DrawingStyle;
  handleExceptionEnd
end;

procedure ImageList_SetDrawingStyle(AObj: TImageList; AValue: TDrawingStyle); extdecl;
begin
  handleExceptionBegin
  AObj.DrawingStyle := AValue;
  handleExceptionEnd
end;

function ImageList_GetHeight(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure ImageList_SetHeight(AObj: TImageList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function ImageList_GetImageType(AObj: TImageList): TImageType; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TImageType);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageType;
  handleExceptionEnd
end;

procedure ImageList_SetImageType(AObj: TImageList; AValue: TImageType); extdecl;
begin
  handleExceptionBegin
  AObj.ImageType := AValue;
  handleExceptionEnd
end;

function ImageList_GetMasked(AObj: TImageList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Masked;
  handleExceptionEnd
end;

procedure ImageList_SetMasked(AObj: TImageList; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Masked := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ImageList_SetOnChange(AObj: TImageList; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function ImageList_GetWidth(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ImageList_SetWidth(AObj: TImageList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ImageList_GetDragCursor(AObj: TImageList): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure ImageList_SetDragCursor(AObj: TImageList; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function ImageList_GetDragging(AObj: TImageList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

function ImageList_GetComponentCount(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ImageList_GetComponentIndex(AObj: TImageList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ImageList_SetComponentIndex(AObj: TImageList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ImageList_GetOwner(AObj: TImageList): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ImageList_GetName(AObj: TImageList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ImageList_SetName(AObj: TImageList; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ImageList_GetTag(AObj: TImageList): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ImageList_SetTag(AObj: TImageList; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ImageList_GetComponents(AObj: TImageList; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ImageList_StaticClassType: TClass; extdecl;
begin
  Result := TImageList;
end;

exports
  ImageList_Create,
  ImageList_Free,
  ImageList_StretchDraw,
  ImageList_AddSliced,
  ImageList_Add,
  ImageList_Insert,
  ImageList_InsertMasked,
  ImageList_Replace,
  ImageList_ReplaceMasked,
  ImageList_ReplaceIcon,
  ImageList_GetBitmap,
  ImageList_GetFullBitmap,
  ImageList_GetHotSpot,
  ImageList_HideDragImage,
  ImageList_ShowDragImage,
  ImageList_Assign,
  ImageList_AddIcon,
  ImageList_AddImages,
  ImageList_AddMasked,
  ImageList_Clear,
  ImageList_Delete,
  ImageList_InsertIcon,
  ImageList_Move,
  ImageList_BeginUpdate,
  ImageList_EndUpdate,
  ImageList_FindComponent,
  ImageList_GetNamePath,
  ImageList_HasParent,
  ImageList_ClassType,
  ImageList_ClassName,
  ImageList_InstanceSize,
  ImageList_InheritsFrom,
  ImageList_Equals,
  ImageList_GetHashCode,
  ImageList_ToString,
  ImageList_GetScaled,
  ImageList_SetScaled,
  ImageList_GetShareImages,
  ImageList_SetShareImages,
  ImageList_GetCount,
  ImageList_GetBlendColor,
  ImageList_SetBlendColor,
  ImageList_GetBkColor,
  ImageList_SetBkColor,
  ImageList_GetAllocBy,
  ImageList_SetAllocBy,
  ImageList_GetDrawingStyle,
  ImageList_SetDrawingStyle,
  ImageList_GetHeight,
  ImageList_SetHeight,
  ImageList_GetImageType,
  ImageList_SetImageType,
  ImageList_GetMasked,
  ImageList_SetMasked,
  ImageList_SetOnChange,
  ImageList_GetWidth,
  ImageList_SetWidth,
  ImageList_GetDragCursor,
  ImageList_SetDragCursor,
  ImageList_GetDragging,
  ImageList_GetComponentCount,
  ImageList_GetComponentIndex,
  ImageList_SetComponentIndex,
  ImageList_GetOwner,
  ImageList_GetName,
  ImageList_SetName,
  ImageList_GetTag,
  ImageList_SetTag,
  ImageList_GetComponents,
  ImageList_StaticClassType;

