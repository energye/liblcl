
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function MonthCalendar_Create(AOwner: TComponent): TMonthCalendar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TMonthCalendar.Create(AOwner);
  handleExceptionEnd
end;

procedure MonthCalendar_Free(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_CanFocus(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ContainsControl(AObj: TMonthCalendar; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function MonthCalendar_ControlAtPos(AObj: TMonthCalendar; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_DisableAlign(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_EnableAlign(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_FindChildControl(AObj: TMonthCalendar; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_FlipChildren(AObj: TMonthCalendar; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Focused(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_HandleAllocated(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_InsertControl(AObj: TMonthCalendar; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Invalidate(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_PaintTo(AObj: TMonthCalendar; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_RemoveControl(AObj: TMonthCalendar; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Realign(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Repaint(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_ScaleBy(AObj: TMonthCalendar; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_ScrollBy(AObj: TMonthCalendar; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_SetBounds(AObj: TMonthCalendar; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_SetFocus(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Update(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_BringToFront(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MonthCalendar_ClientToScreen(AObj: TMonthCalendar; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MonthCalendar_ClientToParent(AObj: TMonthCalendar; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Dragging(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_HasParent(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Hide(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Perform(AObj: TMonthCalendar; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Refresh(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MonthCalendar_ScreenToClient(AObj: TMonthCalendar; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MonthCalendar_ParentToClient(AObj: TMonthCalendar; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_SendToBack(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Show(AObj: TMonthCalendar); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_GetTextBuf(AObj: TMonthCalendar; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_GetTextLen(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_SetTextBuf(AObj: TMonthCalendar; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_FindComponent(AObj: TMonthCalendar; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_GetNamePath(AObj: TMonthCalendar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_Assign(AObj: TMonthCalendar; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ClassType(AObj: TMonthCalendar): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ClassName(AObj: TMonthCalendar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_InstanceSize(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_InheritsFrom(AObj: TMonthCalendar; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Equals(AObj: TMonthCalendar; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_GetHashCode(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ToString(AObj: TMonthCalendar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorToNeighbour(AObj: TMonthCalendar; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorParallel(AObj: TMonthCalendar; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorHorizontalCenterTo(AObj: TMonthCalendar; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorVerticalCenterTo(AObj: TMonthCalendar; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorSame(AObj: TMonthCalendar; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorAsAlign(AObj: TMonthCalendar; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AnchorClient(AObj: TMonthCalendar; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleDesignToForm(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleFormToDesign(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Scale96ToForm(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleFormTo96(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Scale96ToFont(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleFontTo96(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleScreenToFont(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleFontToScreen(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_Scale96ToScreen(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MonthCalendar_ScaleScreenTo96(AObj: TMonthCalendar; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_AutoAdjustLayout(AObj: TMonthCalendar; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MonthCalendar_FixDesignFontsPPI(AObj: TMonthCalendar; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure MonthCalendar_ScaleFontsPPI(AObj: TMonthCalendar; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MonthCalendar_GetDateTime(AObj: TMonthCalendar; var Result: TUnixDateTime); extdecl;
begin
  handleExceptionBegin
  Result :=  ToUnixTime(AObj.DateTime);
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure MonthCalendar_SetDateTime(AObj: TMonthCalendar; var AValue: TUnixDateTime); extdecl;
begin
  handleExceptionBegin
  AObj.DateTime := UnixToTime(AValue);
  handleExceptionEnd
end;

function MonthCalendar_GetAlign(AObj: TMonthCalendar): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAlign(AObj: TMonthCalendar; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAnchors(AObj: TMonthCalendar): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAnchors(AObj: TMonthCalendar; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAutoSize(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAutoSize(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetBorderWidth(AObj: TMonthCalendar): TBorderWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TBorderWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure MonthCalendar_SetBorderWidth(AObj: TMonthCalendar; AValue: TBorderWidth); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetBiDiMode(AObj: TMonthCalendar): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure MonthCalendar_SetBiDiMode(AObj: TMonthCalendar; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetConstraints(AObj: TMonthCalendar): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure MonthCalendar_SetConstraints(AObj: TMonthCalendar; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MonthCalendar_GetDate(AObj: TMonthCalendar; var Result: TUnixDateTime); extdecl;
begin
  handleExceptionBegin
  Result :=  ToUnixTime(AObj.Date);
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure MonthCalendar_SetDate(AObj: TMonthCalendar; var AValue: TUnixDateTime); extdecl;
begin
  handleExceptionBegin
  AObj.Date := UnixToTime(AValue);
  handleExceptionEnd
end;

function MonthCalendar_GetDoubleBuffered(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure MonthCalendar_SetDoubleBuffered(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetDragCursor(AObj: TMonthCalendar): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure MonthCalendar_SetDragCursor(AObj: TMonthCalendar; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetDragKind(AObj: TMonthCalendar): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure MonthCalendar_SetDragKind(AObj: TMonthCalendar; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetDragMode(AObj: TMonthCalendar): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure MonthCalendar_SetDragMode(AObj: TMonthCalendar; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetEnabled(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure MonthCalendar_SetEnabled(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetFont(AObj: TMonthCalendar): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure MonthCalendar_SetFont(AObj: TMonthCalendar; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetParentDoubleBuffered(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure MonthCalendar_SetParentDoubleBuffered(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetPopupMenu(AObj: TMonthCalendar): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure MonthCalendar_SetPopupMenu(AObj: TMonthCalendar; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetShowHint(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure MonthCalendar_SetShowHint(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetTabOrder(AObj: TMonthCalendar): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure MonthCalendar_SetTabOrder(AObj: TMonthCalendar; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetTabStop(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure MonthCalendar_SetTabStop(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetVisible(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure MonthCalendar_SetVisible(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnClick(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure MonthCalendar_SetOnContextPopup(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnDblClick(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure MonthCalendar_SetOnDragDrop(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure MonthCalendar_SetOnDragOver(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure MonthCalendar_SetOnEndDock(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure MonthCalendar_SetOnEndDrag(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnEnter(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnExit(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure MonthCalendar_SetOnKeyDown(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure MonthCalendar_SetOnKeyPress(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure MonthCalendar_SetOnKeyUp(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnMouseEnter(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MonthCalendar_SetOnMouseLeave(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure MonthCalendar_SetOnStartDock(AObj: TMonthCalendar; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

function MonthCalendar_GetDockClientCount(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function MonthCalendar_GetDockSite(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure MonthCalendar_SetDockSite(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetMouseInClient(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function MonthCalendar_GetVisibleDockClientCount(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function MonthCalendar_GetBrush(AObj: TMonthCalendar): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function MonthCalendar_GetControlCount(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function MonthCalendar_GetHandle(AObj: TMonthCalendar): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function MonthCalendar_GetParentWindow(AObj: TMonthCalendar): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure MonthCalendar_SetParentWindow(AObj: TMonthCalendar; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetShowing(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function MonthCalendar_GetUseDockManager(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure MonthCalendar_SetUseDockManager(AObj: TMonthCalendar; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAction(AObj: TMonthCalendar): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAction(AObj: TMonthCalendar; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MonthCalendar_GetBoundsRect(AObj: TMonthCalendar; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure MonthCalendar_SetBoundsRect(AObj: TMonthCalendar; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetClientHeight(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure MonthCalendar_SetClientHeight(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MonthCalendar_GetClientOrigin(AObj: TMonthCalendar; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MonthCalendar_GetClientRect(AObj: TMonthCalendar; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function MonthCalendar_GetClientWidth(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure MonthCalendar_SetClientWidth(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetControlState(AObj: TMonthCalendar): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure MonthCalendar_SetControlState(AObj: TMonthCalendar; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetControlStyle(AObj: TMonthCalendar): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure MonthCalendar_SetControlStyle(AObj: TMonthCalendar; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetFloating(AObj: TMonthCalendar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function MonthCalendar_GetParent(AObj: TMonthCalendar): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure MonthCalendar_SetParent(AObj: TMonthCalendar; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetLeft(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure MonthCalendar_SetLeft(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetTop(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure MonthCalendar_SetTop(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetWidth(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure MonthCalendar_SetWidth(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetHeight(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure MonthCalendar_SetHeight(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetCursor(AObj: TMonthCalendar): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure MonthCalendar_SetCursor(AObj: TMonthCalendar; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetHint(AObj: TMonthCalendar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure MonthCalendar_SetHint(AObj: TMonthCalendar; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetComponentCount(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function MonthCalendar_GetComponentIndex(AObj: TMonthCalendar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure MonthCalendar_SetComponentIndex(AObj: TMonthCalendar; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetOwner(AObj: TMonthCalendar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function MonthCalendar_GetName(AObj: TMonthCalendar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure MonthCalendar_SetName(AObj: TMonthCalendar; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetTag(AObj: TMonthCalendar): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure MonthCalendar_SetTag(AObj: TMonthCalendar; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAnchorSideLeft(AObj: TMonthCalendar): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAnchorSideLeft(AObj: TMonthCalendar; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAnchorSideTop(AObj: TMonthCalendar): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAnchorSideTop(AObj: TMonthCalendar; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAnchorSideRight(AObj: TMonthCalendar): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAnchorSideRight(AObj: TMonthCalendar; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetAnchorSideBottom(AObj: TMonthCalendar): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure MonthCalendar_SetAnchorSideBottom(AObj: TMonthCalendar; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetChildSizing(AObj: TMonthCalendar): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure MonthCalendar_SetChildSizing(AObj: TMonthCalendar; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetBorderSpacing(AObj: TMonthCalendar): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure MonthCalendar_SetBorderSpacing(AObj: TMonthCalendar; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function MonthCalendar_GetDockClients(AObj: TMonthCalendar; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function MonthCalendar_GetControls(AObj: TMonthCalendar; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function MonthCalendar_GetComponents(AObj: TMonthCalendar; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function MonthCalendar_GetAnchorSide(AObj: TMonthCalendar; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function MonthCalendar_StaticClassType: TClass; extdecl;
begin
  Result := TMonthCalendar;
end;

exports
  MonthCalendar_Create,
  MonthCalendar_Free,
  MonthCalendar_CanFocus,
  MonthCalendar_ContainsControl,
  MonthCalendar_ControlAtPos,
  MonthCalendar_DisableAlign,
  MonthCalendar_EnableAlign,
  MonthCalendar_FindChildControl,
  MonthCalendar_FlipChildren,
  MonthCalendar_Focused,
  MonthCalendar_HandleAllocated,
  MonthCalendar_InsertControl,
  MonthCalendar_Invalidate,
  MonthCalendar_PaintTo,
  MonthCalendar_RemoveControl,
  MonthCalendar_Realign,
  MonthCalendar_Repaint,
  MonthCalendar_ScaleBy,
  MonthCalendar_ScrollBy,
  MonthCalendar_SetBounds,
  MonthCalendar_SetFocus,
  MonthCalendar_Update,
  MonthCalendar_BringToFront,
  MonthCalendar_ClientToScreen,
  MonthCalendar_ClientToParent,
  MonthCalendar_Dragging,
  MonthCalendar_HasParent,
  MonthCalendar_Hide,
  MonthCalendar_Perform,
  MonthCalendar_Refresh,
  MonthCalendar_ScreenToClient,
  MonthCalendar_ParentToClient,
  MonthCalendar_SendToBack,
  MonthCalendar_Show,
  MonthCalendar_GetTextBuf,
  MonthCalendar_GetTextLen,
  MonthCalendar_SetTextBuf,
  MonthCalendar_FindComponent,
  MonthCalendar_GetNamePath,
  MonthCalendar_Assign,
  MonthCalendar_ClassType,
  MonthCalendar_ClassName,
  MonthCalendar_InstanceSize,
  MonthCalendar_InheritsFrom,
  MonthCalendar_Equals,
  MonthCalendar_GetHashCode,
  MonthCalendar_ToString,
  MonthCalendar_AnchorToNeighbour,
  MonthCalendar_AnchorParallel,
  MonthCalendar_AnchorHorizontalCenterTo,
  MonthCalendar_AnchorVerticalCenterTo,
  MonthCalendar_AnchorSame,
  MonthCalendar_AnchorAsAlign,
  MonthCalendar_AnchorClient,
  MonthCalendar_ScaleDesignToForm,
  MonthCalendar_ScaleFormToDesign,
  MonthCalendar_Scale96ToForm,
  MonthCalendar_ScaleFormTo96,
  MonthCalendar_Scale96ToFont,
  MonthCalendar_ScaleFontTo96,
  MonthCalendar_ScaleScreenToFont,
  MonthCalendar_ScaleFontToScreen,
  MonthCalendar_Scale96ToScreen,
  MonthCalendar_ScaleScreenTo96,
  MonthCalendar_AutoAdjustLayout,
  MonthCalendar_FixDesignFontsPPI,
  MonthCalendar_ScaleFontsPPI,
  MonthCalendar_GetDateTime,
  MonthCalendar_SetDateTime,
  MonthCalendar_GetAlign,
  MonthCalendar_SetAlign,
  MonthCalendar_GetAnchors,
  MonthCalendar_SetAnchors,
  MonthCalendar_GetAutoSize,
  MonthCalendar_SetAutoSize,
  MonthCalendar_GetBorderWidth,
  MonthCalendar_SetBorderWidth,
  MonthCalendar_GetBiDiMode,
  MonthCalendar_SetBiDiMode,
  MonthCalendar_GetConstraints,
  MonthCalendar_SetConstraints,
  MonthCalendar_GetDate,
  MonthCalendar_SetDate,
  MonthCalendar_GetDoubleBuffered,
  MonthCalendar_SetDoubleBuffered,
  MonthCalendar_GetDragCursor,
  MonthCalendar_SetDragCursor,
  MonthCalendar_GetDragKind,
  MonthCalendar_SetDragKind,
  MonthCalendar_GetDragMode,
  MonthCalendar_SetDragMode,
  MonthCalendar_GetEnabled,
  MonthCalendar_SetEnabled,
  MonthCalendar_GetFont,
  MonthCalendar_SetFont,
  MonthCalendar_GetParentDoubleBuffered,
  MonthCalendar_SetParentDoubleBuffered,
  MonthCalendar_GetPopupMenu,
  MonthCalendar_SetPopupMenu,
  MonthCalendar_GetShowHint,
  MonthCalendar_SetShowHint,
  MonthCalendar_GetTabOrder,
  MonthCalendar_SetTabOrder,
  MonthCalendar_GetTabStop,
  MonthCalendar_SetTabStop,
  MonthCalendar_GetVisible,
  MonthCalendar_SetVisible,
  MonthCalendar_SetOnClick,
  MonthCalendar_SetOnContextPopup,
  MonthCalendar_SetOnDblClick,
  MonthCalendar_SetOnDragDrop,
  MonthCalendar_SetOnDragOver,
  MonthCalendar_SetOnEndDock,
  MonthCalendar_SetOnEndDrag,
  MonthCalendar_SetOnEnter,
  MonthCalendar_SetOnExit,
  MonthCalendar_SetOnKeyDown,
  MonthCalendar_SetOnKeyPress,
  MonthCalendar_SetOnKeyUp,
  MonthCalendar_SetOnMouseEnter,
  MonthCalendar_SetOnMouseLeave,
  MonthCalendar_SetOnStartDock,
  MonthCalendar_GetDockClientCount,
  MonthCalendar_GetDockSite,
  MonthCalendar_SetDockSite,
  MonthCalendar_GetMouseInClient,
  MonthCalendar_GetVisibleDockClientCount,
  MonthCalendar_GetBrush,
  MonthCalendar_GetControlCount,
  MonthCalendar_GetHandle,
  MonthCalendar_GetParentWindow,
  MonthCalendar_SetParentWindow,
  MonthCalendar_GetShowing,
  MonthCalendar_GetUseDockManager,
  MonthCalendar_SetUseDockManager,
  MonthCalendar_GetAction,
  MonthCalendar_SetAction,
  MonthCalendar_GetBoundsRect,
  MonthCalendar_SetBoundsRect,
  MonthCalendar_GetClientHeight,
  MonthCalendar_SetClientHeight,
  MonthCalendar_GetClientOrigin,
  MonthCalendar_GetClientRect,
  MonthCalendar_GetClientWidth,
  MonthCalendar_SetClientWidth,
  MonthCalendar_GetControlState,
  MonthCalendar_SetControlState,
  MonthCalendar_GetControlStyle,
  MonthCalendar_SetControlStyle,
  MonthCalendar_GetFloating,
  MonthCalendar_GetParent,
  MonthCalendar_SetParent,
  MonthCalendar_GetLeft,
  MonthCalendar_SetLeft,
  MonthCalendar_GetTop,
  MonthCalendar_SetTop,
  MonthCalendar_GetWidth,
  MonthCalendar_SetWidth,
  MonthCalendar_GetHeight,
  MonthCalendar_SetHeight,
  MonthCalendar_GetCursor,
  MonthCalendar_SetCursor,
  MonthCalendar_GetHint,
  MonthCalendar_SetHint,
  MonthCalendar_GetComponentCount,
  MonthCalendar_GetComponentIndex,
  MonthCalendar_SetComponentIndex,
  MonthCalendar_GetOwner,
  MonthCalendar_GetName,
  MonthCalendar_SetName,
  MonthCalendar_GetTag,
  MonthCalendar_SetTag,
  MonthCalendar_GetAnchorSideLeft,
  MonthCalendar_SetAnchorSideLeft,
  MonthCalendar_GetAnchorSideTop,
  MonthCalendar_SetAnchorSideTop,
  MonthCalendar_GetAnchorSideRight,
  MonthCalendar_SetAnchorSideRight,
  MonthCalendar_GetAnchorSideBottom,
  MonthCalendar_SetAnchorSideBottom,
  MonthCalendar_GetChildSizing,
  MonthCalendar_SetChildSizing,
  MonthCalendar_GetBorderSpacing,
  MonthCalendar_SetBorderSpacing,
  MonthCalendar_GetDockClients,
  MonthCalendar_GetControls,
  MonthCalendar_GetComponents,
  MonthCalendar_GetAnchorSide,
  MonthCalendar_StaticClassType;

