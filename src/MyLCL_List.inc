
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function List_Create: TList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TList.Create;
  handleExceptionEnd
end;

procedure List_Free(AObj: TList); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_Add(AObj: TList; Item: Pointer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Add(Item);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure List_Clear(AObj: TList); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure List_Delete(AObj: TList; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure List_Exchange(AObj: TList; Index1: Integer; Index2: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Exchange(Index1, Index2);
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_Expand(AObj: TList): TList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Expand;
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_IndexOf(AObj: TList; Item: Pointer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.IndexOf(Item);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure List_Insert(AObj: TList; Index: Integer; Item: Pointer); extdecl;
begin
  handleExceptionBegin
  AObj.Insert(Index, Item);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure List_Move(AObj: TList; CurIndex: Integer; NewIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Move(CurIndex, NewIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_ClassType(AObj: TList): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_ClassName(AObj: TList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_InstanceSize(AObj: TList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_InheritsFrom(AObj: TList; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_Equals(AObj: TList; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_GetHashCode(AObj: TList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function List_ToString(AObj: TList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function List_GetCapacity(AObj: TList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Capacity;
  handleExceptionEnd
end;

procedure List_SetCapacity(AObj: TList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Capacity := AValue;
  handleExceptionEnd
end;

function List_GetCount(AObj: TList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

procedure List_SetCount(AObj: TList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Count := AValue;
  handleExceptionEnd
end;

function List_GetList(AObj: TList): PPointerList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.List;
  handleExceptionEnd
end;

function List_GetItems(AObj: TList; Index: Integer): Pointer; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items[Index];
  handleExceptionEnd
end;

procedure List_SetItems(AObj: TList; Index: Integer; AValue: Pointer); extdecl;
begin
  handleExceptionBegin
  AObj.Items[Index] := AValue;
  handleExceptionEnd
end;

function List_StaticClassType: TClass; extdecl;
begin
  Result := TList;
end;

exports
  List_Create,
  List_Free,
  List_Add,
  List_Clear,
  List_Delete,
  List_Exchange,
  List_Expand,
  List_IndexOf,
  List_Insert,
  List_Move,
  List_ClassType,
  List_ClassName,
  List_InstanceSize,
  List_InheritsFrom,
  List_Equals,
  List_GetHashCode,
  List_ToString,
  List_GetCapacity,
  List_SetCapacity,
  List_GetCount,
  List_SetCount,
  List_GetList,
  List_GetItems,
  List_SetItems,
  List_StaticClassType;

