
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function FlowPanel_Create(AOwner: TComponent): TFlowPanel; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TFlowPanel.Create(AOwner);
  handleExceptionEnd
end;

procedure FlowPanel_Free(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_GetControlIndex(AObj: TFlowPanel; AControl: TControl): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetControlIndex(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_SetControlIndex(AObj: TFlowPanel; AControl: TControl; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetControlIndex(AControl, Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_CanFocus(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ContainsControl(AObj: TFlowPanel; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function FlowPanel_ControlAtPos(AObj: TFlowPanel; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_DisableAlign(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_EnableAlign(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_FindChildControl(AObj: TFlowPanel; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_FlipChildren(AObj: TFlowPanel; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Focused(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_HandleAllocated(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_InsertControl(AObj: TFlowPanel; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Invalidate(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_PaintTo(AObj: TFlowPanel; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_RemoveControl(AObj: TFlowPanel; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Realign(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Repaint(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_ScaleBy(AObj: TFlowPanel; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_ScrollBy(AObj: TFlowPanel; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_SetBounds(AObj: TFlowPanel; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_SetFocus(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Update(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_BringToFront(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FlowPanel_ClientToScreen(AObj: TFlowPanel; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FlowPanel_ClientToParent(AObj: TFlowPanel; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Dragging(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_HasParent(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Hide(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Perform(AObj: TFlowPanel; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Refresh(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FlowPanel_ScreenToClient(AObj: TFlowPanel; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FlowPanel_ParentToClient(AObj: TFlowPanel; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_SendToBack(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Show(AObj: TFlowPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_GetTextBuf(AObj: TFlowPanel; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_GetTextLen(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_SetTextBuf(AObj: TFlowPanel; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_FindComponent(AObj: TFlowPanel; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_GetNamePath(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_Assign(AObj: TFlowPanel; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ClassType(AObj: TFlowPanel): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ClassName(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_InstanceSize(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_InheritsFrom(AObj: TFlowPanel; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Equals(AObj: TFlowPanel; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_GetHashCode(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ToString(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorToNeighbour(AObj: TFlowPanel; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorParallel(AObj: TFlowPanel; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorHorizontalCenterTo(AObj: TFlowPanel; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorVerticalCenterTo(AObj: TFlowPanel; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorSame(AObj: TFlowPanel; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorAsAlign(AObj: TFlowPanel; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AnchorClient(AObj: TFlowPanel; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleDesignToForm(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleFormToDesign(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Scale96ToForm(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleFormTo96(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Scale96ToFont(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleFontTo96(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleScreenToFont(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleFontToScreen(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_Scale96ToScreen(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanel_ScaleScreenTo96(AObj: TFlowPanel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_AutoAdjustLayout(AObj: TFlowPanel; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanel_FixDesignFontsPPI(AObj: TFlowPanel; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure FlowPanel_ScaleFontsPPI(AObj: TFlowPanel; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function FlowPanel_GetControlList(AObj: TFlowPanel): TFlowPanelControlList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlList;
  handleExceptionEnd
end;

procedure FlowPanel_SetControlList(AObj: TFlowPanel; AValue: TFlowPanelControlList); extdecl;
begin
  handleExceptionBegin
  AObj.ControlList := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAlign(AObj: TFlowPanel): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure FlowPanel_SetAlign(AObj: TFlowPanel; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAlignment(AObj: TFlowPanel): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure FlowPanel_SetAlignment(AObj: TFlowPanel; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAnchors(AObj: TFlowPanel): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure FlowPanel_SetAnchors(AObj: TFlowPanel; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAutoSize(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure FlowPanel_SetAutoSize(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAutoWrap(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoWrap;
  handleExceptionEnd
end;

procedure FlowPanel_SetAutoWrap(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoWrap := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetBiDiMode(AObj: TFlowPanel): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure FlowPanel_SetBiDiMode(AObj: TFlowPanel; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetBorderWidth(AObj: TFlowPanel): TBorderWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TBorderWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure FlowPanel_SetBorderWidth(AObj: TFlowPanel; AValue: TBorderWidth); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetBorderStyle(AObj: TFlowPanel): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure FlowPanel_SetBorderStyle(AObj: TFlowPanel; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetCaption(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure FlowPanel_SetCaption(AObj: TFlowPanel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetColor(AObj: TFlowPanel): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure FlowPanel_SetColor(AObj: TFlowPanel; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetConstraints(AObj: TFlowPanel): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure FlowPanel_SetConstraints(AObj: TFlowPanel; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetUseDockManager(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure FlowPanel_SetUseDockManager(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDockSite(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure FlowPanel_SetDockSite(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDoubleBuffered(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure FlowPanel_SetDoubleBuffered(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDragCursor(AObj: TFlowPanel): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure FlowPanel_SetDragCursor(AObj: TFlowPanel; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDragKind(AObj: TFlowPanel): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure FlowPanel_SetDragKind(AObj: TFlowPanel; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDragMode(AObj: TFlowPanel): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure FlowPanel_SetDragMode(AObj: TFlowPanel; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetEnabled(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure FlowPanel_SetEnabled(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetFlowStyle(AObj: TFlowPanel): TFlowStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TFlowStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.FlowStyle;
  handleExceptionEnd
end;

procedure FlowPanel_SetFlowStyle(AObj: TFlowPanel; AValue: TFlowStyle); extdecl;
begin
  handleExceptionBegin
  AObj.FlowStyle := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetFullRepaint(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FullRepaint;
  handleExceptionEnd
end;

procedure FlowPanel_SetFullRepaint(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FullRepaint := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetFont(AObj: TFlowPanel): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure FlowPanel_SetFont(AObj: TFlowPanel; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetParentBackground(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentBackground;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentBackground(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentBackground := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetParentColor(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentColor(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetParentDoubleBuffered(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentDoubleBuffered(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetParentFont(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentFont(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetParentShowHint(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentShowHint(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetPopupMenu(AObj: TFlowPanel): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure FlowPanel_SetPopupMenu(AObj: TFlowPanel; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetShowHint(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure FlowPanel_SetShowHint(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetTabOrder(AObj: TFlowPanel): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure FlowPanel_SetTabOrder(AObj: TFlowPanel; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetTabStop(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure FlowPanel_SetTabStop(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetVisible(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure FlowPanel_SetVisible(AObj: TFlowPanel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TAlignPositionEvent
procedure FlowPanel_SetOnAlignPosition(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTAlignPositionEvent}
  {$DEFINE EventName := OnAlignPosition}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnClick(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TConstrainedResizeEvent
procedure FlowPanel_SetOnConstrainedResize(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTConstrainedResizeEvent}
  {$DEFINE EventName := OnConstrainedResize}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure FlowPanel_SetOnContextPopup(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TDockDropEvent
procedure FlowPanel_SetOnDockDrop(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDockDropEvent}
  {$DEFINE EventName := OnDockDrop}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnDblClick(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure FlowPanel_SetOnDragDrop(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure FlowPanel_SetOnDragOver(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure FlowPanel_SetOnEndDock(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure FlowPanel_SetOnEndDrag(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnEnter(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnExit(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TGetSiteInfoEvent
procedure FlowPanel_SetOnGetSiteInfo(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetSiteInfoEvent}
  {$DEFINE EventName := OnGetSiteInfo}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure FlowPanel_SetOnMouseDown(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnMouseEnter(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnMouseLeave(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure FlowPanel_SetOnMouseMove(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure FlowPanel_SetOnMouseUp(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FlowPanel_SetOnResize(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure FlowPanel_SetOnStartDock(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

//EVENT_TYPE:TUnDockEvent
procedure FlowPanel_SetOnUnDock(AObj: TFlowPanel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTUnDockEvent}
  {$DEFINE EventName := OnUnDock}
  EventMethodCode
end;

function FlowPanel_GetDockClientCount(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function FlowPanel_GetMouseInClient(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function FlowPanel_GetVisibleDockClientCount(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function FlowPanel_GetBrush(AObj: TFlowPanel): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function FlowPanel_GetControlCount(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function FlowPanel_GetHandle(AObj: TFlowPanel): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function FlowPanel_GetParentWindow(AObj: TFlowPanel): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure FlowPanel_SetParentWindow(AObj: TFlowPanel; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetShowing(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function FlowPanel_GetAction(AObj: TFlowPanel): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure FlowPanel_SetAction(AObj: TFlowPanel; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FlowPanel_GetBoundsRect(AObj: TFlowPanel; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FlowPanel_SetBoundsRect(AObj: TFlowPanel; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetClientHeight(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure FlowPanel_SetClientHeight(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FlowPanel_GetClientOrigin(AObj: TFlowPanel; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FlowPanel_GetClientRect(AObj: TFlowPanel; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function FlowPanel_GetClientWidth(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure FlowPanel_SetClientWidth(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetControlState(AObj: TFlowPanel): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure FlowPanel_SetControlState(AObj: TFlowPanel; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetControlStyle(AObj: TFlowPanel): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure FlowPanel_SetControlStyle(AObj: TFlowPanel; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetFloating(AObj: TFlowPanel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function FlowPanel_GetParent(AObj: TFlowPanel): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure FlowPanel_SetParent(AObj: TFlowPanel; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetLeft(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure FlowPanel_SetLeft(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetTop(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure FlowPanel_SetTop(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetWidth(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure FlowPanel_SetWidth(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetHeight(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure FlowPanel_SetHeight(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetCursor(AObj: TFlowPanel): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure FlowPanel_SetCursor(AObj: TFlowPanel; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetHint(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure FlowPanel_SetHint(AObj: TFlowPanel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetComponentCount(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function FlowPanel_GetComponentIndex(AObj: TFlowPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure FlowPanel_SetComponentIndex(AObj: TFlowPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetOwner(AObj: TFlowPanel): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function FlowPanel_GetName(AObj: TFlowPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure FlowPanel_SetName(AObj: TFlowPanel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetTag(AObj: TFlowPanel): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure FlowPanel_SetTag(AObj: TFlowPanel; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAnchorSideLeft(AObj: TFlowPanel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure FlowPanel_SetAnchorSideLeft(AObj: TFlowPanel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAnchorSideTop(AObj: TFlowPanel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure FlowPanel_SetAnchorSideTop(AObj: TFlowPanel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAnchorSideRight(AObj: TFlowPanel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure FlowPanel_SetAnchorSideRight(AObj: TFlowPanel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetAnchorSideBottom(AObj: TFlowPanel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure FlowPanel_SetAnchorSideBottom(AObj: TFlowPanel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetChildSizing(AObj: TFlowPanel): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure FlowPanel_SetChildSizing(AObj: TFlowPanel; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetBorderSpacing(AObj: TFlowPanel): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure FlowPanel_SetBorderSpacing(AObj: TFlowPanel; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function FlowPanel_GetDockClients(AObj: TFlowPanel; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function FlowPanel_GetControls(AObj: TFlowPanel; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function FlowPanel_GetComponents(AObj: TFlowPanel; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function FlowPanel_GetAnchorSide(AObj: TFlowPanel; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function FlowPanel_StaticClassType: TClass; extdecl;
begin
  Result := TFlowPanel;
end;

exports
  FlowPanel_Create,
  FlowPanel_Free,
  FlowPanel_GetControlIndex,
  FlowPanel_SetControlIndex,
  FlowPanel_CanFocus,
  FlowPanel_ContainsControl,
  FlowPanel_ControlAtPos,
  FlowPanel_DisableAlign,
  FlowPanel_EnableAlign,
  FlowPanel_FindChildControl,
  FlowPanel_FlipChildren,
  FlowPanel_Focused,
  FlowPanel_HandleAllocated,
  FlowPanel_InsertControl,
  FlowPanel_Invalidate,
  FlowPanel_PaintTo,
  FlowPanel_RemoveControl,
  FlowPanel_Realign,
  FlowPanel_Repaint,
  FlowPanel_ScaleBy,
  FlowPanel_ScrollBy,
  FlowPanel_SetBounds,
  FlowPanel_SetFocus,
  FlowPanel_Update,
  FlowPanel_BringToFront,
  FlowPanel_ClientToScreen,
  FlowPanel_ClientToParent,
  FlowPanel_Dragging,
  FlowPanel_HasParent,
  FlowPanel_Hide,
  FlowPanel_Perform,
  FlowPanel_Refresh,
  FlowPanel_ScreenToClient,
  FlowPanel_ParentToClient,
  FlowPanel_SendToBack,
  FlowPanel_Show,
  FlowPanel_GetTextBuf,
  FlowPanel_GetTextLen,
  FlowPanel_SetTextBuf,
  FlowPanel_FindComponent,
  FlowPanel_GetNamePath,
  FlowPanel_Assign,
  FlowPanel_ClassType,
  FlowPanel_ClassName,
  FlowPanel_InstanceSize,
  FlowPanel_InheritsFrom,
  FlowPanel_Equals,
  FlowPanel_GetHashCode,
  FlowPanel_ToString,
  FlowPanel_AnchorToNeighbour,
  FlowPanel_AnchorParallel,
  FlowPanel_AnchorHorizontalCenterTo,
  FlowPanel_AnchorVerticalCenterTo,
  FlowPanel_AnchorSame,
  FlowPanel_AnchorAsAlign,
  FlowPanel_AnchorClient,
  FlowPanel_ScaleDesignToForm,
  FlowPanel_ScaleFormToDesign,
  FlowPanel_Scale96ToForm,
  FlowPanel_ScaleFormTo96,
  FlowPanel_Scale96ToFont,
  FlowPanel_ScaleFontTo96,
  FlowPanel_ScaleScreenToFont,
  FlowPanel_ScaleFontToScreen,
  FlowPanel_Scale96ToScreen,
  FlowPanel_ScaleScreenTo96,
  FlowPanel_AutoAdjustLayout,
  FlowPanel_FixDesignFontsPPI,
  FlowPanel_ScaleFontsPPI,
  FlowPanel_GetControlList,
  FlowPanel_SetControlList,
  FlowPanel_GetAlign,
  FlowPanel_SetAlign,
  FlowPanel_GetAlignment,
  FlowPanel_SetAlignment,
  FlowPanel_GetAnchors,
  FlowPanel_SetAnchors,
  FlowPanel_GetAutoSize,
  FlowPanel_SetAutoSize,
  FlowPanel_GetAutoWrap,
  FlowPanel_SetAutoWrap,
  FlowPanel_GetBiDiMode,
  FlowPanel_SetBiDiMode,
  FlowPanel_GetBorderWidth,
  FlowPanel_SetBorderWidth,
  FlowPanel_GetBorderStyle,
  FlowPanel_SetBorderStyle,
  FlowPanel_GetCaption,
  FlowPanel_SetCaption,
  FlowPanel_GetColor,
  FlowPanel_SetColor,
  FlowPanel_GetConstraints,
  FlowPanel_SetConstraints,
  FlowPanel_GetUseDockManager,
  FlowPanel_SetUseDockManager,
  FlowPanel_GetDockSite,
  FlowPanel_SetDockSite,
  FlowPanel_GetDoubleBuffered,
  FlowPanel_SetDoubleBuffered,
  FlowPanel_GetDragCursor,
  FlowPanel_SetDragCursor,
  FlowPanel_GetDragKind,
  FlowPanel_SetDragKind,
  FlowPanel_GetDragMode,
  FlowPanel_SetDragMode,
  FlowPanel_GetEnabled,
  FlowPanel_SetEnabled,
  FlowPanel_GetFlowStyle,
  FlowPanel_SetFlowStyle,
  FlowPanel_GetFullRepaint,
  FlowPanel_SetFullRepaint,
  FlowPanel_GetFont,
  FlowPanel_SetFont,
  FlowPanel_GetParentBackground,
  FlowPanel_SetParentBackground,
  FlowPanel_GetParentColor,
  FlowPanel_SetParentColor,
  FlowPanel_GetParentDoubleBuffered,
  FlowPanel_SetParentDoubleBuffered,
  FlowPanel_GetParentFont,
  FlowPanel_SetParentFont,
  FlowPanel_GetParentShowHint,
  FlowPanel_SetParentShowHint,
  FlowPanel_GetPopupMenu,
  FlowPanel_SetPopupMenu,
  FlowPanel_GetShowHint,
  FlowPanel_SetShowHint,
  FlowPanel_GetTabOrder,
  FlowPanel_SetTabOrder,
  FlowPanel_GetTabStop,
  FlowPanel_SetTabStop,
  FlowPanel_GetVisible,
  FlowPanel_SetVisible,
  FlowPanel_SetOnAlignPosition,
  FlowPanel_SetOnClick,
  FlowPanel_SetOnConstrainedResize,
  FlowPanel_SetOnContextPopup,
  FlowPanel_SetOnDockDrop,
  FlowPanel_SetOnDblClick,
  FlowPanel_SetOnDragDrop,
  FlowPanel_SetOnDragOver,
  FlowPanel_SetOnEndDock,
  FlowPanel_SetOnEndDrag,
  FlowPanel_SetOnEnter,
  FlowPanel_SetOnExit,
  FlowPanel_SetOnGetSiteInfo,
  FlowPanel_SetOnMouseDown,
  FlowPanel_SetOnMouseEnter,
  FlowPanel_SetOnMouseLeave,
  FlowPanel_SetOnMouseMove,
  FlowPanel_SetOnMouseUp,
  FlowPanel_SetOnResize,
  FlowPanel_SetOnStartDock,
  FlowPanel_SetOnUnDock,
  FlowPanel_GetDockClientCount,
  FlowPanel_GetMouseInClient,
  FlowPanel_GetVisibleDockClientCount,
  FlowPanel_GetBrush,
  FlowPanel_GetControlCount,
  FlowPanel_GetHandle,
  FlowPanel_GetParentWindow,
  FlowPanel_SetParentWindow,
  FlowPanel_GetShowing,
  FlowPanel_GetAction,
  FlowPanel_SetAction,
  FlowPanel_GetBoundsRect,
  FlowPanel_SetBoundsRect,
  FlowPanel_GetClientHeight,
  FlowPanel_SetClientHeight,
  FlowPanel_GetClientOrigin,
  FlowPanel_GetClientRect,
  FlowPanel_GetClientWidth,
  FlowPanel_SetClientWidth,
  FlowPanel_GetControlState,
  FlowPanel_SetControlState,
  FlowPanel_GetControlStyle,
  FlowPanel_SetControlStyle,
  FlowPanel_GetFloating,
  FlowPanel_GetParent,
  FlowPanel_SetParent,
  FlowPanel_GetLeft,
  FlowPanel_SetLeft,
  FlowPanel_GetTop,
  FlowPanel_SetTop,
  FlowPanel_GetWidth,
  FlowPanel_SetWidth,
  FlowPanel_GetHeight,
  FlowPanel_SetHeight,
  FlowPanel_GetCursor,
  FlowPanel_SetCursor,
  FlowPanel_GetHint,
  FlowPanel_SetHint,
  FlowPanel_GetComponentCount,
  FlowPanel_GetComponentIndex,
  FlowPanel_SetComponentIndex,
  FlowPanel_GetOwner,
  FlowPanel_GetName,
  FlowPanel_SetName,
  FlowPanel_GetTag,
  FlowPanel_SetTag,
  FlowPanel_GetAnchorSideLeft,
  FlowPanel_SetAnchorSideLeft,
  FlowPanel_GetAnchorSideTop,
  FlowPanel_SetAnchorSideTop,
  FlowPanel_GetAnchorSideRight,
  FlowPanel_SetAnchorSideRight,
  FlowPanel_GetAnchorSideBottom,
  FlowPanel_SetAnchorSideBottom,
  FlowPanel_GetChildSizing,
  FlowPanel_SetChildSizing,
  FlowPanel_GetBorderSpacing,
  FlowPanel_SetBorderSpacing,
  FlowPanel_GetDockClients,
  FlowPanel_GetControls,
  FlowPanel_GetComponents,
  FlowPanel_GetAnchorSide,
  FlowPanel_StaticClassType;

