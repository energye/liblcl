
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function LinkLabel_Create(AOwner: TComponent): TLinkLabel; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TLinkLabel.Create(AOwner);
  handleExceptionEnd
end;

procedure LinkLabel_Free(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Invalidate(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Repaint(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_SetBounds(AObj: TLinkLabel; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Update(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_BringToFront(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure LinkLabel_ClientToScreen(AObj: TLinkLabel; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure LinkLabel_ClientToParent(AObj: TLinkLabel; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Dragging(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_HasParent(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Hide(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Perform(AObj: TLinkLabel; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Refresh(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure LinkLabel_ScreenToClient(AObj: TLinkLabel; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure LinkLabel_ParentToClient(AObj: TLinkLabel; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_SendToBack(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Show(AObj: TLinkLabel); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_GetTextBuf(AObj: TLinkLabel; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_GetTextLen(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_SetTextBuf(AObj: TLinkLabel; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_FindComponent(AObj: TLinkLabel; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_GetNamePath(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_Assign(AObj: TLinkLabel; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ClassType(AObj: TLinkLabel): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ClassName(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_InstanceSize(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_InheritsFrom(AObj: TLinkLabel; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Equals(AObj: TLinkLabel; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_GetHashCode(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ToString(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorToNeighbour(AObj: TLinkLabel; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorParallel(AObj: TLinkLabel; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorHorizontalCenterTo(AObj: TLinkLabel; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorVerticalCenterTo(AObj: TLinkLabel; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorSame(AObj: TLinkLabel; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorAsAlign(AObj: TLinkLabel; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AnchorClient(AObj: TLinkLabel; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleDesignToForm(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleFormToDesign(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Scale96ToForm(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleFormTo96(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Scale96ToFont(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleFontTo96(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleScreenToFont(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleFontToScreen(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_Scale96ToScreen(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function LinkLabel_ScaleScreenTo96(AObj: TLinkLabel; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_AutoAdjustLayout(AObj: TLinkLabel; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure LinkLabel_FixDesignFontsPPI(AObj: TLinkLabel; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure LinkLabel_ScaleFontsPPI(AObj: TLinkLabel; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function LinkLabel_GetAlign(AObj: TLinkLabel): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure LinkLabel_SetAlign(AObj: TLinkLabel; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAlignment(AObj: TLinkLabel): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure LinkLabel_SetAlignment(AObj: TLinkLabel; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAnchors(AObj: TLinkLabel): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure LinkLabel_SetAnchors(AObj: TLinkLabel; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAutoSize(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure LinkLabel_SetAutoSize(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetCaption(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure LinkLabel_SetCaption(AObj: TLinkLabel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetColor(AObj: TLinkLabel): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure LinkLabel_SetColor(AObj: TLinkLabel; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetConstraints(AObj: TLinkLabel): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure LinkLabel_SetConstraints(AObj: TLinkLabel; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetDragCursor(AObj: TLinkLabel): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure LinkLabel_SetDragCursor(AObj: TLinkLabel; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetDragKind(AObj: TLinkLabel): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure LinkLabel_SetDragKind(AObj: TLinkLabel; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetDragMode(AObj: TLinkLabel): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure LinkLabel_SetDragMode(AObj: TLinkLabel; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetEnabled(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure LinkLabel_SetEnabled(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetFont(AObj: TLinkLabel): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure LinkLabel_SetFont(AObj: TLinkLabel; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetParentColor(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure LinkLabel_SetParentColor(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetParentFont(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure LinkLabel_SetParentFont(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetParentShowHint(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure LinkLabel_SetParentShowHint(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetPopupMenu(AObj: TLinkLabel): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure LinkLabel_SetPopupMenu(AObj: TLinkLabel; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetShowHint(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure LinkLabel_SetShowHint(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetVisible(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure LinkLabel_SetVisible(AObj: TLinkLabel; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure LinkLabel_SetOnClick(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure LinkLabel_SetOnContextPopup(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure LinkLabel_SetOnDblClick(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure LinkLabel_SetOnDragDrop(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure LinkLabel_SetOnDragOver(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure LinkLabel_SetOnEndDrag(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure LinkLabel_SetOnMouseDown(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure LinkLabel_SetOnMouseEnter(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure LinkLabel_SetOnMouseLeave(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure LinkLabel_SetOnMouseMove(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure LinkLabel_SetOnMouseUp(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TSysLinkEvent
procedure LinkLabel_SetOnLinkClick(AObj: TLinkLabel; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTSysLinkEvent}
  {$DEFINE EventName := OnLinkClick}
  EventMethodCode
end;

function LinkLabel_GetMouseInClient(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function LinkLabel_GetAction(AObj: TLinkLabel): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure LinkLabel_SetAction(AObj: TLinkLabel; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetBiDiMode(AObj: TLinkLabel): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure LinkLabel_SetBiDiMode(AObj: TLinkLabel; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure LinkLabel_GetBoundsRect(AObj: TLinkLabel; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure LinkLabel_SetBoundsRect(AObj: TLinkLabel; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetClientHeight(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure LinkLabel_SetClientHeight(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure LinkLabel_GetClientOrigin(AObj: TLinkLabel; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure LinkLabel_GetClientRect(AObj: TLinkLabel; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function LinkLabel_GetClientWidth(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure LinkLabel_SetClientWidth(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetControlState(AObj: TLinkLabel): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure LinkLabel_SetControlState(AObj: TLinkLabel; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetControlStyle(AObj: TLinkLabel): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure LinkLabel_SetControlStyle(AObj: TLinkLabel; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetFloating(AObj: TLinkLabel): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function LinkLabel_GetParent(AObj: TLinkLabel): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure LinkLabel_SetParent(AObj: TLinkLabel; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetLeft(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure LinkLabel_SetLeft(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetTop(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure LinkLabel_SetTop(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetWidth(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure LinkLabel_SetWidth(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetHeight(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure LinkLabel_SetHeight(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetHint(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure LinkLabel_SetHint(AObj: TLinkLabel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetComponentCount(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function LinkLabel_GetComponentIndex(AObj: TLinkLabel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure LinkLabel_SetComponentIndex(AObj: TLinkLabel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetOwner(AObj: TLinkLabel): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function LinkLabel_GetName(AObj: TLinkLabel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure LinkLabel_SetName(AObj: TLinkLabel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetTag(AObj: TLinkLabel): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure LinkLabel_SetTag(AObj: TLinkLabel; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAnchorSideLeft(AObj: TLinkLabel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure LinkLabel_SetAnchorSideLeft(AObj: TLinkLabel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAnchorSideTop(AObj: TLinkLabel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure LinkLabel_SetAnchorSideTop(AObj: TLinkLabel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAnchorSideRight(AObj: TLinkLabel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure LinkLabel_SetAnchorSideRight(AObj: TLinkLabel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetAnchorSideBottom(AObj: TLinkLabel): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure LinkLabel_SetAnchorSideBottom(AObj: TLinkLabel; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetBorderSpacing(AObj: TLinkLabel): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure LinkLabel_SetBorderSpacing(AObj: TLinkLabel; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function LinkLabel_GetComponents(AObj: TLinkLabel; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function LinkLabel_GetAnchorSide(AObj: TLinkLabel; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function LinkLabel_StaticClassType: TClass; extdecl;
begin
  Result := TLinkLabel;
end;

exports
  LinkLabel_Create,
  LinkLabel_Free,
  LinkLabel_Invalidate,
  LinkLabel_Repaint,
  LinkLabel_SetBounds,
  LinkLabel_Update,
  LinkLabel_BringToFront,
  LinkLabel_ClientToScreen,
  LinkLabel_ClientToParent,
  LinkLabel_Dragging,
  LinkLabel_HasParent,
  LinkLabel_Hide,
  LinkLabel_Perform,
  LinkLabel_Refresh,
  LinkLabel_ScreenToClient,
  LinkLabel_ParentToClient,
  LinkLabel_SendToBack,
  LinkLabel_Show,
  LinkLabel_GetTextBuf,
  LinkLabel_GetTextLen,
  LinkLabel_SetTextBuf,
  LinkLabel_FindComponent,
  LinkLabel_GetNamePath,
  LinkLabel_Assign,
  LinkLabel_ClassType,
  LinkLabel_ClassName,
  LinkLabel_InstanceSize,
  LinkLabel_InheritsFrom,
  LinkLabel_Equals,
  LinkLabel_GetHashCode,
  LinkLabel_ToString,
  LinkLabel_AnchorToNeighbour,
  LinkLabel_AnchorParallel,
  LinkLabel_AnchorHorizontalCenterTo,
  LinkLabel_AnchorVerticalCenterTo,
  LinkLabel_AnchorSame,
  LinkLabel_AnchorAsAlign,
  LinkLabel_AnchorClient,
  LinkLabel_ScaleDesignToForm,
  LinkLabel_ScaleFormToDesign,
  LinkLabel_Scale96ToForm,
  LinkLabel_ScaleFormTo96,
  LinkLabel_Scale96ToFont,
  LinkLabel_ScaleFontTo96,
  LinkLabel_ScaleScreenToFont,
  LinkLabel_ScaleFontToScreen,
  LinkLabel_Scale96ToScreen,
  LinkLabel_ScaleScreenTo96,
  LinkLabel_AutoAdjustLayout,
  LinkLabel_FixDesignFontsPPI,
  LinkLabel_ScaleFontsPPI,
  LinkLabel_GetAlign,
  LinkLabel_SetAlign,
  LinkLabel_GetAlignment,
  LinkLabel_SetAlignment,
  LinkLabel_GetAnchors,
  LinkLabel_SetAnchors,
  LinkLabel_GetAutoSize,
  LinkLabel_SetAutoSize,
  LinkLabel_GetCaption,
  LinkLabel_SetCaption,
  LinkLabel_GetColor,
  LinkLabel_SetColor,
  LinkLabel_GetConstraints,
  LinkLabel_SetConstraints,
  LinkLabel_GetDragCursor,
  LinkLabel_SetDragCursor,
  LinkLabel_GetDragKind,
  LinkLabel_SetDragKind,
  LinkLabel_GetDragMode,
  LinkLabel_SetDragMode,
  LinkLabel_GetEnabled,
  LinkLabel_SetEnabled,
  LinkLabel_GetFont,
  LinkLabel_SetFont,
  LinkLabel_GetParentColor,
  LinkLabel_SetParentColor,
  LinkLabel_GetParentFont,
  LinkLabel_SetParentFont,
  LinkLabel_GetParentShowHint,
  LinkLabel_SetParentShowHint,
  LinkLabel_GetPopupMenu,
  LinkLabel_SetPopupMenu,
  LinkLabel_GetShowHint,
  LinkLabel_SetShowHint,
  LinkLabel_GetVisible,
  LinkLabel_SetVisible,
  LinkLabel_SetOnClick,
  LinkLabel_SetOnContextPopup,
  LinkLabel_SetOnDblClick,
  LinkLabel_SetOnDragDrop,
  LinkLabel_SetOnDragOver,
  LinkLabel_SetOnEndDrag,
  LinkLabel_SetOnMouseDown,
  LinkLabel_SetOnMouseEnter,
  LinkLabel_SetOnMouseLeave,
  LinkLabel_SetOnMouseMove,
  LinkLabel_SetOnMouseUp,
  LinkLabel_SetOnLinkClick,
  LinkLabel_GetMouseInClient,
  LinkLabel_GetAction,
  LinkLabel_SetAction,
  LinkLabel_GetBiDiMode,
  LinkLabel_SetBiDiMode,
  LinkLabel_GetBoundsRect,
  LinkLabel_SetBoundsRect,
  LinkLabel_GetClientHeight,
  LinkLabel_SetClientHeight,
  LinkLabel_GetClientOrigin,
  LinkLabel_GetClientRect,
  LinkLabel_GetClientWidth,
  LinkLabel_SetClientWidth,
  LinkLabel_GetControlState,
  LinkLabel_SetControlState,
  LinkLabel_GetControlStyle,
  LinkLabel_SetControlStyle,
  LinkLabel_GetFloating,
  LinkLabel_GetParent,
  LinkLabel_SetParent,
  LinkLabel_GetLeft,
  LinkLabel_SetLeft,
  LinkLabel_GetTop,
  LinkLabel_SetTop,
  LinkLabel_GetWidth,
  LinkLabel_SetWidth,
  LinkLabel_GetHeight,
  LinkLabel_SetHeight,
  LinkLabel_GetHint,
  LinkLabel_SetHint,
  LinkLabel_GetComponentCount,
  LinkLabel_GetComponentIndex,
  LinkLabel_SetComponentIndex,
  LinkLabel_GetOwner,
  LinkLabel_GetName,
  LinkLabel_SetName,
  LinkLabel_GetTag,
  LinkLabel_SetTag,
  LinkLabel_GetAnchorSideLeft,
  LinkLabel_SetAnchorSideLeft,
  LinkLabel_GetAnchorSideTop,
  LinkLabel_SetAnchorSideTop,
  LinkLabel_GetAnchorSideRight,
  LinkLabel_SetAnchorSideRight,
  LinkLabel_GetAnchorSideBottom,
  LinkLabel_SetAnchorSideBottom,
  LinkLabel_GetBorderSpacing,
  LinkLabel_SetBorderSpacing,
  LinkLabel_GetComponents,
  LinkLabel_GetAnchorSide,
  LinkLabel_StaticClassType;

