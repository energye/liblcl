
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Button_Create(AOwner: TComponent): TButton; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TButton.Create(AOwner);
  handleExceptionEnd
end;

procedure Button_Free(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Click(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Click;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_CanFocus(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ContainsControl(AObj: TButton; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function Button_ControlAtPos(AObj: TButton; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_DisableAlign(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_EnableAlign(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_FindChildControl(AObj: TButton; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_FlipChildren(AObj: TButton; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Focused(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_HandleAllocated(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_InsertControl(AObj: TButton; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Invalidate(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_PaintTo(AObj: TButton; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_RemoveControl(AObj: TButton; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Realign(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Repaint(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_ScaleBy(AObj: TButton; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_ScrollBy(AObj: TButton; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_SetBounds(AObj: TButton; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_SetFocus(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Update(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_BringToFront(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Button_ClientToScreen(AObj: TButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Button_ClientToParent(AObj: TButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Dragging(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_HasParent(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Hide(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Perform(AObj: TButton; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Refresh(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Button_ScreenToClient(AObj: TButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Button_ParentToClient(AObj: TButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_SendToBack(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Show(AObj: TButton); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_GetTextBuf(AObj: TButton; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_GetTextLen(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_SetTextBuf(AObj: TButton; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_FindComponent(AObj: TButton; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_GetNamePath(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_Assign(AObj: TButton; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ClassType(AObj: TButton): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ClassName(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_InstanceSize(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_InheritsFrom(AObj: TButton; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Equals(AObj: TButton; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_GetHashCode(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ToString(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorToNeighbour(AObj: TButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorParallel(AObj: TButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorHorizontalCenterTo(AObj: TButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorVerticalCenterTo(AObj: TButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorSame(AObj: TButton; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorAsAlign(AObj: TButton; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AnchorClient(AObj: TButton; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleDesignToForm(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleFormToDesign(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Scale96ToForm(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleFormTo96(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Scale96ToFont(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleFontTo96(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleScreenToFont(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleFontToScreen(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_Scale96ToScreen(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Button_ScaleScreenTo96(AObj: TButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_AutoAdjustLayout(AObj: TButton; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Button_FixDesignFontsPPI(AObj: TButton; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure Button_ScaleFontsPPI(AObj: TButton; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function Button_GetAction(AObj: TButton): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure Button_SetAction(AObj: TButton; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function Button_GetAlign(AObj: TButton): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure Button_SetAlign(AObj: TButton; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function Button_GetAnchors(AObj: TButton): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure Button_SetAnchors(AObj: TButton; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function Button_GetBiDiMode(AObj: TButton): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Button_SetBiDiMode(AObj: TButton; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function Button_GetCancel(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Cancel;
  handleExceptionEnd
end;

procedure Button_SetCancel(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Cancel := AValue;
  handleExceptionEnd
end;

function Button_GetCaption(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure Button_SetCaption(AObj: TButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function Button_GetConstraints(AObj: TButton): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure Button_SetConstraints(AObj: TButton; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function Button_GetDefault(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Default;
  handleExceptionEnd
end;

procedure Button_SetDefault(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Default := AValue;
  handleExceptionEnd
end;

function Button_GetDoubleBuffered(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure Button_SetDoubleBuffered(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function Button_GetDragCursor(AObj: TButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure Button_SetDragCursor(AObj: TButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function Button_GetDragKind(AObj: TButton): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure Button_SetDragKind(AObj: TButton; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function Button_GetDragMode(AObj: TButton): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure Button_SetDragMode(AObj: TButton; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function Button_GetEnabled(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Button_SetEnabled(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Button_GetFont(AObj: TButton): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure Button_SetFont(AObj: TButton; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function Button_GetModalResult(AObj: TButton): TModalResult; extdecl;
begin
{$ifdef UsehandleException}Result := TModalResult(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ModalResult;
  handleExceptionEnd
end;

procedure Button_SetModalResult(AObj: TButton; AValue: TModalResult); extdecl;
begin
  handleExceptionBegin
  AObj.ModalResult := AValue;
  handleExceptionEnd
end;

function Button_GetParentDoubleBuffered(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure Button_SetParentDoubleBuffered(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function Button_GetParentFont(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure Button_SetParentFont(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function Button_GetParentShowHint(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure Button_SetParentShowHint(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function Button_GetPopupMenu(AObj: TButton): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure Button_SetPopupMenu(AObj: TButton; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function Button_GetShowHint(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Button_SetShowHint(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Button_GetTabOrder(AObj: TButton): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure Button_SetTabOrder(AObj: TButton; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function Button_GetTabStop(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure Button_SetTabStop(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function Button_GetVisible(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Button_SetVisible(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Button_SetOnClick(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure Button_SetOnContextPopup(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure Button_SetOnDragDrop(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure Button_SetOnDragOver(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure Button_SetOnEndDrag(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Button_SetOnEnter(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Button_SetOnExit(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Button_SetOnKeyDown(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure Button_SetOnKeyPress(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Button_SetOnKeyUp(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Button_SetOnMouseDown(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Button_SetOnMouseEnter(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Button_SetOnMouseLeave(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure Button_SetOnMouseMove(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Button_SetOnMouseUp(AObj: TButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function Button_GetDockClientCount(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function Button_GetDockSite(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure Button_SetDockSite(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function Button_GetMouseInClient(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function Button_GetVisibleDockClientCount(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function Button_GetBrush(AObj: TButton): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function Button_GetControlCount(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function Button_GetHandle(AObj: TButton): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function Button_GetParentWindow(AObj: TButton): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure Button_SetParentWindow(AObj: TButton; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function Button_GetShowing(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function Button_GetUseDockManager(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure Button_SetUseDockManager(AObj: TButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Button_GetBoundsRect(AObj: TButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure Button_SetBoundsRect(AObj: TButton; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function Button_GetClientHeight(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure Button_SetClientHeight(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Button_GetClientOrigin(AObj: TButton; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Button_GetClientRect(AObj: TButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function Button_GetClientWidth(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure Button_SetClientWidth(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function Button_GetControlState(AObj: TButton): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure Button_SetControlState(AObj: TButton; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function Button_GetControlStyle(AObj: TButton): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure Button_SetControlStyle(AObj: TButton; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function Button_GetFloating(AObj: TButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function Button_GetParent(AObj: TButton): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure Button_SetParent(AObj: TButton; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function Button_GetLeft(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure Button_SetLeft(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function Button_GetTop(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure Button_SetTop(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function Button_GetWidth(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure Button_SetWidth(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function Button_GetHeight(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Button_SetHeight(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Button_GetCursor(AObj: TButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure Button_SetCursor(AObj: TButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function Button_GetHint(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Button_SetHint(AObj: TButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Button_GetComponentCount(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Button_GetComponentIndex(AObj: TButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Button_SetComponentIndex(AObj: TButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Button_GetOwner(AObj: TButton): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Button_GetName(AObj: TButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Button_SetName(AObj: TButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Button_GetTag(AObj: TButton): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Button_SetTag(AObj: TButton; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Button_GetAnchorSideLeft(AObj: TButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure Button_SetAnchorSideLeft(AObj: TButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function Button_GetAnchorSideTop(AObj: TButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure Button_SetAnchorSideTop(AObj: TButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function Button_GetAnchorSideRight(AObj: TButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure Button_SetAnchorSideRight(AObj: TButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function Button_GetAnchorSideBottom(AObj: TButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure Button_SetAnchorSideBottom(AObj: TButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function Button_GetChildSizing(AObj: TButton): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure Button_SetChildSizing(AObj: TButton; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function Button_GetBorderSpacing(AObj: TButton): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure Button_SetBorderSpacing(AObj: TButton; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function Button_GetDockClients(AObj: TButton; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function Button_GetControls(AObj: TButton; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function Button_GetComponents(AObj: TButton; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Button_GetAnchorSide(AObj: TButton; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function Button_StaticClassType: TClass; extdecl;
begin
  Result := TButton;
end;

exports
  Button_Create,
  Button_Free,
  Button_Click,
  Button_CanFocus,
  Button_ContainsControl,
  Button_ControlAtPos,
  Button_DisableAlign,
  Button_EnableAlign,
  Button_FindChildControl,
  Button_FlipChildren,
  Button_Focused,
  Button_HandleAllocated,
  Button_InsertControl,
  Button_Invalidate,
  Button_PaintTo,
  Button_RemoveControl,
  Button_Realign,
  Button_Repaint,
  Button_ScaleBy,
  Button_ScrollBy,
  Button_SetBounds,
  Button_SetFocus,
  Button_Update,
  Button_BringToFront,
  Button_ClientToScreen,
  Button_ClientToParent,
  Button_Dragging,
  Button_HasParent,
  Button_Hide,
  Button_Perform,
  Button_Refresh,
  Button_ScreenToClient,
  Button_ParentToClient,
  Button_SendToBack,
  Button_Show,
  Button_GetTextBuf,
  Button_GetTextLen,
  Button_SetTextBuf,
  Button_FindComponent,
  Button_GetNamePath,
  Button_Assign,
  Button_ClassType,
  Button_ClassName,
  Button_InstanceSize,
  Button_InheritsFrom,
  Button_Equals,
  Button_GetHashCode,
  Button_ToString,
  Button_AnchorToNeighbour,
  Button_AnchorParallel,
  Button_AnchorHorizontalCenterTo,
  Button_AnchorVerticalCenterTo,
  Button_AnchorSame,
  Button_AnchorAsAlign,
  Button_AnchorClient,
  Button_ScaleDesignToForm,
  Button_ScaleFormToDesign,
  Button_Scale96ToForm,
  Button_ScaleFormTo96,
  Button_Scale96ToFont,
  Button_ScaleFontTo96,
  Button_ScaleScreenToFont,
  Button_ScaleFontToScreen,
  Button_Scale96ToScreen,
  Button_ScaleScreenTo96,
  Button_AutoAdjustLayout,
  Button_FixDesignFontsPPI,
  Button_ScaleFontsPPI,
  Button_GetAction,
  Button_SetAction,
  Button_GetAlign,
  Button_SetAlign,
  Button_GetAnchors,
  Button_SetAnchors,
  Button_GetBiDiMode,
  Button_SetBiDiMode,
  Button_GetCancel,
  Button_SetCancel,
  Button_GetCaption,
  Button_SetCaption,
  Button_GetConstraints,
  Button_SetConstraints,
  Button_GetDefault,
  Button_SetDefault,
  Button_GetDoubleBuffered,
  Button_SetDoubleBuffered,
  Button_GetDragCursor,
  Button_SetDragCursor,
  Button_GetDragKind,
  Button_SetDragKind,
  Button_GetDragMode,
  Button_SetDragMode,
  Button_GetEnabled,
  Button_SetEnabled,
  Button_GetFont,
  Button_SetFont,
  Button_GetModalResult,
  Button_SetModalResult,
  Button_GetParentDoubleBuffered,
  Button_SetParentDoubleBuffered,
  Button_GetParentFont,
  Button_SetParentFont,
  Button_GetParentShowHint,
  Button_SetParentShowHint,
  Button_GetPopupMenu,
  Button_SetPopupMenu,
  Button_GetShowHint,
  Button_SetShowHint,
  Button_GetTabOrder,
  Button_SetTabOrder,
  Button_GetTabStop,
  Button_SetTabStop,
  Button_GetVisible,
  Button_SetVisible,
  Button_SetOnClick,
  Button_SetOnContextPopup,
  Button_SetOnDragDrop,
  Button_SetOnDragOver,
  Button_SetOnEndDrag,
  Button_SetOnEnter,
  Button_SetOnExit,
  Button_SetOnKeyDown,
  Button_SetOnKeyPress,
  Button_SetOnKeyUp,
  Button_SetOnMouseDown,
  Button_SetOnMouseEnter,
  Button_SetOnMouseLeave,
  Button_SetOnMouseMove,
  Button_SetOnMouseUp,
  Button_GetDockClientCount,
  Button_GetDockSite,
  Button_SetDockSite,
  Button_GetMouseInClient,
  Button_GetVisibleDockClientCount,
  Button_GetBrush,
  Button_GetControlCount,
  Button_GetHandle,
  Button_GetParentWindow,
  Button_SetParentWindow,
  Button_GetShowing,
  Button_GetUseDockManager,
  Button_SetUseDockManager,
  Button_GetBoundsRect,
  Button_SetBoundsRect,
  Button_GetClientHeight,
  Button_SetClientHeight,
  Button_GetClientOrigin,
  Button_GetClientRect,
  Button_GetClientWidth,
  Button_SetClientWidth,
  Button_GetControlState,
  Button_SetControlState,
  Button_GetControlStyle,
  Button_SetControlStyle,
  Button_GetFloating,
  Button_GetParent,
  Button_SetParent,
  Button_GetLeft,
  Button_SetLeft,
  Button_GetTop,
  Button_SetTop,
  Button_GetWidth,
  Button_SetWidth,
  Button_GetHeight,
  Button_SetHeight,
  Button_GetCursor,
  Button_SetCursor,
  Button_GetHint,
  Button_SetHint,
  Button_GetComponentCount,
  Button_GetComponentIndex,
  Button_SetComponentIndex,
  Button_GetOwner,
  Button_GetName,
  Button_SetName,
  Button_GetTag,
  Button_SetTag,
  Button_GetAnchorSideLeft,
  Button_SetAnchorSideLeft,
  Button_GetAnchorSideTop,
  Button_SetAnchorSideTop,
  Button_GetAnchorSideRight,
  Button_SetAnchorSideRight,
  Button_GetAnchorSideBottom,
  Button_SetAnchorSideBottom,
  Button_GetChildSizing,
  Button_SetChildSizing,
  Button_GetBorderSpacing,
  Button_SetBorderSpacing,
  Button_GetDockClients,
  Button_GetControls,
  Button_GetComponents,
  Button_GetAnchorSide,
  Button_StaticClassType;

