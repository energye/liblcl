
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

//CLASSMETHOD:
procedure GridColumn_Assign(AObj: TGridColumn; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure GridColumn_FixDesignFontsPPI(AObj: TGridColumn; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure GridColumn_ScaleFontsPPI(AObj: TGridColumn; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_IsDefault(AObj: TGridColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsDefault;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_GetNamePath(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_ClassType(AObj: TGridColumn): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_ClassName(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_InstanceSize(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_InheritsFrom(AObj: TGridColumn; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_Equals(AObj: TGridColumn; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_GetHashCode(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function GridColumn_ToString(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function GridColumn_GetGrid(AObj: TGridColumn): TCustomGrid; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Grid;
  handleExceptionEnd
end;

function GridColumn_GetDefaultWidth(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DefaultWidth;
  handleExceptionEnd
end;

function GridColumn_GetStoredWidth(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.StoredWidth;
  handleExceptionEnd
end;

function GridColumn_GetWidthChanged(AObj: TGridColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.WidthChanged;
  handleExceptionEnd
end;

function GridColumn_GetAlignment(AObj: TGridColumn): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure GridColumn_SetAlignment(AObj: TGridColumn; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function GridColumn_GetButtonStyle(AObj: TGridColumn): TColumnButtonStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TColumnButtonStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonStyle;
  handleExceptionEnd
end;

procedure GridColumn_SetButtonStyle(AObj: TGridColumn; AValue: TColumnButtonStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonStyle := AValue;
  handleExceptionEnd
end;

function GridColumn_GetColor(AObj: TGridColumn): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure GridColumn_SetColor(AObj: TGridColumn; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function GridColumn_GetDropDownRows(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DropDownRows;
  handleExceptionEnd
end;

procedure GridColumn_SetDropDownRows(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DropDownRows := AValue;
  handleExceptionEnd
end;

function GridColumn_GetExpanded(AObj: TGridColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Expanded;
  handleExceptionEnd
end;

procedure GridColumn_SetExpanded(AObj: TGridColumn; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Expanded := AValue;
  handleExceptionEnd
end;

function GridColumn_GetFont(AObj: TGridColumn): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure GridColumn_SetFont(AObj: TGridColumn; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function GridColumn_GetLayout(AObj: TGridColumn): TTextLayout; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TTextLayout);{$endif}
  handleExceptionBegin
  Result :=  AObj.Layout;
  handleExceptionEnd
end;

procedure GridColumn_SetLayout(AObj: TGridColumn; AValue: TTextLayout); extdecl;
begin
  handleExceptionBegin
  AObj.Layout := AValue;
  handleExceptionEnd
end;

function GridColumn_GetMinSize(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MinSize;
  handleExceptionEnd
end;

procedure GridColumn_SetMinSize(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MinSize := AValue;
  handleExceptionEnd
end;

function GridColumn_GetMaxSize(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxSize;
  handleExceptionEnd
end;

procedure GridColumn_SetMaxSize(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxSize := AValue;
  handleExceptionEnd
end;

function GridColumn_GetPickList(AObj: TGridColumn): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PickList;
  handleExceptionEnd
end;

procedure GridColumn_SetPickList(AObj: TGridColumn; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.PickList := AValue;
  handleExceptionEnd
end;

function GridColumn_GetReadOnly(AObj: TGridColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure GridColumn_SetReadOnly(AObj: TGridColumn; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function GridColumn_GetSizePriority(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SizePriority;
  handleExceptionEnd
end;

procedure GridColumn_SetSizePriority(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SizePriority := AValue;
  handleExceptionEnd
end;

function GridColumn_GetTag(AObj: TGridColumn): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure GridColumn_SetTag(AObj: TGridColumn; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function GridColumn_GetTitle(AObj: TGridColumn): TGridColumnTitle; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Title;
  handleExceptionEnd
end;

procedure GridColumn_SetTitle(AObj: TGridColumn; AValue: TGridColumnTitle); extdecl;
begin
  handleExceptionBegin
  AObj.Title := AValue;
  handleExceptionEnd
end;

function GridColumn_GetWidth(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure GridColumn_SetWidth(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function GridColumn_GetVisible(AObj: TGridColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure GridColumn_SetVisible(AObj: TGridColumn; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function GridColumn_GetValueChecked(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ValueChecked);
  handleExceptionEnd
end;

procedure GridColumn_SetValueChecked(AObj: TGridColumn; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.ValueChecked := AValue;
  handleExceptionEnd
end;

function GridColumn_GetValueUnchecked(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ValueUnchecked);
  handleExceptionEnd
end;

procedure GridColumn_SetValueUnchecked(AObj: TGridColumn; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.ValueUnchecked := AValue;
  handleExceptionEnd
end;

function GridColumn_GetCollection(AObj: TGridColumn): TCollection; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Collection;
  handleExceptionEnd
end;

procedure GridColumn_SetCollection(AObj: TGridColumn; AValue: TCollection); extdecl;
begin
  handleExceptionBegin
  AObj.Collection := AValue;
  handleExceptionEnd
end;

function GridColumn_GetIndex(AObj: TGridColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure GridColumn_SetIndex(AObj: TGridColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function GridColumn_GetDisplayName(AObj: TGridColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DisplayName);
  handleExceptionEnd
end;

procedure GridColumn_SetDisplayName(AObj: TGridColumn; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DisplayName := AValue;
  handleExceptionEnd
end;

function GridColumn_StaticClassType: TClass; extdecl;
begin
  Result := TGridColumn;
end;

exports
  GridColumn_Assign,
  GridColumn_FixDesignFontsPPI,
  GridColumn_ScaleFontsPPI,
  GridColumn_IsDefault,
  GridColumn_GetNamePath,
  GridColumn_ClassType,
  GridColumn_ClassName,
  GridColumn_InstanceSize,
  GridColumn_InheritsFrom,
  GridColumn_Equals,
  GridColumn_GetHashCode,
  GridColumn_ToString,
  GridColumn_GetGrid,
  GridColumn_GetDefaultWidth,
  GridColumn_GetStoredWidth,
  GridColumn_GetWidthChanged,
  GridColumn_GetAlignment,
  GridColumn_SetAlignment,
  GridColumn_GetButtonStyle,
  GridColumn_SetButtonStyle,
  GridColumn_GetColor,
  GridColumn_SetColor,
  GridColumn_GetDropDownRows,
  GridColumn_SetDropDownRows,
  GridColumn_GetExpanded,
  GridColumn_SetExpanded,
  GridColumn_GetFont,
  GridColumn_SetFont,
  GridColumn_GetLayout,
  GridColumn_SetLayout,
  GridColumn_GetMinSize,
  GridColumn_SetMinSize,
  GridColumn_GetMaxSize,
  GridColumn_SetMaxSize,
  GridColumn_GetPickList,
  GridColumn_SetPickList,
  GridColumn_GetReadOnly,
  GridColumn_SetReadOnly,
  GridColumn_GetSizePriority,
  GridColumn_SetSizePriority,
  GridColumn_GetTag,
  GridColumn_SetTag,
  GridColumn_GetTitle,
  GridColumn_SetTitle,
  GridColumn_GetWidth,
  GridColumn_SetWidth,
  GridColumn_GetVisible,
  GridColumn_SetVisible,
  GridColumn_GetValueChecked,
  GridColumn_SetValueChecked,
  GridColumn_GetValueUnchecked,
  GridColumn_SetValueUnchecked,
  GridColumn_GetCollection,
  GridColumn_SetCollection,
  GridColumn_GetIndex,
  GridColumn_SetIndex,
  GridColumn_GetDisplayName,
  GridColumn_SetDisplayName,
  GridColumn_StaticClassType;

