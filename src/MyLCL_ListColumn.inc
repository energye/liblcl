
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ListColumn_Create(AOwner: TCollection): TListColumn; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TListColumn.Create(AOwner);
  handleExceptionEnd
end;

procedure ListColumn_Free(AObj: TListColumn); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListColumn_Assign(AObj: TListColumn; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_GetNamePath(AObj: TListColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_ClassType(AObj: TListColumn): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_ClassName(AObj: TListColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_InstanceSize(AObj: TListColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_InheritsFrom(AObj: TListColumn; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_Equals(AObj: TListColumn; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_GetHashCode(AObj: TListColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListColumn_ToString(AObj: TListColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ListColumn_GetSortIndicator(AObj: TListColumn): TSortIndicator; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TSortIndicator);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortIndicator;
  handleExceptionEnd
end;

procedure ListColumn_SetSortIndicator(AObj: TListColumn; AValue: TSortIndicator); extdecl;
begin
  handleExceptionBegin
  AObj.SortIndicator := AValue;
  handleExceptionEnd
end;

function ListColumn_GetAlignment(AObj: TListColumn): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure ListColumn_SetAlignment(AObj: TListColumn; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function ListColumn_GetAutoSize(AObj: TListColumn): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure ListColumn_SetAutoSize(AObj: TListColumn; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function ListColumn_GetCaption(AObj: TListColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure ListColumn_SetCaption(AObj: TListColumn; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function ListColumn_GetImageIndex(AObj: TListColumn): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndex;
  handleExceptionEnd
end;

procedure ListColumn_SetImageIndex(AObj: TListColumn; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndex := AValue;
  handleExceptionEnd
end;

function ListColumn_GetMaxWidth(AObj: TListColumn): TWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxWidth;
  handleExceptionEnd
end;

procedure ListColumn_SetMaxWidth(AObj: TListColumn; AValue: TWidth); extdecl;
begin
  handleExceptionBegin
  AObj.MaxWidth := AValue;
  handleExceptionEnd
end;

function ListColumn_GetMinWidth(AObj: TListColumn): TWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MinWidth;
  handleExceptionEnd
end;

procedure ListColumn_SetMinWidth(AObj: TListColumn; AValue: TWidth); extdecl;
begin
  handleExceptionBegin
  AObj.MinWidth := AValue;
  handleExceptionEnd
end;

function ListColumn_GetTag(AObj: TListColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ListColumn_SetTag(AObj: TListColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ListColumn_GetWidth(AObj: TListColumn): TWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ListColumn_SetWidth(AObj: TListColumn; AValue: TWidth); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ListColumn_GetCollection(AObj: TListColumn): TCollection; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Collection;
  handleExceptionEnd
end;

procedure ListColumn_SetCollection(AObj: TListColumn; AValue: TCollection); extdecl;
begin
  handleExceptionBegin
  AObj.Collection := AValue;
  handleExceptionEnd
end;

function ListColumn_GetIndex(AObj: TListColumn): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure ListColumn_SetIndex(AObj: TListColumn; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function ListColumn_GetDisplayName(AObj: TListColumn): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DisplayName);
  handleExceptionEnd
end;

procedure ListColumn_SetDisplayName(AObj: TListColumn; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DisplayName := AValue;
  handleExceptionEnd
end;

function ListColumn_StaticClassType: TClass; extdecl;
begin
  Result := TListColumn;
end;

exports
  ListColumn_Create,
  ListColumn_Free,
  ListColumn_Assign,
  ListColumn_GetNamePath,
  ListColumn_ClassType,
  ListColumn_ClassName,
  ListColumn_InstanceSize,
  ListColumn_InheritsFrom,
  ListColumn_Equals,
  ListColumn_GetHashCode,
  ListColumn_ToString,
  ListColumn_GetSortIndicator,
  ListColumn_SetSortIndicator,
  ListColumn_GetAlignment,
  ListColumn_SetAlignment,
  ListColumn_GetAutoSize,
  ListColumn_SetAutoSize,
  ListColumn_GetCaption,
  ListColumn_SetCaption,
  ListColumn_GetImageIndex,
  ListColumn_SetImageIndex,
  ListColumn_GetMaxWidth,
  ListColumn_SetMaxWidth,
  ListColumn_GetMinWidth,
  ListColumn_SetMinWidth,
  ListColumn_GetTag,
  ListColumn_SetTag,
  ListColumn_GetWidth,
  ListColumn_SetWidth,
  ListColumn_GetCollection,
  ListColumn_SetCollection,
  ListColumn_GetIndex,
  ListColumn_SetIndex,
  ListColumn_GetDisplayName,
  ListColumn_SetDisplayName,
  ListColumn_StaticClassType;

