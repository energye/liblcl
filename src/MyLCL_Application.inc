
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Application_Create(AOwner: TComponent): TApplication; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TApplication.Create(AOwner);
  handleExceptionEnd
end;

procedure Application_Free(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
procedure Application_ActivateHint(AObj: TApplication; var CursorPos: TPoint); extdecl;
begin
  handleExceptionBegin
  AObj.ActivateHint(CursorPos);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_BringToFront(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_CancelHint(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.CancelHint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_HandleMessage(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.HandleMessage;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_HideHint(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.HideHint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_Minimize(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.Minimize;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_ModalStarted(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.ModalStarted;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_ModalFinished(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.ModalFinished;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_ProcessMessages(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.ProcessMessages;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_Restore(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.Restore;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_RestoreTopMosts(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.RestoreTopMosts;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_Terminate(AObj: TApplication); extdecl;
begin
  handleExceptionBegin
  AObj.Terminate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_MessageBox(AObj: TApplication; Text: PChar; Caption: PChar; Flags: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MessageBox(Text, Caption, Flags);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_FindComponent(AObj: TApplication; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_GetNamePath(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_HasParent(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Application_Assign(AObj: TApplication; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_ClassType(AObj: TApplication): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_ClassName(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_InstanceSize(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_InheritsFrom(AObj: TApplication; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_Equals(AObj: TApplication; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_GetHashCode(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Application_ToString(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function Application_GetScaled(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Scaled;
  handleExceptionEnd
end;

procedure Application_SetScaled(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Scaled := AValue;
  handleExceptionEnd
end;

function Application_GetSingleInstanceEnabled(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.SingleInstanceEnabled;
  handleExceptionEnd
end;

procedure Application_SetSingleInstanceEnabled(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.SingleInstanceEnabled := AValue;
  handleExceptionEnd
end;

function Application_GetLocation(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Location);
  handleExceptionEnd
end;

function Application_GetStopOnException(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.StopOnException;
  handleExceptionEnd
end;

procedure Application_SetStopOnException(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.StopOnException := AValue;
  handleExceptionEnd
end;

function Application_GetExceptionExitCode(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ExceptionExitCode;
  handleExceptionEnd
end;

procedure Application_SetExceptionExitCode(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ExceptionExitCode := AValue;
  handleExceptionEnd
end;

function Application_GetCaseSensitiveOptions(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CaseSensitiveOptions;
  handleExceptionEnd
end;

procedure Application_SetCaseSensitiveOptions(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.CaseSensitiveOptions := AValue;
  handleExceptionEnd
end;

function Application_GetCaptureExceptions(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CaptureExceptions;
  handleExceptionEnd
end;

procedure Application_SetCaptureExceptions(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.CaptureExceptions := AValue;
  handleExceptionEnd
end;

function Application_GetExtendedKeysSupport(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ExtendedKeysSupport;
  handleExceptionEnd
end;

procedure Application_SetExtendedKeysSupport(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ExtendedKeysSupport := AValue;
  handleExceptionEnd
end;

function Application_GetActive(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Active;
  handleExceptionEnd
end;

function Application_GetMainFormHandle(AObj: TApplication): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MainFormHandle;
  handleExceptionEnd
end;

function Application_GetMouseControl(AObj: TApplication): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseControl;
  handleExceptionEnd
end;

function Application_GetHintHidePausePerChar(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HintHidePausePerChar;
  handleExceptionEnd
end;

procedure Application_SetHintHidePausePerChar(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.HintHidePausePerChar := AValue;
  handleExceptionEnd
end;

function Application_GetFindGlobalComponentEnabled(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindGlobalComponentEnabled;
  handleExceptionEnd
end;

procedure Application_SetFindGlobalComponentEnabled(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FindGlobalComponentEnabled := AValue;
  handleExceptionEnd
end;

function Application_GetExeName(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ExeName);
  handleExceptionEnd
end;

function Application_GetHint(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Application_SetHint(AObj: TApplication; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Application_GetHintColor(AObj: TApplication): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HintColor;
  handleExceptionEnd
end;

procedure Application_SetHintColor(AObj: TApplication; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.HintColor := AValue;
  handleExceptionEnd
end;

function Application_GetHintHidePause(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HintHidePause;
  handleExceptionEnd
end;

procedure Application_SetHintHidePause(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.HintHidePause := AValue;
  handleExceptionEnd
end;

function Application_GetHintPause(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HintPause;
  handleExceptionEnd
end;

procedure Application_SetHintPause(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.HintPause := AValue;
  handleExceptionEnd
end;

function Application_GetHintShortCuts(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HintShortCuts;
  handleExceptionEnd
end;

procedure Application_SetHintShortCuts(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HintShortCuts := AValue;
  handleExceptionEnd
end;

function Application_GetHintShortPause(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HintShortPause;
  handleExceptionEnd
end;

procedure Application_SetHintShortPause(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.HintShortPause := AValue;
  handleExceptionEnd
end;

function Application_GetIcon(AObj: TApplication): TIcon; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Icon;
  handleExceptionEnd
end;

procedure Application_SetIcon(AObj: TApplication; AValue: TIcon); extdecl;
begin
  handleExceptionBegin
  AObj.Icon := AValue;
  handleExceptionEnd
end;

function Application_GetMainForm(AObj: TApplication): TForm; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.MainForm;
  handleExceptionEnd
end;

function Application_GetMainFormOnTaskBar(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MainFormOnTaskBar;
  handleExceptionEnd
end;

procedure Application_SetMainFormOnTaskBar(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.MainFormOnTaskBar := AValue;
  handleExceptionEnd
end;

function Application_GetBiDiMode(AObj: TApplication): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Application_SetBiDiMode(AObj: TApplication; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function Application_GetShowHint(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Application_SetShowHint(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Application_GetShowMainForm(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowMainForm;
  handleExceptionEnd
end;

procedure Application_SetShowMainForm(AObj: TApplication; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowMainForm := AValue;
  handleExceptionEnd
end;

function Application_GetTerminated(AObj: TApplication): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Terminated;
  handleExceptionEnd
end;

function Application_GetTitle(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Title);
  handleExceptionEnd
end;

procedure Application_SetTitle(AObj: TApplication; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Title := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Application_SetOnActivate(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnActivate}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Application_SetOnDeactivate(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDeactivate}
  EventMethodCode
end;

//EVENT_TYPE:TExceptionEvent
procedure Application_SetOnException(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTExceptionEvent}
  {$DEFINE EventName := OnException}
  EventMethodCode
end;

//EVENT_TYPE:THelpEvent
procedure Application_SetOnHelp(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTHelpEvent}
  {$DEFINE EventName := OnHelp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Application_SetOnHint(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnHint}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Application_SetOnMinimize(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMinimize}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Application_SetOnRestore(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnRestore}
  EventMethodCode
end;

//EVENT_TYPE:TShortCutEvent
procedure Application_SetOnShortCut(AObj: TApplication; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTShortCutEvent}
  {$DEFINE EventName := OnShortCut}
  EventMethodCode
end;

function Application_GetHandle(AObj: TApplication): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

procedure Application_SetHandle(AObj: TApplication; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.Handle := AValue;
  handleExceptionEnd
end;

function Application_GetComponentCount(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Application_GetComponentIndex(AObj: TApplication): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Application_SetComponentIndex(AObj: TApplication; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Application_GetOwner(AObj: TApplication): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Application_GetName(AObj: TApplication): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Application_SetName(AObj: TApplication; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Application_GetTag(AObj: TApplication): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Application_SetTag(AObj: TApplication; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Application_GetComponents(AObj: TApplication; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Application_StaticClassType: TClass; extdecl;
begin
  Result := TApplication;
end;

exports
  Application_Create,
  Application_Free,
  Application_ActivateHint,
  Application_BringToFront,
  Application_CancelHint,
  Application_HandleMessage,
  Application_HideHint,
  Application_Minimize,
  Application_ModalStarted,
  Application_ModalFinished,
  Application_ProcessMessages,
  Application_Restore,
  Application_RestoreTopMosts,
  Application_Terminate,
  Application_MessageBox,
  Application_FindComponent,
  Application_GetNamePath,
  Application_HasParent,
  Application_Assign,
  Application_ClassType,
  Application_ClassName,
  Application_InstanceSize,
  Application_InheritsFrom,
  Application_Equals,
  Application_GetHashCode,
  Application_ToString,
  Application_GetScaled,
  Application_SetScaled,
  Application_GetSingleInstanceEnabled,
  Application_SetSingleInstanceEnabled,
  Application_GetLocation,
  Application_GetStopOnException,
  Application_SetStopOnException,
  Application_GetExceptionExitCode,
  Application_SetExceptionExitCode,
  Application_GetCaseSensitiveOptions,
  Application_SetCaseSensitiveOptions,
  Application_GetCaptureExceptions,
  Application_SetCaptureExceptions,
  Application_GetExtendedKeysSupport,
  Application_SetExtendedKeysSupport,
  Application_GetActive,
  Application_GetMainFormHandle,
  Application_GetMouseControl,
  Application_GetHintHidePausePerChar,
  Application_SetHintHidePausePerChar,
  Application_GetFindGlobalComponentEnabled,
  Application_SetFindGlobalComponentEnabled,
  Application_GetExeName,
  Application_GetHint,
  Application_SetHint,
  Application_GetHintColor,
  Application_SetHintColor,
  Application_GetHintHidePause,
  Application_SetHintHidePause,
  Application_GetHintPause,
  Application_SetHintPause,
  Application_GetHintShortCuts,
  Application_SetHintShortCuts,
  Application_GetHintShortPause,
  Application_SetHintShortPause,
  Application_GetIcon,
  Application_SetIcon,
  Application_GetMainForm,
  Application_GetMainFormOnTaskBar,
  Application_SetMainFormOnTaskBar,
  Application_GetBiDiMode,
  Application_SetBiDiMode,
  Application_GetShowHint,
  Application_SetShowHint,
  Application_GetShowMainForm,
  Application_SetShowMainForm,
  Application_GetTerminated,
  Application_GetTitle,
  Application_SetTitle,
  Application_SetOnActivate,
  Application_SetOnDeactivate,
  Application_SetOnException,
  Application_SetOnHelp,
  Application_SetOnHint,
  Application_SetOnMinimize,
  Application_SetOnRestore,
  Application_SetOnShortCut,
  Application_GetHandle,
  Application_SetHandle,
  Application_GetComponentCount,
  Application_GetComponentIndex,
  Application_SetComponentIndex,
  Application_GetOwner,
  Application_GetName,
  Application_SetName,
  Application_GetTag,
  Application_SetTag,
  Application_GetComponents,
  Application_StaticClassType;

