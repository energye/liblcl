
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

//CLASSMETHOD:
procedure ControlChildSizing_Assign(AObj: TControlChildSizing; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_GetNamePath(AObj: TControlChildSizing): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_ClassType(AObj: TControlChildSizing): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_ClassName(AObj: TControlChildSizing): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_InstanceSize(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_InheritsFrom(AObj: TControlChildSizing; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_Equals(AObj: TControlChildSizing; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_GetHashCode(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ControlChildSizing_ToString(AObj: TControlChildSizing): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ControlChildSizing_GetControl(AObj: TControlChildSizing): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Control;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ControlChildSizing_SetOnChange(AObj: TControlChildSizing; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function ControlChildSizing_GetLeftRightSpacing(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.LeftRightSpacing;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetLeftRightSpacing(AObj: TControlChildSizing; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.LeftRightSpacing := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetTopBottomSpacing(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TopBottomSpacing;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetTopBottomSpacing(AObj: TControlChildSizing; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.TopBottomSpacing := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetHorizontalSpacing(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.HorizontalSpacing;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetHorizontalSpacing(AObj: TControlChildSizing; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.HorizontalSpacing := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetVerticalSpacing(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VerticalSpacing;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetVerticalSpacing(AObj: TControlChildSizing; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.VerticalSpacing := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetEnlargeHorizontal(AObj: TControlChildSizing): TChildControlResizeStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TChildControlResizeStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.EnlargeHorizontal;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetEnlargeHorizontal(AObj: TControlChildSizing; AValue: TChildControlResizeStyle); extdecl;
begin
  handleExceptionBegin
  AObj.EnlargeHorizontal := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetEnlargeVertical(AObj: TControlChildSizing): TChildControlResizeStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TChildControlResizeStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.EnlargeVertical;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetEnlargeVertical(AObj: TControlChildSizing; AValue: TChildControlResizeStyle); extdecl;
begin
  handleExceptionBegin
  AObj.EnlargeVertical := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetShrinkHorizontal(AObj: TControlChildSizing): TChildControlResizeStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TChildControlResizeStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ShrinkHorizontal;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetShrinkHorizontal(AObj: TControlChildSizing; AValue: TChildControlResizeStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ShrinkHorizontal := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetShrinkVertical(AObj: TControlChildSizing): TChildControlResizeStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TChildControlResizeStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ShrinkVertical;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetShrinkVertical(AObj: TControlChildSizing; AValue: TChildControlResizeStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ShrinkVertical := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetLayout(AObj: TControlChildSizing): TControlChildrenLayout; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TControlChildrenLayout);{$endif}
  handleExceptionBegin
  Result :=  AObj.Layout;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetLayout(AObj: TControlChildSizing; AValue: TControlChildrenLayout); extdecl;
begin
  handleExceptionBegin
  AObj.Layout := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_GetControlsPerLine(AObj: TControlChildSizing): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlsPerLine;
  handleExceptionEnd
end;

procedure ControlChildSizing_SetControlsPerLine(AObj: TControlChildSizing; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ControlsPerLine := AValue;
  handleExceptionEnd
end;

function ControlChildSizing_StaticClassType: TClass; extdecl;
begin
  Result := TControlChildSizing;
end;

exports
  ControlChildSizing_Assign,
  ControlChildSizing_GetNamePath,
  ControlChildSizing_ClassType,
  ControlChildSizing_ClassName,
  ControlChildSizing_InstanceSize,
  ControlChildSizing_InheritsFrom,
  ControlChildSizing_Equals,
  ControlChildSizing_GetHashCode,
  ControlChildSizing_ToString,
  ControlChildSizing_GetControl,
  ControlChildSizing_SetOnChange,
  ControlChildSizing_GetLeftRightSpacing,
  ControlChildSizing_SetLeftRightSpacing,
  ControlChildSizing_GetTopBottomSpacing,
  ControlChildSizing_SetTopBottomSpacing,
  ControlChildSizing_GetHorizontalSpacing,
  ControlChildSizing_SetHorizontalSpacing,
  ControlChildSizing_GetVerticalSpacing,
  ControlChildSizing_SetVerticalSpacing,
  ControlChildSizing_GetEnlargeHorizontal,
  ControlChildSizing_SetEnlargeHorizontal,
  ControlChildSizing_GetEnlargeVertical,
  ControlChildSizing_SetEnlargeVertical,
  ControlChildSizing_GetShrinkHorizontal,
  ControlChildSizing_SetShrinkHorizontal,
  ControlChildSizing_GetShrinkVertical,
  ControlChildSizing_SetShrinkVertical,
  ControlChildSizing_GetLayout,
  ControlChildSizing_SetLayout,
  ControlChildSizing_GetControlsPerLine,
  ControlChildSizing_SetControlsPerLine,
  ControlChildSizing_StaticClassType;

