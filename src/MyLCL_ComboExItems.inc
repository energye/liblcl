
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

//CLASSMETHOD:
function ComboExItems_Add(AObj: TComboExItems): TComboExItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Add;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_AddItem(AObj: TComboExItems; Caption: PChar; ImageIndex: Integer; SelectedImageIndex: Integer; OverlayImageIndex: Integer; Indent: Integer; Data: Pointer): TComboExItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AddItem(Caption, ImageIndex, SelectedImageIndex, OverlayImageIndex, Indent, Data);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_Insert(AObj: TComboExItems; Index: Integer): TComboExItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Insert(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_Owner(AObj: TComboExItems): TPersistent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ComboExItems_Assign(AObj: TComboExItems; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ComboExItems_BeginUpdate(AObj: TComboExItems); extdecl;
begin
  handleExceptionBegin
  AObj.BeginUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ComboExItems_Clear(AObj: TComboExItems); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ComboExItems_Delete(AObj: TComboExItems; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ComboExItems_EndUpdate(AObj: TComboExItems); extdecl;
begin
  handleExceptionBegin
  AObj.EndUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_FindItemID(AObj: TComboExItems; ID: Integer): TCollectionItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindItemID(ID);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_GetNamePath(AObj: TComboExItems): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_ClassType(AObj: TComboExItems): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_ClassName(AObj: TComboExItems): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_InstanceSize(AObj: TComboExItems): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_InheritsFrom(AObj: TComboExItems; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_Equals(AObj: TComboExItems; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_GetHashCode(AObj: TComboExItems): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ComboExItems_ToString(AObj: TComboExItems): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ComboExItems_GetCount(AObj: TComboExItems): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function ComboExItems_GetComboItems(AObj: TComboExItems; Index: Integer): TComboExItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ComboItems[Index];
  handleExceptionEnd
end;

function ComboExItems_StaticClassType: TClass; extdecl;
begin
  Result := TComboExItems;
end;

exports
  ComboExItems_Add,
  ComboExItems_AddItem,
  ComboExItems_Insert,
  ComboExItems_Owner,
  ComboExItems_Assign,
  ComboExItems_BeginUpdate,
  ComboExItems_Clear,
  ComboExItems_Delete,
  ComboExItems_EndUpdate,
  ComboExItems_FindItemID,
  ComboExItems_GetNamePath,
  ComboExItems_ClassType,
  ComboExItems_ClassName,
  ComboExItems_InstanceSize,
  ComboExItems_InheritsFrom,
  ComboExItems_Equals,
  ComboExItems_GetHashCode,
  ComboExItems_ToString,
  ComboExItems_GetCount,
  ComboExItems_GetComboItems,
  ComboExItems_StaticClassType;

