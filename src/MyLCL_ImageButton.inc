
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ImageButton_Create(AOwner: TComponent): TImageButton; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TImageButton.Create(AOwner);
  handleExceptionEnd
end;

procedure ImageButton_Free(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Click(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Click;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_BringToFront(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ImageButton_ClientToScreen(AObj: TImageButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ImageButton_ClientToParent(AObj: TImageButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Dragging(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_HasParent(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Hide(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Invalidate(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Perform(AObj: TImageButton; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Refresh(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Repaint(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ImageButton_ScreenToClient(AObj: TImageButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ImageButton_ParentToClient(AObj: TImageButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_SendToBack(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_SetBounds(AObj: TImageButton; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Show(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Update(AObj: TImageButton); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_GetTextBuf(AObj: TImageButton; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_GetTextLen(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_SetTextBuf(AObj: TImageButton; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_FindComponent(AObj: TImageButton; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_GetNamePath(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_Assign(AObj: TImageButton; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ClassType(AObj: TImageButton): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ClassName(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_InstanceSize(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_InheritsFrom(AObj: TImageButton; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Equals(AObj: TImageButton; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_GetHashCode(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ToString(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorToNeighbour(AObj: TImageButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorParallel(AObj: TImageButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorHorizontalCenterTo(AObj: TImageButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorVerticalCenterTo(AObj: TImageButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorSame(AObj: TImageButton; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorAsAlign(AObj: TImageButton; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AnchorClient(AObj: TImageButton; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleDesignToForm(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleFormToDesign(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Scale96ToForm(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleFormTo96(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Scale96ToFont(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleFontTo96(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleScreenToFont(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleFontToScreen(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_Scale96ToScreen(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ImageButton_ScaleScreenTo96(AObj: TImageButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_AutoAdjustLayout(AObj: TImageButton; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ImageButton_FixDesignFontsPPI(AObj: TImageButton; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure ImageButton_ScaleFontsPPI(AObj: TImageButton; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function ImageButton_GetAction(AObj: TImageButton): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure ImageButton_SetAction(AObj: TImageButton; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAlign(AObj: TImageButton): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure ImageButton_SetAlign(AObj: TImageButton; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAnchors(AObj: TImageButton): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure ImageButton_SetAnchors(AObj: TImageButton; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAutoSize(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure ImageButton_SetAutoSize(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function ImageButton_GetConstraints(AObj: TImageButton): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure ImageButton_SetConstraints(AObj: TImageButton; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function ImageButton_GetCaption(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure ImageButton_SetCaption(AObj: TImageButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function ImageButton_GetDragCursor(AObj: TImageButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure ImageButton_SetDragCursor(AObj: TImageButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function ImageButton_GetDragKind(AObj: TImageButton): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure ImageButton_SetDragKind(AObj: TImageButton; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function ImageButton_GetDragMode(AObj: TImageButton): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure ImageButton_SetDragMode(AObj: TImageButton; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function ImageButton_GetEnabled(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure ImageButton_SetEnabled(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function ImageButton_GetFont(AObj: TImageButton): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure ImageButton_SetFont(AObj: TImageButton; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function ImageButton_GetImageCount(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageCount;
  handleExceptionEnd
end;

procedure ImageButton_SetImageCount(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImageCount := AValue;
  handleExceptionEnd
end;

function ImageButton_GetOrientation(AObj: TImageButton): TImageOrientation; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TImageOrientation);{$endif}
  handleExceptionBegin
  Result :=  AObj.Orientation;
  handleExceptionEnd
end;

procedure ImageButton_SetOrientation(AObj: TImageButton; AValue: TImageOrientation); extdecl;
begin
  handleExceptionBegin
  AObj.Orientation := AValue;
  handleExceptionEnd
end;

function ImageButton_GetModalResult(AObj: TImageButton): TModalResult; extdecl;
begin
{$ifdef UsehandleException}Result := TModalResult(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ModalResult;
  handleExceptionEnd
end;

procedure ImageButton_SetModalResult(AObj: TImageButton; AValue: TModalResult); extdecl;
begin
  handleExceptionBegin
  AObj.ModalResult := AValue;
  handleExceptionEnd
end;

function ImageButton_GetParentShowHint(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure ImageButton_SetParentShowHint(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function ImageButton_GetParentFont(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure ImageButton_SetParentFont(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function ImageButton_GetPicture(AObj: TImageButton): TPicture; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Picture;
  handleExceptionEnd
end;

procedure ImageButton_SetPicture(AObj: TImageButton; AValue: TPicture); extdecl;
begin
  handleExceptionBegin
  AObj.Picture := AValue;
  handleExceptionEnd
end;

function ImageButton_GetPopupMenu(AObj: TImageButton): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure ImageButton_SetPopupMenu(AObj: TImageButton; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function ImageButton_GetShowHint(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure ImageButton_SetShowHint(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function ImageButton_GetShowCaption(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowCaption;
  handleExceptionEnd
end;

procedure ImageButton_SetShowCaption(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowCaption := AValue;
  handleExceptionEnd
end;

function ImageButton_GetVisible(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure ImageButton_SetVisible(AObj: TImageButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ImageButton_SetOnClick(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure ImageButton_SetOnContextPopup(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ImageButton_SetOnDblClick(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure ImageButton_SetOnDragDrop(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure ImageButton_SetOnDragOver(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure ImageButton_SetOnEndDock(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure ImageButton_SetOnEndDrag(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ImageButton_SetOnMouseDown(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ImageButton_SetOnMouseEnter(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ImageButton_SetOnMouseLeave(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure ImageButton_SetOnMouseMove(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ImageButton_SetOnMouseUp(AObj: TImageButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function ImageButton_GetBiDiMode(AObj: TImageButton): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure ImageButton_SetBiDiMode(AObj: TImageButton; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ImageButton_GetBoundsRect(AObj: TImageButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure ImageButton_SetBoundsRect(AObj: TImageButton; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function ImageButton_GetClientHeight(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure ImageButton_SetClientHeight(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ImageButton_GetClientOrigin(AObj: TImageButton; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ImageButton_GetClientRect(AObj: TImageButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function ImageButton_GetClientWidth(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure ImageButton_SetClientWidth(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function ImageButton_GetControlState(AObj: TImageButton): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure ImageButton_SetControlState(AObj: TImageButton; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function ImageButton_GetControlStyle(AObj: TImageButton): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure ImageButton_SetControlStyle(AObj: TImageButton; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function ImageButton_GetFloating(AObj: TImageButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function ImageButton_GetParent(AObj: TImageButton): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure ImageButton_SetParent(AObj: TImageButton; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function ImageButton_GetLeft(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure ImageButton_SetLeft(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function ImageButton_GetTop(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure ImageButton_SetTop(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function ImageButton_GetWidth(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ImageButton_SetWidth(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ImageButton_GetHeight(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure ImageButton_SetHeight(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function ImageButton_GetCursor(AObj: TImageButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure ImageButton_SetCursor(AObj: TImageButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function ImageButton_GetHint(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure ImageButton_SetHint(AObj: TImageButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function ImageButton_GetComponentCount(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ImageButton_GetComponentIndex(AObj: TImageButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ImageButton_SetComponentIndex(AObj: TImageButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ImageButton_GetOwner(AObj: TImageButton): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ImageButton_GetName(AObj: TImageButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ImageButton_SetName(AObj: TImageButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ImageButton_GetTag(AObj: TImageButton): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ImageButton_SetTag(AObj: TImageButton; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAnchorSideLeft(AObj: TImageButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure ImageButton_SetAnchorSideLeft(AObj: TImageButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAnchorSideTop(AObj: TImageButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure ImageButton_SetAnchorSideTop(AObj: TImageButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAnchorSideRight(AObj: TImageButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure ImageButton_SetAnchorSideRight(AObj: TImageButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function ImageButton_GetAnchorSideBottom(AObj: TImageButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure ImageButton_SetAnchorSideBottom(AObj: TImageButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function ImageButton_GetBorderSpacing(AObj: TImageButton): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure ImageButton_SetBorderSpacing(AObj: TImageButton; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function ImageButton_GetComponents(AObj: TImageButton; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ImageButton_GetAnchorSide(AObj: TImageButton; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function ImageButton_StaticClassType: TClass; extdecl;
begin
  Result := TImageButton;
end;

exports
  ImageButton_Create,
  ImageButton_Free,
  ImageButton_Click,
  ImageButton_BringToFront,
  ImageButton_ClientToScreen,
  ImageButton_ClientToParent,
  ImageButton_Dragging,
  ImageButton_HasParent,
  ImageButton_Hide,
  ImageButton_Invalidate,
  ImageButton_Perform,
  ImageButton_Refresh,
  ImageButton_Repaint,
  ImageButton_ScreenToClient,
  ImageButton_ParentToClient,
  ImageButton_SendToBack,
  ImageButton_SetBounds,
  ImageButton_Show,
  ImageButton_Update,
  ImageButton_GetTextBuf,
  ImageButton_GetTextLen,
  ImageButton_SetTextBuf,
  ImageButton_FindComponent,
  ImageButton_GetNamePath,
  ImageButton_Assign,
  ImageButton_ClassType,
  ImageButton_ClassName,
  ImageButton_InstanceSize,
  ImageButton_InheritsFrom,
  ImageButton_Equals,
  ImageButton_GetHashCode,
  ImageButton_ToString,
  ImageButton_AnchorToNeighbour,
  ImageButton_AnchorParallel,
  ImageButton_AnchorHorizontalCenterTo,
  ImageButton_AnchorVerticalCenterTo,
  ImageButton_AnchorSame,
  ImageButton_AnchorAsAlign,
  ImageButton_AnchorClient,
  ImageButton_ScaleDesignToForm,
  ImageButton_ScaleFormToDesign,
  ImageButton_Scale96ToForm,
  ImageButton_ScaleFormTo96,
  ImageButton_Scale96ToFont,
  ImageButton_ScaleFontTo96,
  ImageButton_ScaleScreenToFont,
  ImageButton_ScaleFontToScreen,
  ImageButton_Scale96ToScreen,
  ImageButton_ScaleScreenTo96,
  ImageButton_AutoAdjustLayout,
  ImageButton_FixDesignFontsPPI,
  ImageButton_ScaleFontsPPI,
  ImageButton_GetAction,
  ImageButton_SetAction,
  ImageButton_GetAlign,
  ImageButton_SetAlign,
  ImageButton_GetAnchors,
  ImageButton_SetAnchors,
  ImageButton_GetAutoSize,
  ImageButton_SetAutoSize,
  ImageButton_GetConstraints,
  ImageButton_SetConstraints,
  ImageButton_GetCaption,
  ImageButton_SetCaption,
  ImageButton_GetDragCursor,
  ImageButton_SetDragCursor,
  ImageButton_GetDragKind,
  ImageButton_SetDragKind,
  ImageButton_GetDragMode,
  ImageButton_SetDragMode,
  ImageButton_GetEnabled,
  ImageButton_SetEnabled,
  ImageButton_GetFont,
  ImageButton_SetFont,
  ImageButton_GetImageCount,
  ImageButton_SetImageCount,
  ImageButton_GetOrientation,
  ImageButton_SetOrientation,
  ImageButton_GetModalResult,
  ImageButton_SetModalResult,
  ImageButton_GetParentShowHint,
  ImageButton_SetParentShowHint,
  ImageButton_GetParentFont,
  ImageButton_SetParentFont,
  ImageButton_GetPicture,
  ImageButton_SetPicture,
  ImageButton_GetPopupMenu,
  ImageButton_SetPopupMenu,
  ImageButton_GetShowHint,
  ImageButton_SetShowHint,
  ImageButton_GetShowCaption,
  ImageButton_SetShowCaption,
  ImageButton_GetVisible,
  ImageButton_SetVisible,
  ImageButton_SetOnClick,
  ImageButton_SetOnContextPopup,
  ImageButton_SetOnDblClick,
  ImageButton_SetOnDragDrop,
  ImageButton_SetOnDragOver,
  ImageButton_SetOnEndDock,
  ImageButton_SetOnEndDrag,
  ImageButton_SetOnMouseDown,
  ImageButton_SetOnMouseEnter,
  ImageButton_SetOnMouseLeave,
  ImageButton_SetOnMouseMove,
  ImageButton_SetOnMouseUp,
  ImageButton_GetBiDiMode,
  ImageButton_SetBiDiMode,
  ImageButton_GetBoundsRect,
  ImageButton_SetBoundsRect,
  ImageButton_GetClientHeight,
  ImageButton_SetClientHeight,
  ImageButton_GetClientOrigin,
  ImageButton_GetClientRect,
  ImageButton_GetClientWidth,
  ImageButton_SetClientWidth,
  ImageButton_GetControlState,
  ImageButton_SetControlState,
  ImageButton_GetControlStyle,
  ImageButton_SetControlStyle,
  ImageButton_GetFloating,
  ImageButton_GetParent,
  ImageButton_SetParent,
  ImageButton_GetLeft,
  ImageButton_SetLeft,
  ImageButton_GetTop,
  ImageButton_SetTop,
  ImageButton_GetWidth,
  ImageButton_SetWidth,
  ImageButton_GetHeight,
  ImageButton_SetHeight,
  ImageButton_GetCursor,
  ImageButton_SetCursor,
  ImageButton_GetHint,
  ImageButton_SetHint,
  ImageButton_GetComponentCount,
  ImageButton_GetComponentIndex,
  ImageButton_SetComponentIndex,
  ImageButton_GetOwner,
  ImageButton_GetName,
  ImageButton_SetName,
  ImageButton_GetTag,
  ImageButton_SetTag,
  ImageButton_GetAnchorSideLeft,
  ImageButton_SetAnchorSideLeft,
  ImageButton_GetAnchorSideTop,
  ImageButton_SetAnchorSideTop,
  ImageButton_GetAnchorSideRight,
  ImageButton_SetAnchorSideRight,
  ImageButton_GetAnchorSideBottom,
  ImageButton_SetAnchorSideBottom,
  ImageButton_GetBorderSpacing,
  ImageButton_SetBorderSpacing,
  ImageButton_GetComponents,
  ImageButton_GetAnchorSide,
  ImageButton_StaticClassType;

