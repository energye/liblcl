
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function StatusPanel_Create(AOwner: TCollection): TStatusPanel; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TStatusPanel.Create(AOwner);
  handleExceptionEnd
end;

procedure StatusPanel_Free(AObj: TStatusPanel); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StatusPanel_Assign(AObj: TStatusPanel; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_GetNamePath(AObj: TStatusPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_ClassType(AObj: TStatusPanel): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_ClassName(AObj: TStatusPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_InstanceSize(AObj: TStatusPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_InheritsFrom(AObj: TStatusPanel; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_Equals(AObj: TStatusPanel; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_GetHashCode(AObj: TStatusPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StatusPanel_ToString(AObj: TStatusPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function StatusPanel_GetAlignment(AObj: TStatusPanel): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure StatusPanel_SetAlignment(AObj: TStatusPanel; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetBiDiMode(AObj: TStatusPanel): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure StatusPanel_SetBiDiMode(AObj: TStatusPanel; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetStyle(AObj: TStatusPanel): TStatusPanelStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TStatusPanelStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.Style;
  handleExceptionEnd
end;

procedure StatusPanel_SetStyle(AObj: TStatusPanel; AValue: TStatusPanelStyle); extdecl;
begin
  handleExceptionBegin
  AObj.Style := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetText(AObj: TStatusPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure StatusPanel_SetText(AObj: TStatusPanel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetWidth(AObj: TStatusPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure StatusPanel_SetWidth(AObj: TStatusPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetCollection(AObj: TStatusPanel): TCollection; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Collection;
  handleExceptionEnd
end;

procedure StatusPanel_SetCollection(AObj: TStatusPanel; AValue: TCollection); extdecl;
begin
  handleExceptionBegin
  AObj.Collection := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetIndex(AObj: TStatusPanel): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure StatusPanel_SetIndex(AObj: TStatusPanel; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function StatusPanel_GetDisplayName(AObj: TStatusPanel): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DisplayName);
  handleExceptionEnd
end;

procedure StatusPanel_SetDisplayName(AObj: TStatusPanel; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DisplayName := AValue;
  handleExceptionEnd
end;

function StatusPanel_StaticClassType: TClass; extdecl;
begin
  Result := TStatusPanel;
end;

exports
  StatusPanel_Create,
  StatusPanel_Free,
  StatusPanel_Assign,
  StatusPanel_GetNamePath,
  StatusPanel_ClassType,
  StatusPanel_ClassName,
  StatusPanel_InstanceSize,
  StatusPanel_InheritsFrom,
  StatusPanel_Equals,
  StatusPanel_GetHashCode,
  StatusPanel_ToString,
  StatusPanel_GetAlignment,
  StatusPanel_SetAlignment,
  StatusPanel_GetBiDiMode,
  StatusPanel_SetBiDiMode,
  StatusPanel_GetStyle,
  StatusPanel_SetStyle,
  StatusPanel_GetText,
  StatusPanel_SetText,
  StatusPanel_GetWidth,
  StatusPanel_SetWidth,
  StatusPanel_GetCollection,
  StatusPanel_SetCollection,
  StatusPanel_GetIndex,
  StatusPanel_SetIndex,
  StatusPanel_GetDisplayName,
  StatusPanel_SetDisplayName,
  StatusPanel_StaticClassType;

