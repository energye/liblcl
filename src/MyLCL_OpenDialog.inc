
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function OpenDialog_Create(AOwner: TComponent): TOpenDialog; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TOpenDialog.Create(AOwner);
  handleExceptionEnd
end;

procedure OpenDialog_Free(AObj: TOpenDialog); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_Execute(AObj: TOpenDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Execute;
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_FindComponent(AObj: TOpenDialog; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_GetNamePath(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_HasParent(AObj: TOpenDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure OpenDialog_Assign(AObj: TOpenDialog; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_ClassType(AObj: TOpenDialog): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_ClassName(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_InstanceSize(AObj: TOpenDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_InheritsFrom(AObj: TOpenDialog; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_Equals(AObj: TOpenDialog; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_GetHashCode(AObj: TOpenDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function OpenDialog_ToString(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function OpenDialog_GetFiles(AObj: TOpenDialog): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Files;
  handleExceptionEnd
end;

function OpenDialog_GetDefaultExt(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DefaultExt);
  handleExceptionEnd
end;

procedure OpenDialog_SetDefaultExt(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultExt := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetFileName(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.FileName);
  handleExceptionEnd
end;

procedure OpenDialog_SetFileName(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.FileName := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetFilter(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Filter);
  handleExceptionEnd
end;

procedure OpenDialog_SetFilter(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Filter := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetFilterIndex(AObj: TOpenDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FilterIndex;
  handleExceptionEnd
end;

procedure OpenDialog_SetFilterIndex(AObj: TOpenDialog; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FilterIndex := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetInitialDir(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.InitialDir);
  handleExceptionEnd
end;

procedure OpenDialog_SetInitialDir(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.InitialDir := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetOptions(AObj: TOpenDialog): TOpenOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure OpenDialog_SetOptions(AObj: TOpenDialog; AValue: TOpenOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetTitle(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Title);
  handleExceptionEnd
end;

procedure OpenDialog_SetTitle(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Title := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetHandle(AObj: TOpenDialog): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure OpenDialog_SetOnClose(AObj: TOpenDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClose}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure OpenDialog_SetOnShow(AObj: TOpenDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnShow}
  EventMethodCode
end;

function OpenDialog_GetComponentCount(AObj: TOpenDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function OpenDialog_GetComponentIndex(AObj: TOpenDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure OpenDialog_SetComponentIndex(AObj: TOpenDialog; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetOwner(AObj: TOpenDialog): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function OpenDialog_GetName(AObj: TOpenDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure OpenDialog_SetName(AObj: TOpenDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetTag(AObj: TOpenDialog): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure OpenDialog_SetTag(AObj: TOpenDialog; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function OpenDialog_GetComponents(AObj: TOpenDialog; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function OpenDialog_StaticClassType: TClass; extdecl;
begin
  Result := TOpenDialog;
end;

exports
  OpenDialog_Create,
  OpenDialog_Free,
  OpenDialog_Execute,
  OpenDialog_FindComponent,
  OpenDialog_GetNamePath,
  OpenDialog_HasParent,
  OpenDialog_Assign,
  OpenDialog_ClassType,
  OpenDialog_ClassName,
  OpenDialog_InstanceSize,
  OpenDialog_InheritsFrom,
  OpenDialog_Equals,
  OpenDialog_GetHashCode,
  OpenDialog_ToString,
  OpenDialog_GetFiles,
  OpenDialog_GetDefaultExt,
  OpenDialog_SetDefaultExt,
  OpenDialog_GetFileName,
  OpenDialog_SetFileName,
  OpenDialog_GetFilter,
  OpenDialog_SetFilter,
  OpenDialog_GetFilterIndex,
  OpenDialog_SetFilterIndex,
  OpenDialog_GetInitialDir,
  OpenDialog_SetInitialDir,
  OpenDialog_GetOptions,
  OpenDialog_SetOptions,
  OpenDialog_GetTitle,
  OpenDialog_SetTitle,
  OpenDialog_GetHandle,
  OpenDialog_SetOnClose,
  OpenDialog_SetOnShow,
  OpenDialog_GetComponentCount,
  OpenDialog_GetComponentIndex,
  OpenDialog_SetComponentIndex,
  OpenDialog_GetOwner,
  OpenDialog_GetName,
  OpenDialog_SetName,
  OpenDialog_GetTag,
  OpenDialog_SetTag,
  OpenDialog_GetComponents,
  OpenDialog_StaticClassType;

