
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Printer_Create: TPrinter; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TPrinter.Create;
  handleExceptionEnd
end;

procedure Printer_Free(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Printer_Abort(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.Abort;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Printer_BeginDoc(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.BeginDoc;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Printer_EndDoc(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.EndDoc;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Printer_NewPage(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.NewPage;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Printer_Refresh(AObj: TPrinter); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_ClassType(AObj: TPrinter): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_ClassName(AObj: TPrinter): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_InstanceSize(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_InheritsFrom(AObj: TPrinter; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_Equals(AObj: TPrinter; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_GetHashCode(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Printer_ToString(AObj: TPrinter): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function Printer_GetAborted(AObj: TPrinter): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Aborted;
  handleExceptionEnd
end;

function Printer_GetCanvas(AObj: TPrinter): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function Printer_GetCopies(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Copies;
  handleExceptionEnd
end;

procedure Printer_SetCopies(AObj: TPrinter; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Copies := AValue;
  handleExceptionEnd
end;

function Printer_GetFonts(AObj: TPrinter): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Fonts;
  handleExceptionEnd
end;

function Printer_GetOrientation(AObj: TPrinter): TPrinterOrientation; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TPrinterOrientation);{$endif}
  handleExceptionBegin
  Result :=  AObj.Orientation;
  handleExceptionEnd
end;

procedure Printer_SetOrientation(AObj: TPrinter; AValue: TPrinterOrientation); extdecl;
begin
  handleExceptionBegin
  AObj.Orientation := AValue;
  handleExceptionEnd
end;

function Printer_GetPageHeight(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PageHeight;
  handleExceptionEnd
end;

function Printer_GetPageWidth(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PageWidth;
  handleExceptionEnd
end;

function Printer_GetPageNumber(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PageNumber;
  handleExceptionEnd
end;

function Printer_GetPrinterIndex(AObj: TPrinter): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PrinterIndex;
  handleExceptionEnd
end;

procedure Printer_SetPrinterIndex(AObj: TPrinter; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PrinterIndex := AValue;
  handleExceptionEnd
end;

function Printer_GetPrinting(AObj: TPrinter): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Printing;
  handleExceptionEnd
end;

function Printer_GetPrinters(AObj: TPrinter): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Printers;
  handleExceptionEnd
end;

function Printer_GetTitle(AObj: TPrinter): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Title);
  handleExceptionEnd
end;

procedure Printer_SetTitle(AObj: TPrinter; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Title := AValue;
  handleExceptionEnd
end;

function Printer_StaticClassType: TClass; extdecl;
begin
  Result := TPrinter;
end;

exports
  Printer_Create,
  Printer_Free,
  Printer_Abort,
  Printer_BeginDoc,
  Printer_EndDoc,
  Printer_NewPage,
  Printer_Refresh,
  Printer_ClassType,
  Printer_ClassName,
  Printer_InstanceSize,
  Printer_InheritsFrom,
  Printer_Equals,
  Printer_GetHashCode,
  Printer_ToString,
  Printer_GetAborted,
  Printer_GetCanvas,
  Printer_GetCopies,
  Printer_SetCopies,
  Printer_GetFonts,
  Printer_GetOrientation,
  Printer_SetOrientation,
  Printer_GetPageHeight,
  Printer_GetPageWidth,
  Printer_GetPageNumber,
  Printer_GetPrinterIndex,
  Printer_SetPrinterIndex,
  Printer_GetPrinting,
  Printer_GetPrinters,
  Printer_GetTitle,
  Printer_SetTitle,
  Printer_StaticClassType;

