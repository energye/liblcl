
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function TaskDialogButtonItem_Create(AOwner: TCollection): TTaskDialogButtonItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TTaskDialogButtonItem.Create(AOwner);
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_Free(AObj: TTaskDialogButtonItem); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_GetNamePath(AObj: TTaskDialogButtonItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure TaskDialogButtonItem_Assign(AObj: TTaskDialogButtonItem; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_ClassType(AObj: TTaskDialogButtonItem): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_ClassName(AObj: TTaskDialogButtonItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_InstanceSize(AObj: TTaskDialogButtonItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_InheritsFrom(AObj: TTaskDialogButtonItem; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_Equals(AObj: TTaskDialogButtonItem; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_GetHashCode(AObj: TTaskDialogButtonItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function TaskDialogButtonItem_ToString(AObj: TTaskDialogButtonItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetModalResult(AObj: TTaskDialogButtonItem): TModalResult; extdecl;
begin
{$ifdef UsehandleException}Result := TModalResult(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ModalResult;
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetModalResult(AObj: TTaskDialogButtonItem; AValue: TModalResult); extdecl;
begin
  handleExceptionBegin
  AObj.ModalResult := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetCaption(AObj: TTaskDialogButtonItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetCaption(AObj: TTaskDialogButtonItem; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetDefault(AObj: TTaskDialogButtonItem): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Default;
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetDefault(AObj: TTaskDialogButtonItem; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Default := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetCollection(AObj: TTaskDialogButtonItem): TCollection; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Collection;
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetCollection(AObj: TTaskDialogButtonItem; AValue: TCollection); extdecl;
begin
  handleExceptionBegin
  AObj.Collection := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetIndex(AObj: TTaskDialogButtonItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetIndex(AObj: TTaskDialogButtonItem; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_GetDisplayName(AObj: TTaskDialogButtonItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DisplayName);
  handleExceptionEnd
end;

procedure TaskDialogButtonItem_SetDisplayName(AObj: TTaskDialogButtonItem; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DisplayName := AValue;
  handleExceptionEnd
end;

function TaskDialogButtonItem_StaticClassType: TClass; extdecl;
begin
  Result := TTaskDialogButtonItem;
end;

exports
  TaskDialogButtonItem_Create,
  TaskDialogButtonItem_Free,
  TaskDialogButtonItem_GetNamePath,
  TaskDialogButtonItem_Assign,
  TaskDialogButtonItem_ClassType,
  TaskDialogButtonItem_ClassName,
  TaskDialogButtonItem_InstanceSize,
  TaskDialogButtonItem_InheritsFrom,
  TaskDialogButtonItem_Equals,
  TaskDialogButtonItem_GetHashCode,
  TaskDialogButtonItem_ToString,
  TaskDialogButtonItem_GetModalResult,
  TaskDialogButtonItem_SetModalResult,
  TaskDialogButtonItem_GetCaption,
  TaskDialogButtonItem_SetCaption,
  TaskDialogButtonItem_GetDefault,
  TaskDialogButtonItem_SetDefault,
  TaskDialogButtonItem_GetCollection,
  TaskDialogButtonItem_SetCollection,
  TaskDialogButtonItem_GetIndex,
  TaskDialogButtonItem_SetIndex,
  TaskDialogButtonItem_GetDisplayName,
  TaskDialogButtonItem_SetDisplayName,
  TaskDialogButtonItem_StaticClassType;

