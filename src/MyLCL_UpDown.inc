
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function UpDown_Create(AOwner: TComponent): TUpDown; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TUpDown.Create(AOwner);
  handleExceptionEnd
end;

procedure UpDown_Free(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_CanFocus(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ContainsControl(AObj: TUpDown; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function UpDown_ControlAtPos(AObj: TUpDown; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_DisableAlign(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_EnableAlign(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_FindChildControl(AObj: TUpDown; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_FlipChildren(AObj: TUpDown; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Focused(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_HandleAllocated(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_InsertControl(AObj: TUpDown; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Invalidate(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_PaintTo(AObj: TUpDown; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_RemoveControl(AObj: TUpDown; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Realign(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Repaint(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_ScaleBy(AObj: TUpDown; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_ScrollBy(AObj: TUpDown; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_SetBounds(AObj: TUpDown; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_SetFocus(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Update(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_BringToFront(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure UpDown_ClientToScreen(AObj: TUpDown; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure UpDown_ClientToParent(AObj: TUpDown; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Dragging(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_HasParent(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Hide(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Perform(AObj: TUpDown; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Refresh(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure UpDown_ScreenToClient(AObj: TUpDown; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure UpDown_ParentToClient(AObj: TUpDown; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_SendToBack(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Show(AObj: TUpDown); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_GetTextBuf(AObj: TUpDown; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_GetTextLen(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_SetTextBuf(AObj: TUpDown; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_FindComponent(AObj: TUpDown; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_GetNamePath(AObj: TUpDown): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_Assign(AObj: TUpDown; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ClassType(AObj: TUpDown): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ClassName(AObj: TUpDown): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_InstanceSize(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_InheritsFrom(AObj: TUpDown; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Equals(AObj: TUpDown; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_GetHashCode(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ToString(AObj: TUpDown): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorToNeighbour(AObj: TUpDown; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorParallel(AObj: TUpDown; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorHorizontalCenterTo(AObj: TUpDown; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorVerticalCenterTo(AObj: TUpDown; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorSame(AObj: TUpDown; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorAsAlign(AObj: TUpDown; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AnchorClient(AObj: TUpDown; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleDesignToForm(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleFormToDesign(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Scale96ToForm(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleFormTo96(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Scale96ToFont(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleFontTo96(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleScreenToFont(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleFontToScreen(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_Scale96ToScreen(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function UpDown_ScaleScreenTo96(AObj: TUpDown; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_AutoAdjustLayout(AObj: TUpDown; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure UpDown_FixDesignFontsPPI(AObj: TUpDown; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure UpDown_ScaleFontsPPI(AObj: TUpDown; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function UpDown_GetAnchors(AObj: TUpDown): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure UpDown_SetAnchors(AObj: TUpDown; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function UpDown_GetDoubleBuffered(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure UpDown_SetDoubleBuffered(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function UpDown_GetEnabled(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure UpDown_SetEnabled(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function UpDown_GetHint(AObj: TUpDown): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure UpDown_SetHint(AObj: TUpDown; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function UpDown_GetMin(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Min;
  handleExceptionEnd
end;

procedure UpDown_SetMin(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Min := AValue;
  handleExceptionEnd
end;

function UpDown_GetMax(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Max;
  handleExceptionEnd
end;

procedure UpDown_SetMax(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Max := AValue;
  handleExceptionEnd
end;

function UpDown_GetIncrement(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Increment;
  handleExceptionEnd
end;

procedure UpDown_SetIncrement(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Increment := AValue;
  handleExceptionEnd
end;

function UpDown_GetConstraints(AObj: TUpDown): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure UpDown_SetConstraints(AObj: TUpDown; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function UpDown_GetOrientation(AObj: TUpDown): TUDOrientation; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TUDOrientation);{$endif}
  handleExceptionBegin
  Result :=  AObj.Orientation;
  handleExceptionEnd
end;

procedure UpDown_SetOrientation(AObj: TUpDown; AValue: TUDOrientation); extdecl;
begin
  handleExceptionBegin
  AObj.Orientation := AValue;
  handleExceptionEnd
end;

function UpDown_GetParentDoubleBuffered(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure UpDown_SetParentDoubleBuffered(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function UpDown_GetParentShowHint(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure UpDown_SetParentShowHint(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function UpDown_GetPopupMenu(AObj: TUpDown): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure UpDown_SetPopupMenu(AObj: TUpDown; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function UpDown_GetPosition(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Position;
  handleExceptionEnd
end;

procedure UpDown_SetPosition(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Position := AValue;
  handleExceptionEnd
end;

function UpDown_GetShowHint(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure UpDown_SetShowHint(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function UpDown_GetTabOrder(AObj: TUpDown): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure UpDown_SetTabOrder(AObj: TUpDown; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function UpDown_GetTabStop(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure UpDown_SetTabStop(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function UpDown_GetVisible(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure UpDown_SetVisible(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function UpDown_GetWrap(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Wrap;
  handleExceptionEnd
end;

procedure UpDown_SetWrap(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Wrap := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TUDChangingEvent
procedure UpDown_SetOnChanging(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTUDChangingEvent}
  {$DEFINE EventName := OnChanging}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure UpDown_SetOnContextPopup(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TUDClickEvent
procedure UpDown_SetOnClick(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTUDClickEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure UpDown_SetOnEnter(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure UpDown_SetOnExit(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure UpDown_SetOnMouseDown(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure UpDown_SetOnMouseEnter(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure UpDown_SetOnMouseLeave(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure UpDown_SetOnMouseMove(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure UpDown_SetOnMouseUp(AObj: TUpDown; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function UpDown_GetDockClientCount(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function UpDown_GetDockSite(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure UpDown_SetDockSite(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function UpDown_GetMouseInClient(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function UpDown_GetVisibleDockClientCount(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function UpDown_GetBrush(AObj: TUpDown): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function UpDown_GetControlCount(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function UpDown_GetHandle(AObj: TUpDown): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function UpDown_GetParentWindow(AObj: TUpDown): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure UpDown_SetParentWindow(AObj: TUpDown; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function UpDown_GetShowing(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function UpDown_GetUseDockManager(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure UpDown_SetUseDockManager(AObj: TUpDown; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function UpDown_GetAction(AObj: TUpDown): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure UpDown_SetAction(AObj: TUpDown; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function UpDown_GetAlign(AObj: TUpDown): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure UpDown_SetAlign(AObj: TUpDown; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function UpDown_GetBiDiMode(AObj: TUpDown): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure UpDown_SetBiDiMode(AObj: TUpDown; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure UpDown_GetBoundsRect(AObj: TUpDown; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure UpDown_SetBoundsRect(AObj: TUpDown; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function UpDown_GetClientHeight(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure UpDown_SetClientHeight(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure UpDown_GetClientOrigin(AObj: TUpDown; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure UpDown_GetClientRect(AObj: TUpDown; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function UpDown_GetClientWidth(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure UpDown_SetClientWidth(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function UpDown_GetControlState(AObj: TUpDown): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure UpDown_SetControlState(AObj: TUpDown; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function UpDown_GetControlStyle(AObj: TUpDown): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure UpDown_SetControlStyle(AObj: TUpDown; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function UpDown_GetFloating(AObj: TUpDown): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function UpDown_GetParent(AObj: TUpDown): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure UpDown_SetParent(AObj: TUpDown; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function UpDown_GetLeft(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure UpDown_SetLeft(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function UpDown_GetTop(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure UpDown_SetTop(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function UpDown_GetWidth(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure UpDown_SetWidth(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function UpDown_GetHeight(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure UpDown_SetHeight(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function UpDown_GetCursor(AObj: TUpDown): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure UpDown_SetCursor(AObj: TUpDown; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function UpDown_GetComponentCount(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function UpDown_GetComponentIndex(AObj: TUpDown): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure UpDown_SetComponentIndex(AObj: TUpDown; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function UpDown_GetOwner(AObj: TUpDown): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function UpDown_GetName(AObj: TUpDown): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure UpDown_SetName(AObj: TUpDown; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function UpDown_GetTag(AObj: TUpDown): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure UpDown_SetTag(AObj: TUpDown; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function UpDown_GetAnchorSideLeft(AObj: TUpDown): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure UpDown_SetAnchorSideLeft(AObj: TUpDown; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function UpDown_GetAnchorSideTop(AObj: TUpDown): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure UpDown_SetAnchorSideTop(AObj: TUpDown; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function UpDown_GetAnchorSideRight(AObj: TUpDown): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure UpDown_SetAnchorSideRight(AObj: TUpDown; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function UpDown_GetAnchorSideBottom(AObj: TUpDown): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure UpDown_SetAnchorSideBottom(AObj: TUpDown; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function UpDown_GetChildSizing(AObj: TUpDown): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure UpDown_SetChildSizing(AObj: TUpDown; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function UpDown_GetBorderSpacing(AObj: TUpDown): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure UpDown_SetBorderSpacing(AObj: TUpDown; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function UpDown_GetDockClients(AObj: TUpDown; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function UpDown_GetControls(AObj: TUpDown; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function UpDown_GetComponents(AObj: TUpDown; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function UpDown_GetAnchorSide(AObj: TUpDown; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function UpDown_StaticClassType: TClass; extdecl;
begin
  Result := TUpDown;
end;

exports
  UpDown_Create,
  UpDown_Free,
  UpDown_CanFocus,
  UpDown_ContainsControl,
  UpDown_ControlAtPos,
  UpDown_DisableAlign,
  UpDown_EnableAlign,
  UpDown_FindChildControl,
  UpDown_FlipChildren,
  UpDown_Focused,
  UpDown_HandleAllocated,
  UpDown_InsertControl,
  UpDown_Invalidate,
  UpDown_PaintTo,
  UpDown_RemoveControl,
  UpDown_Realign,
  UpDown_Repaint,
  UpDown_ScaleBy,
  UpDown_ScrollBy,
  UpDown_SetBounds,
  UpDown_SetFocus,
  UpDown_Update,
  UpDown_BringToFront,
  UpDown_ClientToScreen,
  UpDown_ClientToParent,
  UpDown_Dragging,
  UpDown_HasParent,
  UpDown_Hide,
  UpDown_Perform,
  UpDown_Refresh,
  UpDown_ScreenToClient,
  UpDown_ParentToClient,
  UpDown_SendToBack,
  UpDown_Show,
  UpDown_GetTextBuf,
  UpDown_GetTextLen,
  UpDown_SetTextBuf,
  UpDown_FindComponent,
  UpDown_GetNamePath,
  UpDown_Assign,
  UpDown_ClassType,
  UpDown_ClassName,
  UpDown_InstanceSize,
  UpDown_InheritsFrom,
  UpDown_Equals,
  UpDown_GetHashCode,
  UpDown_ToString,
  UpDown_AnchorToNeighbour,
  UpDown_AnchorParallel,
  UpDown_AnchorHorizontalCenterTo,
  UpDown_AnchorVerticalCenterTo,
  UpDown_AnchorSame,
  UpDown_AnchorAsAlign,
  UpDown_AnchorClient,
  UpDown_ScaleDesignToForm,
  UpDown_ScaleFormToDesign,
  UpDown_Scale96ToForm,
  UpDown_ScaleFormTo96,
  UpDown_Scale96ToFont,
  UpDown_ScaleFontTo96,
  UpDown_ScaleScreenToFont,
  UpDown_ScaleFontToScreen,
  UpDown_Scale96ToScreen,
  UpDown_ScaleScreenTo96,
  UpDown_AutoAdjustLayout,
  UpDown_FixDesignFontsPPI,
  UpDown_ScaleFontsPPI,
  UpDown_GetAnchors,
  UpDown_SetAnchors,
  UpDown_GetDoubleBuffered,
  UpDown_SetDoubleBuffered,
  UpDown_GetEnabled,
  UpDown_SetEnabled,
  UpDown_GetHint,
  UpDown_SetHint,
  UpDown_GetMin,
  UpDown_SetMin,
  UpDown_GetMax,
  UpDown_SetMax,
  UpDown_GetIncrement,
  UpDown_SetIncrement,
  UpDown_GetConstraints,
  UpDown_SetConstraints,
  UpDown_GetOrientation,
  UpDown_SetOrientation,
  UpDown_GetParentDoubleBuffered,
  UpDown_SetParentDoubleBuffered,
  UpDown_GetParentShowHint,
  UpDown_SetParentShowHint,
  UpDown_GetPopupMenu,
  UpDown_SetPopupMenu,
  UpDown_GetPosition,
  UpDown_SetPosition,
  UpDown_GetShowHint,
  UpDown_SetShowHint,
  UpDown_GetTabOrder,
  UpDown_SetTabOrder,
  UpDown_GetTabStop,
  UpDown_SetTabStop,
  UpDown_GetVisible,
  UpDown_SetVisible,
  UpDown_GetWrap,
  UpDown_SetWrap,
  UpDown_SetOnChanging,
  UpDown_SetOnContextPopup,
  UpDown_SetOnClick,
  UpDown_SetOnEnter,
  UpDown_SetOnExit,
  UpDown_SetOnMouseDown,
  UpDown_SetOnMouseEnter,
  UpDown_SetOnMouseLeave,
  UpDown_SetOnMouseMove,
  UpDown_SetOnMouseUp,
  UpDown_GetDockClientCount,
  UpDown_GetDockSite,
  UpDown_SetDockSite,
  UpDown_GetMouseInClient,
  UpDown_GetVisibleDockClientCount,
  UpDown_GetBrush,
  UpDown_GetControlCount,
  UpDown_GetHandle,
  UpDown_GetParentWindow,
  UpDown_SetParentWindow,
  UpDown_GetShowing,
  UpDown_GetUseDockManager,
  UpDown_SetUseDockManager,
  UpDown_GetAction,
  UpDown_SetAction,
  UpDown_GetAlign,
  UpDown_SetAlign,
  UpDown_GetBiDiMode,
  UpDown_SetBiDiMode,
  UpDown_GetBoundsRect,
  UpDown_SetBoundsRect,
  UpDown_GetClientHeight,
  UpDown_SetClientHeight,
  UpDown_GetClientOrigin,
  UpDown_GetClientRect,
  UpDown_GetClientWidth,
  UpDown_SetClientWidth,
  UpDown_GetControlState,
  UpDown_SetControlState,
  UpDown_GetControlStyle,
  UpDown_SetControlStyle,
  UpDown_GetFloating,
  UpDown_GetParent,
  UpDown_SetParent,
  UpDown_GetLeft,
  UpDown_SetLeft,
  UpDown_GetTop,
  UpDown_SetTop,
  UpDown_GetWidth,
  UpDown_SetWidth,
  UpDown_GetHeight,
  UpDown_SetHeight,
  UpDown_GetCursor,
  UpDown_SetCursor,
  UpDown_GetComponentCount,
  UpDown_GetComponentIndex,
  UpDown_SetComponentIndex,
  UpDown_GetOwner,
  UpDown_GetName,
  UpDown_SetName,
  UpDown_GetTag,
  UpDown_SetTag,
  UpDown_GetAnchorSideLeft,
  UpDown_SetAnchorSideLeft,
  UpDown_GetAnchorSideTop,
  UpDown_SetAnchorSideTop,
  UpDown_GetAnchorSideRight,
  UpDown_SetAnchorSideRight,
  UpDown_GetAnchorSideBottom,
  UpDown_SetAnchorSideBottom,
  UpDown_GetChildSizing,
  UpDown_SetChildSizing,
  UpDown_GetBorderSpacing,
  UpDown_SetBorderSpacing,
  UpDown_GetDockClients,
  UpDown_GetControls,
  UpDown_GetComponents,
  UpDown_GetAnchorSide,
  UpDown_StaticClassType;

