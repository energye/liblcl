
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ListBox_Create(AOwner: TComponent): TListBox; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TListBox.Create(AOwner);
  handleExceptionEnd
end;

procedure ListBox_Free(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AddItem(AObj: TListBox; Item: PChar; AObject: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.AddItem(Item, AObject);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Clear(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_ClearSelection(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_DeleteSelected(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteSelected;
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function ListBox_ItemAtPos(AObj: TListBox; var Pos: TPoint; Existing: LongBool): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemAtPos(Pos, Existing);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
procedure ListBox_ItemRect(AObj: TListBox; Index: Integer; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ItemRect(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_SelectAll(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_CanFocus(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ContainsControl(AObj: TListBox; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function ListBox_ControlAtPos(AObj: TListBox; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_DisableAlign(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_EnableAlign(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_FindChildControl(AObj: TListBox; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_FlipChildren(AObj: TListBox; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Focused(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_HandleAllocated(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_InsertControl(AObj: TListBox; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Invalidate(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_PaintTo(AObj: TListBox; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_RemoveControl(AObj: TListBox; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Realign(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Repaint(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_ScaleBy(AObj: TListBox; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_ScrollBy(AObj: TListBox; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_SetBounds(AObj: TListBox; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_SetFocus(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Update(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_BringToFront(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListBox_ClientToScreen(AObj: TListBox; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListBox_ClientToParent(AObj: TListBox; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Dragging(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_HasParent(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Hide(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Perform(AObj: TListBox; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Refresh(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListBox_ScreenToClient(AObj: TListBox; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListBox_ParentToClient(AObj: TListBox; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_SendToBack(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Show(AObj: TListBox); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_GetTextBuf(AObj: TListBox; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_GetTextLen(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_SetTextBuf(AObj: TListBox; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_FindComponent(AObj: TListBox; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_GetNamePath(AObj: TListBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_Assign(AObj: TListBox; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ClassType(AObj: TListBox): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ClassName(AObj: TListBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_InstanceSize(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_InheritsFrom(AObj: TListBox; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Equals(AObj: TListBox; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_GetHashCode(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ToString(AObj: TListBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorToNeighbour(AObj: TListBox; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorParallel(AObj: TListBox; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorHorizontalCenterTo(AObj: TListBox; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorVerticalCenterTo(AObj: TListBox; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorSame(AObj: TListBox; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorAsAlign(AObj: TListBox; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AnchorClient(AObj: TListBox; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleDesignToForm(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleFormToDesign(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Scale96ToForm(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleFormTo96(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Scale96ToFont(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleFontTo96(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleScreenToFont(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleFontToScreen(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_Scale96ToScreen(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListBox_ScaleScreenTo96(AObj: TListBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_AutoAdjustLayout(AObj: TListBox; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListBox_FixDesignFontsPPI(AObj: TListBox; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure ListBox_ScaleFontsPPI(AObj: TListBox; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function ListBox_GetClickOnSelChange(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ClickOnSelChange;
  handleExceptionEnd
end;

procedure ListBox_SetClickOnSelChange(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ClickOnSelChange := AValue;
  handleExceptionEnd
end;

function ListBox_GetOptions(AObj: TListBox): TListBoxOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure ListBox_SetOptions(AObj: TListBox; AValue: TListBoxOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function ListBox_GetTopIndex(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TopIndex;
  handleExceptionEnd
end;

procedure ListBox_SetTopIndex(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.TopIndex := AValue;
  handleExceptionEnd
end;

function ListBox_GetStyle(AObj: TListBox): TListBoxStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TListBoxStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.Style;
  handleExceptionEnd
end;

procedure ListBox_SetStyle(AObj: TListBox; AValue: TListBoxStyle); extdecl;
begin
  handleExceptionBegin
  AObj.Style := AValue;
  handleExceptionEnd
end;

function ListBox_GetAlign(AObj: TListBox): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure ListBox_SetAlign(AObj: TListBox; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function ListBox_GetAnchors(AObj: TListBox): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure ListBox_SetAnchors(AObj: TListBox; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function ListBox_GetBiDiMode(AObj: TListBox): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure ListBox_SetBiDiMode(AObj: TListBox; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function ListBox_GetBorderStyle(AObj: TListBox): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure ListBox_SetBorderStyle(AObj: TListBox; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function ListBox_GetColor(AObj: TListBox): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure ListBox_SetColor(AObj: TListBox; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function ListBox_GetColumns(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Columns;
  handleExceptionEnd
end;

procedure ListBox_SetColumns(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Columns := AValue;
  handleExceptionEnd
end;

function ListBox_GetConstraints(AObj: TListBox): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure ListBox_SetConstraints(AObj: TListBox; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function ListBox_GetDoubleBuffered(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure ListBox_SetDoubleBuffered(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function ListBox_GetDragCursor(AObj: TListBox): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure ListBox_SetDragCursor(AObj: TListBox; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function ListBox_GetDragKind(AObj: TListBox): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure ListBox_SetDragKind(AObj: TListBox; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function ListBox_GetDragMode(AObj: TListBox): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure ListBox_SetDragMode(AObj: TListBox; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function ListBox_GetEnabled(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure ListBox_SetEnabled(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function ListBox_GetExtendedSelect(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ExtendedSelect;
  handleExceptionEnd
end;

procedure ListBox_SetExtendedSelect(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ExtendedSelect := AValue;
  handleExceptionEnd
end;

function ListBox_GetFont(AObj: TListBox): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure ListBox_SetFont(AObj: TListBox; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function ListBox_GetItemHeight(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemHeight;
  handleExceptionEnd
end;

procedure ListBox_SetItemHeight(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemHeight := AValue;
  handleExceptionEnd
end;

function ListBox_GetItems(AObj: TListBox): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

procedure ListBox_SetItems(AObj: TListBox; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Items := AValue;
  handleExceptionEnd
end;

function ListBox_GetMultiSelect(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MultiSelect;
  handleExceptionEnd
end;

procedure ListBox_SetMultiSelect(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.MultiSelect := AValue;
  handleExceptionEnd
end;

function ListBox_GetParentColor(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure ListBox_SetParentColor(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function ListBox_GetParentDoubleBuffered(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure ListBox_SetParentDoubleBuffered(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function ListBox_GetParentFont(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure ListBox_SetParentFont(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function ListBox_GetParentShowHint(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure ListBox_SetParentShowHint(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function ListBox_GetPopupMenu(AObj: TListBox): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure ListBox_SetPopupMenu(AObj: TListBox; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function ListBox_GetShowHint(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure ListBox_SetShowHint(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function ListBox_GetSorted(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Sorted;
  handleExceptionEnd
end;

procedure ListBox_SetSorted(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Sorted := AValue;
  handleExceptionEnd
end;

function ListBox_GetTabOrder(AObj: TListBox): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure ListBox_SetTabOrder(AObj: TListBox; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function ListBox_GetTabStop(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure ListBox_SetTabStop(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function ListBox_GetVisible(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure ListBox_SetVisible(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnClick(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure ListBox_SetOnContextPopup(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnDblClick(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure ListBox_SetOnDragDrop(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure ListBox_SetOnDragOver(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TDrawItemEvent
procedure ListBox_SetOnDrawItem(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDrawItemEvent}
  {$DEFINE EventName := OnDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure ListBox_SetOnEndDrag(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnEnter(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnExit(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure ListBox_SetOnKeyDown(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure ListBox_SetOnKeyPress(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure ListBox_SetOnKeyUp(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMeasureItemEvent
procedure ListBox_SetOnMeasureItem(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMeasureItemEvent}
  {$DEFINE EventName := OnMeasureItem}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ListBox_SetOnMouseDown(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnMouseEnter(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListBox_SetOnMouseLeave(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure ListBox_SetOnMouseMove(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ListBox_SetOnMouseUp(AObj: TListBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function ListBox_GetCanvas(AObj: TListBox): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function ListBox_GetCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function ListBox_GetSelCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelCount;
  handleExceptionEnd
end;

function ListBox_GetItemIndex(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemIndex;
  handleExceptionEnd
end;

procedure ListBox_SetItemIndex(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemIndex := AValue;
  handleExceptionEnd
end;

function ListBox_GetDockClientCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function ListBox_GetDockSite(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure ListBox_SetDockSite(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function ListBox_GetMouseInClient(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function ListBox_GetVisibleDockClientCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function ListBox_GetBrush(AObj: TListBox): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function ListBox_GetControlCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function ListBox_GetHandle(AObj: TListBox): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function ListBox_GetParentWindow(AObj: TListBox): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure ListBox_SetParentWindow(AObj: TListBox; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function ListBox_GetShowing(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function ListBox_GetUseDockManager(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure ListBox_SetUseDockManager(AObj: TListBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function ListBox_GetAction(AObj: TListBox): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure ListBox_SetAction(AObj: TListBox; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListBox_GetBoundsRect(AObj: TListBox; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure ListBox_SetBoundsRect(AObj: TListBox; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function ListBox_GetClientHeight(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure ListBox_SetClientHeight(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListBox_GetClientOrigin(AObj: TListBox; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListBox_GetClientRect(AObj: TListBox; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function ListBox_GetClientWidth(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure ListBox_SetClientWidth(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function ListBox_GetControlState(AObj: TListBox): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure ListBox_SetControlState(AObj: TListBox; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function ListBox_GetControlStyle(AObj: TListBox): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure ListBox_SetControlStyle(AObj: TListBox; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function ListBox_GetFloating(AObj: TListBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function ListBox_GetParent(AObj: TListBox): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure ListBox_SetParent(AObj: TListBox; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function ListBox_GetLeft(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure ListBox_SetLeft(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function ListBox_GetTop(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure ListBox_SetTop(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function ListBox_GetWidth(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ListBox_SetWidth(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ListBox_GetHeight(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure ListBox_SetHeight(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function ListBox_GetCursor(AObj: TListBox): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure ListBox_SetCursor(AObj: TListBox; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function ListBox_GetHint(AObj: TListBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure ListBox_SetHint(AObj: TListBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function ListBox_GetComponentCount(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ListBox_GetComponentIndex(AObj: TListBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ListBox_SetComponentIndex(AObj: TListBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ListBox_GetOwner(AObj: TListBox): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ListBox_GetName(AObj: TListBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ListBox_SetName(AObj: TListBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ListBox_GetTag(AObj: TListBox): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ListBox_SetTag(AObj: TListBox; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ListBox_GetAnchorSideLeft(AObj: TListBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure ListBox_SetAnchorSideLeft(AObj: TListBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function ListBox_GetAnchorSideTop(AObj: TListBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure ListBox_SetAnchorSideTop(AObj: TListBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function ListBox_GetAnchorSideRight(AObj: TListBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure ListBox_SetAnchorSideRight(AObj: TListBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function ListBox_GetAnchorSideBottom(AObj: TListBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure ListBox_SetAnchorSideBottom(AObj: TListBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function ListBox_GetChildSizing(AObj: TListBox): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure ListBox_SetChildSizing(AObj: TListBox; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function ListBox_GetBorderSpacing(AObj: TListBox): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure ListBox_SetBorderSpacing(AObj: TListBox; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function ListBox_GetSelected(AObj: TListBox; Index: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Selected[Index];
  handleExceptionEnd
end;

procedure ListBox_SetSelected(AObj: TListBox; Index: Integer; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Selected[Index] := AValue;
  handleExceptionEnd
end;

function ListBox_GetDockClients(AObj: TListBox; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function ListBox_GetControls(AObj: TListBox; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function ListBox_GetComponents(AObj: TListBox; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ListBox_GetAnchorSide(AObj: TListBox; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function ListBox_StaticClassType: TClass; extdecl;
begin
  Result := TListBox;
end;

exports
  ListBox_Create,
  ListBox_Free,
  ListBox_AddItem,
  ListBox_Clear,
  ListBox_ClearSelection,
  ListBox_DeleteSelected,
  ListBox_ItemAtPos,
  ListBox_ItemRect,
  ListBox_SelectAll,
  ListBox_CanFocus,
  ListBox_ContainsControl,
  ListBox_ControlAtPos,
  ListBox_DisableAlign,
  ListBox_EnableAlign,
  ListBox_FindChildControl,
  ListBox_FlipChildren,
  ListBox_Focused,
  ListBox_HandleAllocated,
  ListBox_InsertControl,
  ListBox_Invalidate,
  ListBox_PaintTo,
  ListBox_RemoveControl,
  ListBox_Realign,
  ListBox_Repaint,
  ListBox_ScaleBy,
  ListBox_ScrollBy,
  ListBox_SetBounds,
  ListBox_SetFocus,
  ListBox_Update,
  ListBox_BringToFront,
  ListBox_ClientToScreen,
  ListBox_ClientToParent,
  ListBox_Dragging,
  ListBox_HasParent,
  ListBox_Hide,
  ListBox_Perform,
  ListBox_Refresh,
  ListBox_ScreenToClient,
  ListBox_ParentToClient,
  ListBox_SendToBack,
  ListBox_Show,
  ListBox_GetTextBuf,
  ListBox_GetTextLen,
  ListBox_SetTextBuf,
  ListBox_FindComponent,
  ListBox_GetNamePath,
  ListBox_Assign,
  ListBox_ClassType,
  ListBox_ClassName,
  ListBox_InstanceSize,
  ListBox_InheritsFrom,
  ListBox_Equals,
  ListBox_GetHashCode,
  ListBox_ToString,
  ListBox_AnchorToNeighbour,
  ListBox_AnchorParallel,
  ListBox_AnchorHorizontalCenterTo,
  ListBox_AnchorVerticalCenterTo,
  ListBox_AnchorSame,
  ListBox_AnchorAsAlign,
  ListBox_AnchorClient,
  ListBox_ScaleDesignToForm,
  ListBox_ScaleFormToDesign,
  ListBox_Scale96ToForm,
  ListBox_ScaleFormTo96,
  ListBox_Scale96ToFont,
  ListBox_ScaleFontTo96,
  ListBox_ScaleScreenToFont,
  ListBox_ScaleFontToScreen,
  ListBox_Scale96ToScreen,
  ListBox_ScaleScreenTo96,
  ListBox_AutoAdjustLayout,
  ListBox_FixDesignFontsPPI,
  ListBox_ScaleFontsPPI,
  ListBox_GetClickOnSelChange,
  ListBox_SetClickOnSelChange,
  ListBox_GetOptions,
  ListBox_SetOptions,
  ListBox_GetTopIndex,
  ListBox_SetTopIndex,
  ListBox_GetStyle,
  ListBox_SetStyle,
  ListBox_GetAlign,
  ListBox_SetAlign,
  ListBox_GetAnchors,
  ListBox_SetAnchors,
  ListBox_GetBiDiMode,
  ListBox_SetBiDiMode,
  ListBox_GetBorderStyle,
  ListBox_SetBorderStyle,
  ListBox_GetColor,
  ListBox_SetColor,
  ListBox_GetColumns,
  ListBox_SetColumns,
  ListBox_GetConstraints,
  ListBox_SetConstraints,
  ListBox_GetDoubleBuffered,
  ListBox_SetDoubleBuffered,
  ListBox_GetDragCursor,
  ListBox_SetDragCursor,
  ListBox_GetDragKind,
  ListBox_SetDragKind,
  ListBox_GetDragMode,
  ListBox_SetDragMode,
  ListBox_GetEnabled,
  ListBox_SetEnabled,
  ListBox_GetExtendedSelect,
  ListBox_SetExtendedSelect,
  ListBox_GetFont,
  ListBox_SetFont,
  ListBox_GetItemHeight,
  ListBox_SetItemHeight,
  ListBox_GetItems,
  ListBox_SetItems,
  ListBox_GetMultiSelect,
  ListBox_SetMultiSelect,
  ListBox_GetParentColor,
  ListBox_SetParentColor,
  ListBox_GetParentDoubleBuffered,
  ListBox_SetParentDoubleBuffered,
  ListBox_GetParentFont,
  ListBox_SetParentFont,
  ListBox_GetParentShowHint,
  ListBox_SetParentShowHint,
  ListBox_GetPopupMenu,
  ListBox_SetPopupMenu,
  ListBox_GetShowHint,
  ListBox_SetShowHint,
  ListBox_GetSorted,
  ListBox_SetSorted,
  ListBox_GetTabOrder,
  ListBox_SetTabOrder,
  ListBox_GetTabStop,
  ListBox_SetTabStop,
  ListBox_GetVisible,
  ListBox_SetVisible,
  ListBox_SetOnClick,
  ListBox_SetOnContextPopup,
  ListBox_SetOnDblClick,
  ListBox_SetOnDragDrop,
  ListBox_SetOnDragOver,
  ListBox_SetOnDrawItem,
  ListBox_SetOnEndDrag,
  ListBox_SetOnEnter,
  ListBox_SetOnExit,
  ListBox_SetOnKeyDown,
  ListBox_SetOnKeyPress,
  ListBox_SetOnKeyUp,
  ListBox_SetOnMeasureItem,
  ListBox_SetOnMouseDown,
  ListBox_SetOnMouseEnter,
  ListBox_SetOnMouseLeave,
  ListBox_SetOnMouseMove,
  ListBox_SetOnMouseUp,
  ListBox_GetCanvas,
  ListBox_GetCount,
  ListBox_GetSelCount,
  ListBox_GetItemIndex,
  ListBox_SetItemIndex,
  ListBox_GetDockClientCount,
  ListBox_GetDockSite,
  ListBox_SetDockSite,
  ListBox_GetMouseInClient,
  ListBox_GetVisibleDockClientCount,
  ListBox_GetBrush,
  ListBox_GetControlCount,
  ListBox_GetHandle,
  ListBox_GetParentWindow,
  ListBox_SetParentWindow,
  ListBox_GetShowing,
  ListBox_GetUseDockManager,
  ListBox_SetUseDockManager,
  ListBox_GetAction,
  ListBox_SetAction,
  ListBox_GetBoundsRect,
  ListBox_SetBoundsRect,
  ListBox_GetClientHeight,
  ListBox_SetClientHeight,
  ListBox_GetClientOrigin,
  ListBox_GetClientRect,
  ListBox_GetClientWidth,
  ListBox_SetClientWidth,
  ListBox_GetControlState,
  ListBox_SetControlState,
  ListBox_GetControlStyle,
  ListBox_SetControlStyle,
  ListBox_GetFloating,
  ListBox_GetParent,
  ListBox_SetParent,
  ListBox_GetLeft,
  ListBox_SetLeft,
  ListBox_GetTop,
  ListBox_SetTop,
  ListBox_GetWidth,
  ListBox_SetWidth,
  ListBox_GetHeight,
  ListBox_SetHeight,
  ListBox_GetCursor,
  ListBox_SetCursor,
  ListBox_GetHint,
  ListBox_SetHint,
  ListBox_GetComponentCount,
  ListBox_GetComponentIndex,
  ListBox_SetComponentIndex,
  ListBox_GetOwner,
  ListBox_GetName,
  ListBox_SetName,
  ListBox_GetTag,
  ListBox_SetTag,
  ListBox_GetAnchorSideLeft,
  ListBox_SetAnchorSideLeft,
  ListBox_GetAnchorSideTop,
  ListBox_SetAnchorSideTop,
  ListBox_GetAnchorSideRight,
  ListBox_SetAnchorSideRight,
  ListBox_GetAnchorSideBottom,
  ListBox_SetAnchorSideBottom,
  ListBox_GetChildSizing,
  ListBox_SetChildSizing,
  ListBox_GetBorderSpacing,
  ListBox_SetBorderSpacing,
  ListBox_GetSelected,
  ListBox_SetSelected,
  ListBox_GetDockClients,
  ListBox_GetControls,
  ListBox_GetComponents,
  ListBox_GetAnchorSide,
  ListBox_StaticClassType;

