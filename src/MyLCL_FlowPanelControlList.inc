
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

//CLASSMETHOD:
function FlowPanelControlList_IndexOf(AObj: TFlowPanelControlList; AControl: TControl): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.IndexOf(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_Exchange(AObj: TFlowPanelControlList; Index1: Integer; index2: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Exchange(Index1, index2);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_Move(AObj: TFlowPanelControlList; Index1: Integer; index2: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Move(Index1, index2);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_AllowAdd(AObj: TFlowPanelControlList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AllowAdd;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_AllowDelete(AObj: TFlowPanelControlList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AllowDelete;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_Owner(AObj: TFlowPanelControlList): TPersistent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_Add(AObj: TFlowPanelControlList): TCollectionItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Add;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_Assign(AObj: TFlowPanelControlList; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_BeginUpdate(AObj: TFlowPanelControlList); extdecl;
begin
  handleExceptionBegin
  AObj.BeginUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_Clear(AObj: TFlowPanelControlList); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_Delete(AObj: TFlowPanelControlList; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FlowPanelControlList_EndUpdate(AObj: TFlowPanelControlList); extdecl;
begin
  handleExceptionBegin
  AObj.EndUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_FindItemID(AObj: TFlowPanelControlList; ID: Integer): TCollectionItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindItemID(ID);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_GetNamePath(AObj: TFlowPanelControlList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_Insert(AObj: TFlowPanelControlList; Index: Integer): TCollectionItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Insert(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_ClassType(AObj: TFlowPanelControlList): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_ClassName(AObj: TFlowPanelControlList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_InstanceSize(AObj: TFlowPanelControlList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_InheritsFrom(AObj: TFlowPanelControlList; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_Equals(AObj: TFlowPanelControlList; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_GetHashCode(AObj: TFlowPanelControlList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FlowPanelControlList_ToString(AObj: TFlowPanelControlList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function FlowPanelControlList_GetCount(AObj: TFlowPanelControlList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function FlowPanelControlList_GetItems(AObj: TFlowPanelControlList; Index: Integer): TFlowPanelControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items[Index];
  handleExceptionEnd
end;

procedure FlowPanelControlList_SetItems(AObj: TFlowPanelControlList; Index: Integer; AValue: TFlowPanelControl); extdecl;
begin
  handleExceptionBegin
  AObj.Items[Index] := AValue;
  handleExceptionEnd
end;

function FlowPanelControlList_StaticClassType: TClass; extdecl;
begin
  Result := TFlowPanelControlList;
end;

exports
  FlowPanelControlList_IndexOf,
  FlowPanelControlList_Exchange,
  FlowPanelControlList_Move,
  FlowPanelControlList_AllowAdd,
  FlowPanelControlList_AllowDelete,
  FlowPanelControlList_Owner,
  FlowPanelControlList_Add,
  FlowPanelControlList_Assign,
  FlowPanelControlList_BeginUpdate,
  FlowPanelControlList_Clear,
  FlowPanelControlList_Delete,
  FlowPanelControlList_EndUpdate,
  FlowPanelControlList_FindItemID,
  FlowPanelControlList_GetNamePath,
  FlowPanelControlList_Insert,
  FlowPanelControlList_ClassType,
  FlowPanelControlList_ClassName,
  FlowPanelControlList_InstanceSize,
  FlowPanelControlList_InheritsFrom,
  FlowPanelControlList_Equals,
  FlowPanelControlList_GetHashCode,
  FlowPanelControlList_ToString,
  FlowPanelControlList_GetCount,
  FlowPanelControlList_GetItems,
  FlowPanelControlList_SetItems,
  FlowPanelControlList_StaticClassType;

