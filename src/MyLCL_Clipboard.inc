
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Clipboard_Create: TClipboard; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TClipboard.Create;
  handleExceptionEnd
end;

procedure Clipboard_Free(AObj: TClipboard); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_FindPictureFormatID(AObj: TClipboard): TClipboardFormat; extdecl;
begin
{$ifdef UsehandleException}Result := TClipboardFormat(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FindPictureFormatID;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_FindFormatID(AObj: TClipboard; FormatName: PChar): TClipboardFormat; extdecl;
begin
{$ifdef UsehandleException}Result := TClipboardFormat(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FindFormatID(FormatName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_SupportedFormats(AObj: TClipboard; List: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.SupportedFormats(List);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_HasFormatName(AObj: TClipboard; FormatName: PChar): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasFormatName(FormatName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_HasPictureFormat(AObj: TClipboard): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasPictureFormat;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_SetAsHtml(AObj: TClipboard; Html: PChar; PlainText: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetAsHtml(Html, PlainText);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_GetFormat(AObj: TClipboard; FormatID: TClipboardFormat; Stream: TStream): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetFormat(FormatID, Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_AddFormat(AObj: TClipboard; FormatID: TClipboardFormat; Stream: TStream): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AddFormat(FormatID, Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_SetFormat(AObj: TClipboard; FormatID: TClipboardFormat; Stream: TStream): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.SetFormat(FormatID, Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_GetComponent(AObj: TClipboard; Owner: TComponent; Parent: TComponent): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetComponent(Owner, Parent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_SetComponent(AObj: TClipboard; Component: TComponent): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.SetComponent(Component);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_SetComponentAsText(AObj: TClipboard; Component: TComponent): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.SetComponentAsText(Component);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_Assign(AObj: TClipboard; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_Clear(AObj: TClipboard); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_Close(AObj: TClipboard); extdecl;
begin
  handleExceptionBegin
  AObj.Close;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_Open(AObj: TClipboard); extdecl;
begin
  handleExceptionBegin
  AObj.Open;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Clipboard_SetTextBuf(AObj: TClipboard; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_GetNamePath(AObj: TClipboard): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_ClassType(AObj: TClipboard): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_ClassName(AObj: TClipboard): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_InstanceSize(AObj: TClipboard): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_InheritsFrom(AObj: TClipboard; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_Equals(AObj: TClipboard; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_GetHashCode(AObj: TClipboard): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Clipboard_ToString(AObj: TClipboard): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function Clipboard_GetFormatCount(AObj: TClipboard): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FormatCount;
  handleExceptionEnd
end;

function Clipboard_GetFormats(AObj: TClipboard; Index: Integer): TClipboardFormat; extdecl;
begin
{$ifdef UsehandleException}Result := TClipboardFormat(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Formats[Index];
  handleExceptionEnd
end;

function Clipboard_StaticClassType: TClass; extdecl;
begin
  Result := TClipboard;
end;

exports
  Clipboard_Create,
  Clipboard_Free,
  Clipboard_FindPictureFormatID,
  Clipboard_FindFormatID,
  Clipboard_SupportedFormats,
  Clipboard_HasFormatName,
  Clipboard_HasPictureFormat,
  Clipboard_SetAsHtml,
  Clipboard_GetFormat,
  Clipboard_AddFormat,
  Clipboard_SetFormat,
  Clipboard_GetComponent,
  Clipboard_SetComponent,
  Clipboard_SetComponentAsText,
  Clipboard_Assign,
  Clipboard_Clear,
  Clipboard_Close,
  Clipboard_Open,
  Clipboard_SetTextBuf,
  Clipboard_GetNamePath,
  Clipboard_ClassType,
  Clipboard_ClassName,
  Clipboard_InstanceSize,
  Clipboard_InheritsFrom,
  Clipboard_Equals,
  Clipboard_GetHashCode,
  Clipboard_ToString,
  Clipboard_GetFormatCount,
  Clipboard_GetFormats,
  Clipboard_StaticClassType;

