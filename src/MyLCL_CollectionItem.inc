
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function CollectionItem_Create(AOwner: TCollection): TCollectionItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TCollectionItem.Create(AOwner);
  handleExceptionEnd
end;

procedure CollectionItem_Free(AObj: TCollectionItem); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_GetNamePath(AObj: TCollectionItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CollectionItem_Assign(AObj: TCollectionItem; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_ClassType(AObj: TCollectionItem): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_ClassName(AObj: TCollectionItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_InstanceSize(AObj: TCollectionItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_InheritsFrom(AObj: TCollectionItem; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_Equals(AObj: TCollectionItem; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_GetHashCode(AObj: TCollectionItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CollectionItem_ToString(AObj: TCollectionItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function CollectionItem_GetCollection(AObj: TCollectionItem): TCollection; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Collection;
  handleExceptionEnd
end;

procedure CollectionItem_SetCollection(AObj: TCollectionItem; AValue: TCollection); extdecl;
begin
  handleExceptionBegin
  AObj.Collection := AValue;
  handleExceptionEnd
end;

function CollectionItem_GetIndex(AObj: TCollectionItem): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure CollectionItem_SetIndex(AObj: TCollectionItem; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function CollectionItem_GetDisplayName(AObj: TCollectionItem): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DisplayName);
  handleExceptionEnd
end;

procedure CollectionItem_SetDisplayName(AObj: TCollectionItem; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DisplayName := AValue;
  handleExceptionEnd
end;

function CollectionItem_StaticClassType: TClass; extdecl;
begin
  Result := TCollectionItem;
end;

exports
  CollectionItem_Create,
  CollectionItem_Free,
  CollectionItem_GetNamePath,
  CollectionItem_Assign,
  CollectionItem_ClassType,
  CollectionItem_ClassName,
  CollectionItem_InstanceSize,
  CollectionItem_InheritsFrom,
  CollectionItem_Equals,
  CollectionItem_GetHashCode,
  CollectionItem_ToString,
  CollectionItem_GetCollection,
  CollectionItem_SetCollection,
  CollectionItem_GetIndex,
  CollectionItem_SetIndex,
  CollectionItem_GetDisplayName,
  CollectionItem_SetDisplayName,
  CollectionItem_StaticClassType;

