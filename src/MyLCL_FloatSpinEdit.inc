
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function FloatSpinEdit_Create(AOwner: TComponent): TFloatSpinEdit; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TFloatSpinEdit.Create(AOwner);
  handleExceptionEnd
end;

procedure FloatSpinEdit_Free(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Clear(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_ClearSelection(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_CopyToClipboard(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CopyToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_CutToClipboard(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CutToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_PasteFromClipboard(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.PasteFromClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Undo(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Undo;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_SelectAll(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_CanFocus(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ContainsControl(AObj: TFloatSpinEdit; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function FloatSpinEdit_ControlAtPos(AObj: TFloatSpinEdit; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_DisableAlign(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_EnableAlign(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_FindChildControl(AObj: TFloatSpinEdit; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_FlipChildren(AObj: TFloatSpinEdit; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Focused(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_HandleAllocated(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_InsertControl(AObj: TFloatSpinEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Invalidate(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_PaintTo(AObj: TFloatSpinEdit; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_RemoveControl(AObj: TFloatSpinEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Realign(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Repaint(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_ScaleBy(AObj: TFloatSpinEdit; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_ScrollBy(AObj: TFloatSpinEdit; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_SetBounds(AObj: TFloatSpinEdit; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_SetFocus(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Update(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_BringToFront(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FloatSpinEdit_ClientToScreen(AObj: TFloatSpinEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FloatSpinEdit_ClientToParent(AObj: TFloatSpinEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Dragging(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_HasParent(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Hide(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Perform(AObj: TFloatSpinEdit; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Refresh(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FloatSpinEdit_ScreenToClient(AObj: TFloatSpinEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure FloatSpinEdit_ParentToClient(AObj: TFloatSpinEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_SendToBack(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Show(AObj: TFloatSpinEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_GetTextBuf(AObj: TFloatSpinEdit; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_GetTextLen(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_SetTextBuf(AObj: TFloatSpinEdit; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_FindComponent(AObj: TFloatSpinEdit; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_GetNamePath(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_Assign(AObj: TFloatSpinEdit; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ClassType(AObj: TFloatSpinEdit): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ClassName(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_InstanceSize(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_InheritsFrom(AObj: TFloatSpinEdit; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Equals(AObj: TFloatSpinEdit; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_GetHashCode(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ToString(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorToNeighbour(AObj: TFloatSpinEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorParallel(AObj: TFloatSpinEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorHorizontalCenterTo(AObj: TFloatSpinEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorVerticalCenterTo(AObj: TFloatSpinEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorSame(AObj: TFloatSpinEdit; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorAsAlign(AObj: TFloatSpinEdit; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AnchorClient(AObj: TFloatSpinEdit; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleDesignToForm(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleFormToDesign(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Scale96ToForm(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleFormTo96(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Scale96ToFont(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleFontTo96(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleScreenToFont(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleFontToScreen(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_Scale96ToScreen(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FloatSpinEdit_ScaleScreenTo96(AObj: TFloatSpinEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_AutoAdjustLayout(AObj: TFloatSpinEdit; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FloatSpinEdit_FixDesignFontsPPI(AObj: TFloatSpinEdit; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure FloatSpinEdit_ScaleFontsPPI(AObj: TFloatSpinEdit; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function FloatSpinEdit_GetAutoSelected(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelected;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAutoSelected(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelected := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAlign(AObj: TFloatSpinEdit): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAlign(AObj: TFloatSpinEdit; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAlignment(AObj: TFloatSpinEdit): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAlignment(AObj: TFloatSpinEdit; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchors(AObj: TFloatSpinEdit): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAnchors(AObj: TFloatSpinEdit; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAutoSelect(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelect;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAutoSelect(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelect := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAutoSize(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAutoSize(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetColor(AObj: TFloatSpinEdit): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetColor(AObj: TFloatSpinEdit; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetConstraints(AObj: TFloatSpinEdit): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetConstraints(AObj: TFloatSpinEdit; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetEnabled(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetEnabled(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetFont(AObj: TFloatSpinEdit): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetFont(AObj: TFloatSpinEdit; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetIncrement(AObj: TFloatSpinEdit; var Result: Double); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Increment;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FloatSpinEdit_SetIncrement(AObj: TFloatSpinEdit; var AValue: Double); extdecl;
begin
  handleExceptionBegin
  AObj.Increment := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetMaxValue(AObj: TFloatSpinEdit; var Result: Double); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MaxValue;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FloatSpinEdit_SetMaxValue(AObj: TFloatSpinEdit; var AValue: Double); extdecl;
begin
  handleExceptionBegin
  AObj.MaxValue := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetMinValue(AObj: TFloatSpinEdit; var Result: Double); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MinValue;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FloatSpinEdit_SetMinValue(AObj: TFloatSpinEdit; var AValue: Double); extdecl;
begin
  handleExceptionBegin
  AObj.MinValue := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnChange(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnClick(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnEnter(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnExit(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure FloatSpinEdit_SetOnKeyDown(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure FloatSpinEdit_SetOnKeyPress(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure FloatSpinEdit_SetOnKeyUp(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure FloatSpinEdit_SetOnMouseDown(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnMouseEnter(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnMouseLeave(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure FloatSpinEdit_SetOnMouseMove(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure FloatSpinEdit_SetOnMouseUp(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelEvent
procedure FloatSpinEdit_SetOnMouseWheel(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelEvent}
  {$DEFINE EventName := OnMouseWheel}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure FloatSpinEdit_SetOnMouseWheelDown(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure FloatSpinEdit_SetOnMouseWheelUp(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FloatSpinEdit_SetOnResize(AObj: TFloatSpinEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

function FloatSpinEdit_GetParentColor(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParentColor(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetParentFont(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParentFont(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetParentShowHint(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParentShowHint(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetPopupMenu(AObj: TFloatSpinEdit): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetPopupMenu(AObj: TFloatSpinEdit; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetReadOnly(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetReadOnly(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetShowHint(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetShowHint(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetTabStop(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetTabStop(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetTabOrder(AObj: TFloatSpinEdit): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetTabOrder(AObj: TFloatSpinEdit; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetValue(AObj: TFloatSpinEdit; var Result: Double); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Value;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FloatSpinEdit_SetValue(AObj: TFloatSpinEdit; var AValue: Double); extdecl;
begin
  handleExceptionBegin
  AObj.Value := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetVisible(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetVisible(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetCanUndo(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanUndo;
  handleExceptionEnd
end;

function FloatSpinEdit_GetModified(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetModified(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetSelLength(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetSelLength(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetSelStart(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetSelStart(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetSelText(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetSelText(AObj: TFloatSpinEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetText(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetText(AObj: TFloatSpinEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetTextHint(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetTextHint(AObj: TFloatSpinEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetDockClientCount(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function FloatSpinEdit_GetDockSite(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetDockSite(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetDoubleBuffered(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetDoubleBuffered(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetMouseInClient(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function FloatSpinEdit_GetVisibleDockClientCount(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function FloatSpinEdit_GetBrush(AObj: TFloatSpinEdit): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function FloatSpinEdit_GetControlCount(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function FloatSpinEdit_GetHandle(AObj: TFloatSpinEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function FloatSpinEdit_GetParentDoubleBuffered(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParentDoubleBuffered(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetParentWindow(AObj: TFloatSpinEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParentWindow(AObj: TFloatSpinEdit; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetShowing(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function FloatSpinEdit_GetUseDockManager(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetUseDockManager(AObj: TFloatSpinEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAction(AObj: TFloatSpinEdit): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAction(AObj: TFloatSpinEdit; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetBiDiMode(AObj: TFloatSpinEdit): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetBiDiMode(AObj: TFloatSpinEdit; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetBoundsRect(AObj: TFloatSpinEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure FloatSpinEdit_SetBoundsRect(AObj: TFloatSpinEdit; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetClientHeight(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetClientHeight(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetClientOrigin(AObj: TFloatSpinEdit; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure FloatSpinEdit_GetClientRect(AObj: TFloatSpinEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function FloatSpinEdit_GetClientWidth(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetClientWidth(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetControlState(AObj: TFloatSpinEdit): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetControlState(AObj: TFloatSpinEdit; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetControlStyle(AObj: TFloatSpinEdit): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetControlStyle(AObj: TFloatSpinEdit; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetFloating(AObj: TFloatSpinEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function FloatSpinEdit_GetParent(AObj: TFloatSpinEdit): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetParent(AObj: TFloatSpinEdit; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetLeft(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetLeft(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetTop(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetTop(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetWidth(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetWidth(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetHeight(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetHeight(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetCursor(AObj: TFloatSpinEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetCursor(AObj: TFloatSpinEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetHint(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetHint(AObj: TFloatSpinEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetComponentCount(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function FloatSpinEdit_GetComponentIndex(AObj: TFloatSpinEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetComponentIndex(AObj: TFloatSpinEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetOwner(AObj: TFloatSpinEdit): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function FloatSpinEdit_GetName(AObj: TFloatSpinEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetName(AObj: TFloatSpinEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetTag(AObj: TFloatSpinEdit): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetTag(AObj: TFloatSpinEdit; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchorSideLeft(AObj: TFloatSpinEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAnchorSideLeft(AObj: TFloatSpinEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchorSideTop(AObj: TFloatSpinEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAnchorSideTop(AObj: TFloatSpinEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchorSideRight(AObj: TFloatSpinEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAnchorSideRight(AObj: TFloatSpinEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchorSideBottom(AObj: TFloatSpinEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetAnchorSideBottom(AObj: TFloatSpinEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetChildSizing(AObj: TFloatSpinEdit): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetChildSizing(AObj: TFloatSpinEdit; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetBorderSpacing(AObj: TFloatSpinEdit): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure FloatSpinEdit_SetBorderSpacing(AObj: TFloatSpinEdit; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function FloatSpinEdit_GetDockClients(AObj: TFloatSpinEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function FloatSpinEdit_GetControls(AObj: TFloatSpinEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function FloatSpinEdit_GetComponents(AObj: TFloatSpinEdit; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function FloatSpinEdit_GetAnchorSide(AObj: TFloatSpinEdit; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function FloatSpinEdit_StaticClassType: TClass; extdecl;
begin
  Result := TFloatSpinEdit;
end;

exports
  FloatSpinEdit_Create,
  FloatSpinEdit_Free,
  FloatSpinEdit_Clear,
  FloatSpinEdit_ClearSelection,
  FloatSpinEdit_CopyToClipboard,
  FloatSpinEdit_CutToClipboard,
  FloatSpinEdit_PasteFromClipboard,
  FloatSpinEdit_Undo,
  FloatSpinEdit_SelectAll,
  FloatSpinEdit_CanFocus,
  FloatSpinEdit_ContainsControl,
  FloatSpinEdit_ControlAtPos,
  FloatSpinEdit_DisableAlign,
  FloatSpinEdit_EnableAlign,
  FloatSpinEdit_FindChildControl,
  FloatSpinEdit_FlipChildren,
  FloatSpinEdit_Focused,
  FloatSpinEdit_HandleAllocated,
  FloatSpinEdit_InsertControl,
  FloatSpinEdit_Invalidate,
  FloatSpinEdit_PaintTo,
  FloatSpinEdit_RemoveControl,
  FloatSpinEdit_Realign,
  FloatSpinEdit_Repaint,
  FloatSpinEdit_ScaleBy,
  FloatSpinEdit_ScrollBy,
  FloatSpinEdit_SetBounds,
  FloatSpinEdit_SetFocus,
  FloatSpinEdit_Update,
  FloatSpinEdit_BringToFront,
  FloatSpinEdit_ClientToScreen,
  FloatSpinEdit_ClientToParent,
  FloatSpinEdit_Dragging,
  FloatSpinEdit_HasParent,
  FloatSpinEdit_Hide,
  FloatSpinEdit_Perform,
  FloatSpinEdit_Refresh,
  FloatSpinEdit_ScreenToClient,
  FloatSpinEdit_ParentToClient,
  FloatSpinEdit_SendToBack,
  FloatSpinEdit_Show,
  FloatSpinEdit_GetTextBuf,
  FloatSpinEdit_GetTextLen,
  FloatSpinEdit_SetTextBuf,
  FloatSpinEdit_FindComponent,
  FloatSpinEdit_GetNamePath,
  FloatSpinEdit_Assign,
  FloatSpinEdit_ClassType,
  FloatSpinEdit_ClassName,
  FloatSpinEdit_InstanceSize,
  FloatSpinEdit_InheritsFrom,
  FloatSpinEdit_Equals,
  FloatSpinEdit_GetHashCode,
  FloatSpinEdit_ToString,
  FloatSpinEdit_AnchorToNeighbour,
  FloatSpinEdit_AnchorParallel,
  FloatSpinEdit_AnchorHorizontalCenterTo,
  FloatSpinEdit_AnchorVerticalCenterTo,
  FloatSpinEdit_AnchorSame,
  FloatSpinEdit_AnchorAsAlign,
  FloatSpinEdit_AnchorClient,
  FloatSpinEdit_ScaleDesignToForm,
  FloatSpinEdit_ScaleFormToDesign,
  FloatSpinEdit_Scale96ToForm,
  FloatSpinEdit_ScaleFormTo96,
  FloatSpinEdit_Scale96ToFont,
  FloatSpinEdit_ScaleFontTo96,
  FloatSpinEdit_ScaleScreenToFont,
  FloatSpinEdit_ScaleFontToScreen,
  FloatSpinEdit_Scale96ToScreen,
  FloatSpinEdit_ScaleScreenTo96,
  FloatSpinEdit_AutoAdjustLayout,
  FloatSpinEdit_FixDesignFontsPPI,
  FloatSpinEdit_ScaleFontsPPI,
  FloatSpinEdit_GetAutoSelected,
  FloatSpinEdit_SetAutoSelected,
  FloatSpinEdit_GetAlign,
  FloatSpinEdit_SetAlign,
  FloatSpinEdit_GetAlignment,
  FloatSpinEdit_SetAlignment,
  FloatSpinEdit_GetAnchors,
  FloatSpinEdit_SetAnchors,
  FloatSpinEdit_GetAutoSelect,
  FloatSpinEdit_SetAutoSelect,
  FloatSpinEdit_GetAutoSize,
  FloatSpinEdit_SetAutoSize,
  FloatSpinEdit_GetColor,
  FloatSpinEdit_SetColor,
  FloatSpinEdit_GetConstraints,
  FloatSpinEdit_SetConstraints,
  FloatSpinEdit_GetEnabled,
  FloatSpinEdit_SetEnabled,
  FloatSpinEdit_GetFont,
  FloatSpinEdit_SetFont,
  FloatSpinEdit_GetIncrement,
  FloatSpinEdit_SetIncrement,
  FloatSpinEdit_GetMaxValue,
  FloatSpinEdit_SetMaxValue,
  FloatSpinEdit_GetMinValue,
  FloatSpinEdit_SetMinValue,
  FloatSpinEdit_SetOnChange,
  FloatSpinEdit_SetOnClick,
  FloatSpinEdit_SetOnEnter,
  FloatSpinEdit_SetOnExit,
  FloatSpinEdit_SetOnKeyDown,
  FloatSpinEdit_SetOnKeyPress,
  FloatSpinEdit_SetOnKeyUp,
  FloatSpinEdit_SetOnMouseDown,
  FloatSpinEdit_SetOnMouseEnter,
  FloatSpinEdit_SetOnMouseLeave,
  FloatSpinEdit_SetOnMouseMove,
  FloatSpinEdit_SetOnMouseUp,
  FloatSpinEdit_SetOnMouseWheel,
  FloatSpinEdit_SetOnMouseWheelDown,
  FloatSpinEdit_SetOnMouseWheelUp,
  FloatSpinEdit_SetOnResize,
  FloatSpinEdit_GetParentColor,
  FloatSpinEdit_SetParentColor,
  FloatSpinEdit_GetParentFont,
  FloatSpinEdit_SetParentFont,
  FloatSpinEdit_GetParentShowHint,
  FloatSpinEdit_SetParentShowHint,
  FloatSpinEdit_GetPopupMenu,
  FloatSpinEdit_SetPopupMenu,
  FloatSpinEdit_GetReadOnly,
  FloatSpinEdit_SetReadOnly,
  FloatSpinEdit_GetShowHint,
  FloatSpinEdit_SetShowHint,
  FloatSpinEdit_GetTabStop,
  FloatSpinEdit_SetTabStop,
  FloatSpinEdit_GetTabOrder,
  FloatSpinEdit_SetTabOrder,
  FloatSpinEdit_GetValue,
  FloatSpinEdit_SetValue,
  FloatSpinEdit_GetVisible,
  FloatSpinEdit_SetVisible,
  FloatSpinEdit_GetCanUndo,
  FloatSpinEdit_GetModified,
  FloatSpinEdit_SetModified,
  FloatSpinEdit_GetSelLength,
  FloatSpinEdit_SetSelLength,
  FloatSpinEdit_GetSelStart,
  FloatSpinEdit_SetSelStart,
  FloatSpinEdit_GetSelText,
  FloatSpinEdit_SetSelText,
  FloatSpinEdit_GetText,
  FloatSpinEdit_SetText,
  FloatSpinEdit_GetTextHint,
  FloatSpinEdit_SetTextHint,
  FloatSpinEdit_GetDockClientCount,
  FloatSpinEdit_GetDockSite,
  FloatSpinEdit_SetDockSite,
  FloatSpinEdit_GetDoubleBuffered,
  FloatSpinEdit_SetDoubleBuffered,
  FloatSpinEdit_GetMouseInClient,
  FloatSpinEdit_GetVisibleDockClientCount,
  FloatSpinEdit_GetBrush,
  FloatSpinEdit_GetControlCount,
  FloatSpinEdit_GetHandle,
  FloatSpinEdit_GetParentDoubleBuffered,
  FloatSpinEdit_SetParentDoubleBuffered,
  FloatSpinEdit_GetParentWindow,
  FloatSpinEdit_SetParentWindow,
  FloatSpinEdit_GetShowing,
  FloatSpinEdit_GetUseDockManager,
  FloatSpinEdit_SetUseDockManager,
  FloatSpinEdit_GetAction,
  FloatSpinEdit_SetAction,
  FloatSpinEdit_GetBiDiMode,
  FloatSpinEdit_SetBiDiMode,
  FloatSpinEdit_GetBoundsRect,
  FloatSpinEdit_SetBoundsRect,
  FloatSpinEdit_GetClientHeight,
  FloatSpinEdit_SetClientHeight,
  FloatSpinEdit_GetClientOrigin,
  FloatSpinEdit_GetClientRect,
  FloatSpinEdit_GetClientWidth,
  FloatSpinEdit_SetClientWidth,
  FloatSpinEdit_GetControlState,
  FloatSpinEdit_SetControlState,
  FloatSpinEdit_GetControlStyle,
  FloatSpinEdit_SetControlStyle,
  FloatSpinEdit_GetFloating,
  FloatSpinEdit_GetParent,
  FloatSpinEdit_SetParent,
  FloatSpinEdit_GetLeft,
  FloatSpinEdit_SetLeft,
  FloatSpinEdit_GetTop,
  FloatSpinEdit_SetTop,
  FloatSpinEdit_GetWidth,
  FloatSpinEdit_SetWidth,
  FloatSpinEdit_GetHeight,
  FloatSpinEdit_SetHeight,
  FloatSpinEdit_GetCursor,
  FloatSpinEdit_SetCursor,
  FloatSpinEdit_GetHint,
  FloatSpinEdit_SetHint,
  FloatSpinEdit_GetComponentCount,
  FloatSpinEdit_GetComponentIndex,
  FloatSpinEdit_SetComponentIndex,
  FloatSpinEdit_GetOwner,
  FloatSpinEdit_GetName,
  FloatSpinEdit_SetName,
  FloatSpinEdit_GetTag,
  FloatSpinEdit_SetTag,
  FloatSpinEdit_GetAnchorSideLeft,
  FloatSpinEdit_SetAnchorSideLeft,
  FloatSpinEdit_GetAnchorSideTop,
  FloatSpinEdit_SetAnchorSideTop,
  FloatSpinEdit_GetAnchorSideRight,
  FloatSpinEdit_SetAnchorSideRight,
  FloatSpinEdit_GetAnchorSideBottom,
  FloatSpinEdit_SetAnchorSideBottom,
  FloatSpinEdit_GetChildSizing,
  FloatSpinEdit_SetChildSizing,
  FloatSpinEdit_GetBorderSpacing,
  FloatSpinEdit_SetBorderSpacing,
  FloatSpinEdit_GetDockClients,
  FloatSpinEdit_GetControls,
  FloatSpinEdit_GetComponents,
  FloatSpinEdit_GetAnchorSide,
  FloatSpinEdit_StaticClassType;

