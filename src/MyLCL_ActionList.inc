
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© yanghy. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ActionList_Create(AOwner: TComponent): TActionList; extdecl;
begin
  handleExceptionBegin
  Result :=  TActionList.Create(AOwner);
  handleExceptionEnd
end;

procedure ActionList_Free(AObj: TActionList); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_FindComponent(AObj: TActionList; AName: PChar): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_GetNamePath(AObj: TActionList): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_HasParent(AObj: TActionList): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ActionList_Assign(AObj: TActionList; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_ClassType(AObj: TActionList): TClass; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_ClassName(AObj: TActionList): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_InstanceSize(AObj: TActionList): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_InheritsFrom(AObj: TActionList; AClass: TClass): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_Equals(AObj: TActionList; Obj: TObject): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_GetHashCode(AObj: TActionList): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ActionList_ToString(AObj: TActionList): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function ActionList_GetImages(AObj: TActionList): TCustomImageList; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Images;
  handleExceptionEnd
end;

procedure ActionList_SetImages(AObj: TActionList; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Images := AValue;
  handleExceptionEnd
end;

function ActionList_GetState(AObj: TActionList): TActionListState; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.State;
  handleExceptionEnd
end;

procedure ActionList_SetState(AObj: TActionList; AValue: TActionListState); extdecl;
begin
  handleExceptionBegin
  AObj.State := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ActionList_SetOnChange(AObj: TActionList; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnChange}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function ActionList_GetComponentCount(AObj: TActionList): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ActionList_GetComponentIndex(AObj: TActionList): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ActionList_SetComponentIndex(AObj: TActionList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ActionList_GetOwner(AObj: TActionList): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ActionList_GetName(AObj: TActionList): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ActionList_SetName(AObj: TActionList; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ActionList_GetTag(AObj: TActionList): NativeInt; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ActionList_SetTag(AObj: TActionList; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ActionList_GetComponents(AObj: TActionList; AIndex: Integer): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ActionList_StaticClassType: TClass; extdecl;
begin
  Result := TActionList;
end;

exports
  ActionList_Create,
  ActionList_Free,
  ActionList_FindComponent,
  ActionList_GetNamePath,
  ActionList_HasParent,
  ActionList_Assign,
  ActionList_ClassType,
  ActionList_ClassName,
  ActionList_InstanceSize,
  ActionList_InheritsFrom,
  ActionList_Equals,
  ActionList_GetHashCode,
  ActionList_ToString,
  ActionList_GetImages,
  ActionList_SetImages,
  ActionList_GetState,
  ActionList_SetState,
  ActionList_SetOnChange,
  ActionList_GetComponentCount,
  ActionList_GetComponentIndex,
  ActionList_SetComponentIndex,
  ActionList_GetOwner,
  ActionList_GetName,
  ActionList_SetName,
  ActionList_GetTag,
  ActionList_SetTag,
  ActionList_GetComponents,
  ActionList_StaticClassType;

