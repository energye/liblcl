
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function MaskEdit_Create(AOwner: TComponent): TMaskEdit; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TMaskEdit.Create(AOwner);
  handleExceptionEnd
end;

procedure MaskEdit_Free(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_ValidateEdit(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ValidateEdit;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Clear(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_GetTextLen(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_ClearSelection(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_CopyToClipboard(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CopyToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_CutToClipboard(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CutToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_PasteFromClipboard(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.PasteFromClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Undo(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Undo;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_SelectAll(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_CanFocus(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ContainsControl(AObj: TMaskEdit; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function MaskEdit_ControlAtPos(AObj: TMaskEdit; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_DisableAlign(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_EnableAlign(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_FindChildControl(AObj: TMaskEdit; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_FlipChildren(AObj: TMaskEdit; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Focused(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_HandleAllocated(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_InsertControl(AObj: TMaskEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Invalidate(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_PaintTo(AObj: TMaskEdit; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_RemoveControl(AObj: TMaskEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Realign(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Repaint(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_ScaleBy(AObj: TMaskEdit; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_ScrollBy(AObj: TMaskEdit; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_SetBounds(AObj: TMaskEdit; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_SetFocus(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Update(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_BringToFront(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MaskEdit_ClientToScreen(AObj: TMaskEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MaskEdit_ClientToParent(AObj: TMaskEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Dragging(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_HasParent(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Hide(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Perform(AObj: TMaskEdit; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Refresh(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MaskEdit_ScreenToClient(AObj: TMaskEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure MaskEdit_ParentToClient(AObj: TMaskEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_SendToBack(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Show(AObj: TMaskEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_GetTextBuf(AObj: TMaskEdit; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_SetTextBuf(AObj: TMaskEdit; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_FindComponent(AObj: TMaskEdit; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_GetNamePath(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_Assign(AObj: TMaskEdit; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ClassType(AObj: TMaskEdit): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ClassName(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_InstanceSize(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_InheritsFrom(AObj: TMaskEdit; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Equals(AObj: TMaskEdit; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_GetHashCode(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ToString(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorToNeighbour(AObj: TMaskEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorParallel(AObj: TMaskEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorHorizontalCenterTo(AObj: TMaskEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorVerticalCenterTo(AObj: TMaskEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorSame(AObj: TMaskEdit; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorAsAlign(AObj: TMaskEdit; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AnchorClient(AObj: TMaskEdit; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleDesignToForm(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleFormToDesign(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Scale96ToForm(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleFormTo96(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Scale96ToFont(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleFontTo96(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleScreenToFont(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleFontToScreen(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_Scale96ToScreen(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MaskEdit_ScaleScreenTo96(AObj: TMaskEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_AutoAdjustLayout(AObj: TMaskEdit; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MaskEdit_FixDesignFontsPPI(AObj: TMaskEdit; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure MaskEdit_ScaleFontsPPI(AObj: TMaskEdit; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function MaskEdit_GetAlign(AObj: TMaskEdit): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure MaskEdit_SetAlign(AObj: TMaskEdit; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAlignment(AObj: TMaskEdit): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure MaskEdit_SetAlignment(AObj: TMaskEdit; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAnchors(AObj: TMaskEdit): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure MaskEdit_SetAnchors(AObj: TMaskEdit; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAutoSelect(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelect;
  handleExceptionEnd
end;

procedure MaskEdit_SetAutoSelect(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelect := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAutoSize(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure MaskEdit_SetAutoSize(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetBiDiMode(AObj: TMaskEdit): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure MaskEdit_SetBiDiMode(AObj: TMaskEdit; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetBorderStyle(AObj: TMaskEdit): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure MaskEdit_SetBorderStyle(AObj: TMaskEdit; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetCharCase(AObj: TMaskEdit): TEditCharCase; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TEditCharCase);{$endif}
  handleExceptionBegin
  Result :=  AObj.CharCase;
  handleExceptionEnd
end;

procedure MaskEdit_SetCharCase(AObj: TMaskEdit; AValue: TEditCharCase); extdecl;
begin
  handleExceptionBegin
  AObj.CharCase := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetColor(AObj: TMaskEdit): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure MaskEdit_SetColor(AObj: TMaskEdit; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetConstraints(AObj: TMaskEdit): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure MaskEdit_SetConstraints(AObj: TMaskEdit; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDoubleBuffered(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure MaskEdit_SetDoubleBuffered(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDragCursor(AObj: TMaskEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure MaskEdit_SetDragCursor(AObj: TMaskEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDragKind(AObj: TMaskEdit): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure MaskEdit_SetDragKind(AObj: TMaskEdit; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDragMode(AObj: TMaskEdit): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure MaskEdit_SetDragMode(AObj: TMaskEdit; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetEnabled(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure MaskEdit_SetEnabled(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetFont(AObj: TMaskEdit): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure MaskEdit_SetFont(AObj: TMaskEdit; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetMaxLength(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxLength;
  handleExceptionEnd
end;

procedure MaskEdit_SetMaxLength(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxLength := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetParentColor(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure MaskEdit_SetParentColor(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetParentDoubleBuffered(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure MaskEdit_SetParentDoubleBuffered(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetParentFont(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure MaskEdit_SetParentFont(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetParentShowHint(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure MaskEdit_SetParentShowHint(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetPasswordChar(AObj: TMaskEdit): Char; extdecl;
begin
{$ifdef UsehandleException}Result := #0;{$endif}
  handleExceptionBegin
  Result :=  AObj.PasswordChar;
  handleExceptionEnd
end;

procedure MaskEdit_SetPasswordChar(AObj: TMaskEdit; AValue: Char); extdecl;
begin
  handleExceptionBegin
  AObj.PasswordChar := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetPopupMenu(AObj: TMaskEdit): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure MaskEdit_SetPopupMenu(AObj: TMaskEdit; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetReadOnly(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure MaskEdit_SetReadOnly(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetShowHint(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure MaskEdit_SetShowHint(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetTabOrder(AObj: TMaskEdit): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure MaskEdit_SetTabOrder(AObj: TMaskEdit; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetTabStop(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure MaskEdit_SetTabStop(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetText(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure MaskEdit_SetText(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetTextHint(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure MaskEdit_SetTextHint(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetVisible(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure MaskEdit_SetVisible(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnChange(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnClick(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnDblClick(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure MaskEdit_SetOnDragDrop(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure MaskEdit_SetOnDragOver(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure MaskEdit_SetOnEndDock(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure MaskEdit_SetOnEndDrag(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnEnter(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnExit(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure MaskEdit_SetOnKeyDown(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure MaskEdit_SetOnKeyPress(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure MaskEdit_SetOnKeyUp(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure MaskEdit_SetOnMouseDown(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnMouseEnter(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure MaskEdit_SetOnMouseLeave(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure MaskEdit_SetOnMouseMove(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure MaskEdit_SetOnMouseUp(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure MaskEdit_SetOnStartDock(AObj: TMaskEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

function MaskEdit_GetIsMasked(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsMasked;
  handleExceptionEnd
end;

function MaskEdit_GetEditText(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.EditText);
  handleExceptionEnd
end;

procedure MaskEdit_SetEditText(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.EditText := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetCanUndo(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanUndo;
  handleExceptionEnd
end;

function MaskEdit_GetModified(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure MaskEdit_SetModified(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetSelLength(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure MaskEdit_SetSelLength(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetSelStart(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure MaskEdit_SetSelStart(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetSelText(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure MaskEdit_SetSelText(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDockClientCount(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function MaskEdit_GetDockSite(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure MaskEdit_SetDockSite(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetMouseInClient(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function MaskEdit_GetVisibleDockClientCount(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function MaskEdit_GetBrush(AObj: TMaskEdit): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function MaskEdit_GetControlCount(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function MaskEdit_GetHandle(AObj: TMaskEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function MaskEdit_GetParentWindow(AObj: TMaskEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure MaskEdit_SetParentWindow(AObj: TMaskEdit; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetShowing(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function MaskEdit_GetUseDockManager(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure MaskEdit_SetUseDockManager(AObj: TMaskEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAction(AObj: TMaskEdit): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure MaskEdit_SetAction(AObj: TMaskEdit; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MaskEdit_GetBoundsRect(AObj: TMaskEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure MaskEdit_SetBoundsRect(AObj: TMaskEdit; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetClientHeight(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure MaskEdit_SetClientHeight(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MaskEdit_GetClientOrigin(AObj: TMaskEdit; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure MaskEdit_GetClientRect(AObj: TMaskEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function MaskEdit_GetClientWidth(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure MaskEdit_SetClientWidth(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetControlState(AObj: TMaskEdit): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure MaskEdit_SetControlState(AObj: TMaskEdit; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetControlStyle(AObj: TMaskEdit): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure MaskEdit_SetControlStyle(AObj: TMaskEdit; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetFloating(AObj: TMaskEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function MaskEdit_GetParent(AObj: TMaskEdit): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure MaskEdit_SetParent(AObj: TMaskEdit; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetLeft(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure MaskEdit_SetLeft(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetTop(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure MaskEdit_SetTop(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetWidth(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure MaskEdit_SetWidth(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetHeight(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure MaskEdit_SetHeight(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetCursor(AObj: TMaskEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure MaskEdit_SetCursor(AObj: TMaskEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetHint(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure MaskEdit_SetHint(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetComponentCount(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function MaskEdit_GetComponentIndex(AObj: TMaskEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure MaskEdit_SetComponentIndex(AObj: TMaskEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetOwner(AObj: TMaskEdit): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function MaskEdit_GetName(AObj: TMaskEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure MaskEdit_SetName(AObj: TMaskEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetTag(AObj: TMaskEdit): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure MaskEdit_SetTag(AObj: TMaskEdit; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAnchorSideLeft(AObj: TMaskEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure MaskEdit_SetAnchorSideLeft(AObj: TMaskEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAnchorSideTop(AObj: TMaskEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure MaskEdit_SetAnchorSideTop(AObj: TMaskEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAnchorSideRight(AObj: TMaskEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure MaskEdit_SetAnchorSideRight(AObj: TMaskEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetAnchorSideBottom(AObj: TMaskEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure MaskEdit_SetAnchorSideBottom(AObj: TMaskEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetChildSizing(AObj: TMaskEdit): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure MaskEdit_SetChildSizing(AObj: TMaskEdit; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetBorderSpacing(AObj: TMaskEdit): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure MaskEdit_SetBorderSpacing(AObj: TMaskEdit; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function MaskEdit_GetDockClients(AObj: TMaskEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function MaskEdit_GetControls(AObj: TMaskEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function MaskEdit_GetComponents(AObj: TMaskEdit; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function MaskEdit_GetAnchorSide(AObj: TMaskEdit; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function MaskEdit_StaticClassType: TClass; extdecl;
begin
  Result := TMaskEdit;
end;

exports
  MaskEdit_Create,
  MaskEdit_Free,
  MaskEdit_ValidateEdit,
  MaskEdit_Clear,
  MaskEdit_GetTextLen,
  MaskEdit_ClearSelection,
  MaskEdit_CopyToClipboard,
  MaskEdit_CutToClipboard,
  MaskEdit_PasteFromClipboard,
  MaskEdit_Undo,
  MaskEdit_SelectAll,
  MaskEdit_CanFocus,
  MaskEdit_ContainsControl,
  MaskEdit_ControlAtPos,
  MaskEdit_DisableAlign,
  MaskEdit_EnableAlign,
  MaskEdit_FindChildControl,
  MaskEdit_FlipChildren,
  MaskEdit_Focused,
  MaskEdit_HandleAllocated,
  MaskEdit_InsertControl,
  MaskEdit_Invalidate,
  MaskEdit_PaintTo,
  MaskEdit_RemoveControl,
  MaskEdit_Realign,
  MaskEdit_Repaint,
  MaskEdit_ScaleBy,
  MaskEdit_ScrollBy,
  MaskEdit_SetBounds,
  MaskEdit_SetFocus,
  MaskEdit_Update,
  MaskEdit_BringToFront,
  MaskEdit_ClientToScreen,
  MaskEdit_ClientToParent,
  MaskEdit_Dragging,
  MaskEdit_HasParent,
  MaskEdit_Hide,
  MaskEdit_Perform,
  MaskEdit_Refresh,
  MaskEdit_ScreenToClient,
  MaskEdit_ParentToClient,
  MaskEdit_SendToBack,
  MaskEdit_Show,
  MaskEdit_GetTextBuf,
  MaskEdit_SetTextBuf,
  MaskEdit_FindComponent,
  MaskEdit_GetNamePath,
  MaskEdit_Assign,
  MaskEdit_ClassType,
  MaskEdit_ClassName,
  MaskEdit_InstanceSize,
  MaskEdit_InheritsFrom,
  MaskEdit_Equals,
  MaskEdit_GetHashCode,
  MaskEdit_ToString,
  MaskEdit_AnchorToNeighbour,
  MaskEdit_AnchorParallel,
  MaskEdit_AnchorHorizontalCenterTo,
  MaskEdit_AnchorVerticalCenterTo,
  MaskEdit_AnchorSame,
  MaskEdit_AnchorAsAlign,
  MaskEdit_AnchorClient,
  MaskEdit_ScaleDesignToForm,
  MaskEdit_ScaleFormToDesign,
  MaskEdit_Scale96ToForm,
  MaskEdit_ScaleFormTo96,
  MaskEdit_Scale96ToFont,
  MaskEdit_ScaleFontTo96,
  MaskEdit_ScaleScreenToFont,
  MaskEdit_ScaleFontToScreen,
  MaskEdit_Scale96ToScreen,
  MaskEdit_ScaleScreenTo96,
  MaskEdit_AutoAdjustLayout,
  MaskEdit_FixDesignFontsPPI,
  MaskEdit_ScaleFontsPPI,
  MaskEdit_GetAlign,
  MaskEdit_SetAlign,
  MaskEdit_GetAlignment,
  MaskEdit_SetAlignment,
  MaskEdit_GetAnchors,
  MaskEdit_SetAnchors,
  MaskEdit_GetAutoSelect,
  MaskEdit_SetAutoSelect,
  MaskEdit_GetAutoSize,
  MaskEdit_SetAutoSize,
  MaskEdit_GetBiDiMode,
  MaskEdit_SetBiDiMode,
  MaskEdit_GetBorderStyle,
  MaskEdit_SetBorderStyle,
  MaskEdit_GetCharCase,
  MaskEdit_SetCharCase,
  MaskEdit_GetColor,
  MaskEdit_SetColor,
  MaskEdit_GetConstraints,
  MaskEdit_SetConstraints,
  MaskEdit_GetDoubleBuffered,
  MaskEdit_SetDoubleBuffered,
  MaskEdit_GetDragCursor,
  MaskEdit_SetDragCursor,
  MaskEdit_GetDragKind,
  MaskEdit_SetDragKind,
  MaskEdit_GetDragMode,
  MaskEdit_SetDragMode,
  MaskEdit_GetEnabled,
  MaskEdit_SetEnabled,
  MaskEdit_GetFont,
  MaskEdit_SetFont,
  MaskEdit_GetMaxLength,
  MaskEdit_SetMaxLength,
  MaskEdit_GetParentColor,
  MaskEdit_SetParentColor,
  MaskEdit_GetParentDoubleBuffered,
  MaskEdit_SetParentDoubleBuffered,
  MaskEdit_GetParentFont,
  MaskEdit_SetParentFont,
  MaskEdit_GetParentShowHint,
  MaskEdit_SetParentShowHint,
  MaskEdit_GetPasswordChar,
  MaskEdit_SetPasswordChar,
  MaskEdit_GetPopupMenu,
  MaskEdit_SetPopupMenu,
  MaskEdit_GetReadOnly,
  MaskEdit_SetReadOnly,
  MaskEdit_GetShowHint,
  MaskEdit_SetShowHint,
  MaskEdit_GetTabOrder,
  MaskEdit_SetTabOrder,
  MaskEdit_GetTabStop,
  MaskEdit_SetTabStop,
  MaskEdit_GetText,
  MaskEdit_SetText,
  MaskEdit_GetTextHint,
  MaskEdit_SetTextHint,
  MaskEdit_GetVisible,
  MaskEdit_SetVisible,
  MaskEdit_SetOnChange,
  MaskEdit_SetOnClick,
  MaskEdit_SetOnDblClick,
  MaskEdit_SetOnDragDrop,
  MaskEdit_SetOnDragOver,
  MaskEdit_SetOnEndDock,
  MaskEdit_SetOnEndDrag,
  MaskEdit_SetOnEnter,
  MaskEdit_SetOnExit,
  MaskEdit_SetOnKeyDown,
  MaskEdit_SetOnKeyPress,
  MaskEdit_SetOnKeyUp,
  MaskEdit_SetOnMouseDown,
  MaskEdit_SetOnMouseEnter,
  MaskEdit_SetOnMouseLeave,
  MaskEdit_SetOnMouseMove,
  MaskEdit_SetOnMouseUp,
  MaskEdit_SetOnStartDock,
  MaskEdit_GetIsMasked,
  MaskEdit_GetEditText,
  MaskEdit_SetEditText,
  MaskEdit_GetCanUndo,
  MaskEdit_GetModified,
  MaskEdit_SetModified,
  MaskEdit_GetSelLength,
  MaskEdit_SetSelLength,
  MaskEdit_GetSelStart,
  MaskEdit_SetSelStart,
  MaskEdit_GetSelText,
  MaskEdit_SetSelText,
  MaskEdit_GetDockClientCount,
  MaskEdit_GetDockSite,
  MaskEdit_SetDockSite,
  MaskEdit_GetMouseInClient,
  MaskEdit_GetVisibleDockClientCount,
  MaskEdit_GetBrush,
  MaskEdit_GetControlCount,
  MaskEdit_GetHandle,
  MaskEdit_GetParentWindow,
  MaskEdit_SetParentWindow,
  MaskEdit_GetShowing,
  MaskEdit_GetUseDockManager,
  MaskEdit_SetUseDockManager,
  MaskEdit_GetAction,
  MaskEdit_SetAction,
  MaskEdit_GetBoundsRect,
  MaskEdit_SetBoundsRect,
  MaskEdit_GetClientHeight,
  MaskEdit_SetClientHeight,
  MaskEdit_GetClientOrigin,
  MaskEdit_GetClientRect,
  MaskEdit_GetClientWidth,
  MaskEdit_SetClientWidth,
  MaskEdit_GetControlState,
  MaskEdit_SetControlState,
  MaskEdit_GetControlStyle,
  MaskEdit_SetControlStyle,
  MaskEdit_GetFloating,
  MaskEdit_GetParent,
  MaskEdit_SetParent,
  MaskEdit_GetLeft,
  MaskEdit_SetLeft,
  MaskEdit_GetTop,
  MaskEdit_SetTop,
  MaskEdit_GetWidth,
  MaskEdit_SetWidth,
  MaskEdit_GetHeight,
  MaskEdit_SetHeight,
  MaskEdit_GetCursor,
  MaskEdit_SetCursor,
  MaskEdit_GetHint,
  MaskEdit_SetHint,
  MaskEdit_GetComponentCount,
  MaskEdit_GetComponentIndex,
  MaskEdit_SetComponentIndex,
  MaskEdit_GetOwner,
  MaskEdit_GetName,
  MaskEdit_SetName,
  MaskEdit_GetTag,
  MaskEdit_SetTag,
  MaskEdit_GetAnchorSideLeft,
  MaskEdit_SetAnchorSideLeft,
  MaskEdit_GetAnchorSideTop,
  MaskEdit_SetAnchorSideTop,
  MaskEdit_GetAnchorSideRight,
  MaskEdit_SetAnchorSideRight,
  MaskEdit_GetAnchorSideBottom,
  MaskEdit_SetAnchorSideBottom,
  MaskEdit_GetChildSizing,
  MaskEdit_SetChildSizing,
  MaskEdit_GetBorderSpacing,
  MaskEdit_SetBorderSpacing,
  MaskEdit_GetDockClients,
  MaskEdit_GetControls,
  MaskEdit_GetComponents,
  MaskEdit_GetAnchorSide,
  MaskEdit_StaticClassType;

