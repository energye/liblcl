
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function MainMenu_Create(AOwner: TComponent): TMainMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TMainMenu.Create(AOwner);
  handleExceptionEnd
end;

procedure MainMenu_Free(AObj: TMainMenu); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_FindComponent(AObj: TMainMenu; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_GetNamePath(AObj: TMainMenu): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_HasParent(AObj: TMainMenu): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure MainMenu_Assign(AObj: TMainMenu; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_ClassType(AObj: TMainMenu): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_ClassName(AObj: TMainMenu): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_InstanceSize(AObj: TMainMenu): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_InheritsFrom(AObj: TMainMenu; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_Equals(AObj: TMainMenu; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_GetHashCode(AObj: TMainMenu): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function MainMenu_ToString(AObj: TMainMenu): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function MainMenu_GetImagesWidth(AObj: TMainMenu): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImagesWidth;
  handleExceptionEnd
end;

procedure MainMenu_SetImagesWidth(AObj: TMainMenu; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImagesWidth := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TMenuDrawItemEvent
procedure MainMenu_SetOnDrawItem(AObj: TMainMenu; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMenuDrawItemEvent}
  {$DEFINE EventName := OnDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TMenuMeasureItemEvent
procedure MainMenu_SetOnMeasureItem(AObj: TMainMenu; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMenuMeasureItemEvent}
  {$DEFINE EventName := OnMeasureItem}
  EventMethodCode
end;

function MainMenu_GetBiDiMode(AObj: TMainMenu): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure MainMenu_SetBiDiMode(AObj: TMainMenu; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function MainMenu_GetImages(AObj: TMainMenu): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Images;
  handleExceptionEnd
end;

procedure MainMenu_SetImages(AObj: TMainMenu; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Images := AValue;
  handleExceptionEnd
end;

function MainMenu_GetOwnerDraw(AObj: TMainMenu): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.OwnerDraw;
  handleExceptionEnd
end;

procedure MainMenu_SetOwnerDraw(AObj: TMainMenu; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.OwnerDraw := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TMenuChangeEvent
procedure MainMenu_SetOnChange(AObj: TMainMenu; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMenuChangeEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function MainMenu_GetHandle(AObj: TMainMenu): HMENU; extdecl;
begin
{$ifdef UsehandleException}Result := HMENU(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function MainMenu_GetItems(AObj: TMainMenu): TMenuItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

function MainMenu_GetComponentCount(AObj: TMainMenu): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function MainMenu_GetComponentIndex(AObj: TMainMenu): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure MainMenu_SetComponentIndex(AObj: TMainMenu; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function MainMenu_GetOwner(AObj: TMainMenu): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function MainMenu_GetName(AObj: TMainMenu): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure MainMenu_SetName(AObj: TMainMenu; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function MainMenu_GetTag(AObj: TMainMenu): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure MainMenu_SetTag(AObj: TMainMenu; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function MainMenu_GetComponents(AObj: TMainMenu; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function MainMenu_StaticClassType: TClass; extdecl;
begin
  Result := TMainMenu;
end;

exports
  MainMenu_Create,
  MainMenu_Free,
  MainMenu_FindComponent,
  MainMenu_GetNamePath,
  MainMenu_HasParent,
  MainMenu_Assign,
  MainMenu_ClassType,
  MainMenu_ClassName,
  MainMenu_InstanceSize,
  MainMenu_InheritsFrom,
  MainMenu_Equals,
  MainMenu_GetHashCode,
  MainMenu_ToString,
  MainMenu_GetImagesWidth,
  MainMenu_SetImagesWidth,
  MainMenu_SetOnDrawItem,
  MainMenu_SetOnMeasureItem,
  MainMenu_GetBiDiMode,
  MainMenu_SetBiDiMode,
  MainMenu_GetImages,
  MainMenu_SetImages,
  MainMenu_GetOwnerDraw,
  MainMenu_SetOwnerDraw,
  MainMenu_SetOnChange,
  MainMenu_GetHandle,
  MainMenu_GetItems,
  MainMenu_GetComponentCount,
  MainMenu_GetComponentIndex,
  MainMenu_SetComponentIndex,
  MainMenu_GetOwner,
  MainMenu_GetName,
  MainMenu_SetName,
  MainMenu_GetTag,
  MainMenu_SetTag,
  MainMenu_GetComponents,
  MainMenu_StaticClassType;

