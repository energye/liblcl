
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function DragDockObject_Create(AOwner: TControl): TDragDockObject; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TDragDockObject.Create(AOwner);
  handleExceptionEnd
end;

procedure DragDockObject_Free(AObj: TDragDockObject); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DragDockObject_Assign(AObj: TDragDockObject; Source: TDragObject); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DragDockObject_HideDragImage(AObj: TDragDockObject); extdecl;
begin
  handleExceptionBegin
  AObj.HideDragImage;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DragDockObject_ShowDragImage(AObj: TDragDockObject); extdecl;
begin
  handleExceptionBegin
  AObj.ShowDragImage;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_ClassType(AObj: TDragDockObject): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_ClassName(AObj: TDragDockObject): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_InstanceSize(AObj: TDragDockObject): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_InheritsFrom(AObj: TDragDockObject; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_Equals(AObj: TDragDockObject; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_GetHashCode(AObj: TDragDockObject): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DragDockObject_ToString(AObj: TDragDockObject): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DragDockObject_GetDockRect(AObj: TDragDockObject; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DockRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DragDockObject_SetDockRect(AObj: TDragDockObject; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.DockRect := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetDropAlign(AObj: TDragDockObject): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.DropAlign;
  handleExceptionEnd
end;

function DragDockObject_GetDropOnControl(AObj: TDragDockObject): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DropOnControl;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DragDockObject_GetEraseDockRect(AObj: TDragDockObject; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.EraseDockRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DragDockObject_SetEraseDockRect(AObj: TDragDockObject; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.EraseDockRect := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetFloating(AObj: TDragDockObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

procedure DragDockObject_SetFloating(AObj: TDragDockObject; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Floating := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetControl(AObj: TDragDockObject): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Control;
  handleExceptionEnd
end;

procedure DragDockObject_SetControl(AObj: TDragDockObject; AValue: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.Control := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetAlwaysShowDragImages(AObj: TDragDockObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AlwaysShowDragImages;
  handleExceptionEnd
end;

procedure DragDockObject_SetAlwaysShowDragImages(AObj: TDragDockObject; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AlwaysShowDragImages := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DragDockObject_GetDragPos(AObj: TDragDockObject; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DragPos;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DragDockObject_SetDragPos(AObj: TDragDockObject; var AValue: TPoint); extdecl;
begin
  handleExceptionBegin
  AObj.DragPos := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetDragTarget(AObj: TDragDockObject): Pointer; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DragTarget;
  handleExceptionEnd
end;

procedure DragDockObject_SetDragTarget(AObj: TDragDockObject; AValue: Pointer); extdecl;
begin
  handleExceptionBegin
  AObj.DragTarget := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DragDockObject_GetDragTargetPos(AObj: TDragDockObject; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DragTargetPos;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DragDockObject_SetDragTargetPos(AObj: TDragDockObject; var AValue: TPoint); extdecl;
begin
  handleExceptionBegin
  AObj.DragTargetPos := AValue;
  handleExceptionEnd
end;

function DragDockObject_GetDropped(AObj: TDragDockObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dropped;
  handleExceptionEnd
end;

function DragDockObject_StaticClassType: TClass; extdecl;
begin
  Result := TDragDockObject;
end;

exports
  DragDockObject_Create,
  DragDockObject_Free,
  DragDockObject_Assign,
  DragDockObject_HideDragImage,
  DragDockObject_ShowDragImage,
  DragDockObject_ClassType,
  DragDockObject_ClassName,
  DragDockObject_InstanceSize,
  DragDockObject_InheritsFrom,
  DragDockObject_Equals,
  DragDockObject_GetHashCode,
  DragDockObject_ToString,
  DragDockObject_GetDockRect,
  DragDockObject_SetDockRect,
  DragDockObject_GetDropAlign,
  DragDockObject_GetDropOnControl,
  DragDockObject_GetEraseDockRect,
  DragDockObject_SetEraseDockRect,
  DragDockObject_GetFloating,
  DragDockObject_SetFloating,
  DragDockObject_GetControl,
  DragDockObject_SetControl,
  DragDockObject_GetAlwaysShowDragImages,
  DragDockObject_SetAlwaysShowDragImages,
  DragDockObject_GetDragPos,
  DragDockObject_SetDragPos,
  DragDockObject_GetDragTarget,
  DragDockObject_SetDragTarget,
  DragDockObject_GetDragTargetPos,
  DragDockObject_SetDragTargetPos,
  DragDockObject_GetDropped,
  DragDockObject_StaticClassType;

