
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ColorButton_Create(AOwner: TComponent): TColorButton; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TColorButton.Create(AOwner);
  handleExceptionEnd
end;

procedure ColorButton_Free(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Click(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Click;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_BringToFront(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ColorButton_ClientToScreen(AObj: TColorButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ColorButton_ClientToParent(AObj: TColorButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Dragging(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_HasParent(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Hide(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Invalidate(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Perform(AObj: TColorButton; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Refresh(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Repaint(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ColorButton_ScreenToClient(AObj: TColorButton; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ColorButton_ParentToClient(AObj: TColorButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_SendToBack(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_SetBounds(AObj: TColorButton; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Show(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Update(AObj: TColorButton); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_GetTextBuf(AObj: TColorButton; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_GetTextLen(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_SetTextBuf(AObj: TColorButton; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_FindComponent(AObj: TColorButton; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_GetNamePath(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_Assign(AObj: TColorButton; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ClassType(AObj: TColorButton): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ClassName(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_InstanceSize(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_InheritsFrom(AObj: TColorButton; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Equals(AObj: TColorButton; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_GetHashCode(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ToString(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorToNeighbour(AObj: TColorButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorParallel(AObj: TColorButton; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorHorizontalCenterTo(AObj: TColorButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorVerticalCenterTo(AObj: TColorButton; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorSame(AObj: TColorButton; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorAsAlign(AObj: TColorButton; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AnchorClient(AObj: TColorButton; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleDesignToForm(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleFormToDesign(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Scale96ToForm(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleFormTo96(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Scale96ToFont(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleFontTo96(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleScreenToFont(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleFontToScreen(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_Scale96ToScreen(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ColorButton_ScaleScreenTo96(AObj: TColorButton; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_AutoAdjustLayout(AObj: TColorButton; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ColorButton_FixDesignFontsPPI(AObj: TColorButton; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure ColorButton_ScaleFontsPPI(AObj: TColorButton; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function ColorButton_GetAction(AObj: TColorButton): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure ColorButton_SetAction(AObj: TColorButton; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAlign(AObj: TColorButton): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure ColorButton_SetAlign(AObj: TColorButton; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAnchors(AObj: TColorButton): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure ColorButton_SetAnchors(AObj: TColorButton; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAllowAllUp(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AllowAllUp;
  handleExceptionEnd
end;

procedure ColorButton_SetAllowAllUp(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AllowAllUp := AValue;
  handleExceptionEnd
end;

function ColorButton_GetBorderWidth(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure ColorButton_SetBorderWidth(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function ColorButton_GetButtonColorAutoSize(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonColorAutoSize;
  handleExceptionEnd
end;

procedure ColorButton_SetButtonColorAutoSize(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonColorAutoSize := AValue;
  handleExceptionEnd
end;

function ColorButton_GetButtonColorSize(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonColorSize;
  handleExceptionEnd
end;

procedure ColorButton_SetButtonColorSize(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonColorSize := AValue;
  handleExceptionEnd
end;

function ColorButton_GetButtonColor(AObj: TColorButton): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonColor;
  handleExceptionEnd
end;

procedure ColorButton_SetButtonColor(AObj: TColorButton; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonColor := AValue;
  handleExceptionEnd
end;

function ColorButton_GetColorDialog(AObj: TColorButton): TColorDialog; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ColorDialog;
  handleExceptionEnd
end;

procedure ColorButton_SetColorDialog(AObj: TColorButton; AValue: TColorDialog); extdecl;
begin
  handleExceptionBegin
  AObj.ColorDialog := AValue;
  handleExceptionEnd
end;

function ColorButton_GetConstraints(AObj: TColorButton): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure ColorButton_SetConstraints(AObj: TColorButton; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function ColorButton_GetCaption(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure ColorButton_SetCaption(AObj: TColorButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function ColorButton_GetColor(AObj: TColorButton): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure ColorButton_SetColor(AObj: TColorButton; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function ColorButton_GetDown(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Down;
  handleExceptionEnd
end;

procedure ColorButton_SetDown(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Down := AValue;
  handleExceptionEnd
end;

function ColorButton_GetEnabled(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure ColorButton_SetEnabled(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function ColorButton_GetFlat(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Flat;
  handleExceptionEnd
end;

procedure ColorButton_SetFlat(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Flat := AValue;
  handleExceptionEnd
end;

function ColorButton_GetFont(AObj: TColorButton): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure ColorButton_SetFont(AObj: TColorButton; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function ColorButton_GetGroupIndex(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GroupIndex;
  handleExceptionEnd
end;

procedure ColorButton_SetGroupIndex(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.GroupIndex := AValue;
  handleExceptionEnd
end;

function ColorButton_GetHint(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure ColorButton_SetHint(AObj: TColorButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function ColorButton_GetLayout(AObj: TColorButton): TButtonLayout; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TButtonLayout);{$endif}
  handleExceptionBegin
  Result :=  AObj.Layout;
  handleExceptionEnd
end;

procedure ColorButton_SetLayout(AObj: TColorButton; AValue: TButtonLayout); extdecl;
begin
  handleExceptionBegin
  AObj.Layout := AValue;
  handleExceptionEnd
end;

function ColorButton_GetSpacing(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Spacing;
  handleExceptionEnd
end;

procedure ColorButton_SetSpacing(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Spacing := AValue;
  handleExceptionEnd
end;

function ColorButton_GetTransparent(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Transparent;
  handleExceptionEnd
end;

procedure ColorButton_SetTransparent(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Transparent := AValue;
  handleExceptionEnd
end;

function ColorButton_GetVisible(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure ColorButton_SetVisible(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnClick(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnColorChanged(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnColorChanged}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnDblClick(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ColorButton_SetOnMouseDown(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnMouseEnter(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnMouseLeave(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure ColorButton_SetOnMouseMove(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ColorButton_SetOnMouseUp(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelEvent
procedure ColorButton_SetOnMouseWheel(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelEvent}
  {$DEFINE EventName := OnMouseWheel}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure ColorButton_SetOnMouseWheelDown(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure ColorButton_SetOnMouseWheelUp(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnPaint(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnPaint}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ColorButton_SetOnResize(AObj: TColorButton; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

function ColorButton_GetShowHint(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure ColorButton_SetShowHint(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function ColorButton_GetParentFont(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure ColorButton_SetParentFont(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function ColorButton_GetParentShowHint(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure ColorButton_SetParentShowHint(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function ColorButton_GetPopupMenu(AObj: TColorButton): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure ColorButton_SetPopupMenu(AObj: TColorButton; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function ColorButton_GetImageIndex(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndex;
  handleExceptionEnd
end;

procedure ColorButton_SetImageIndex(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndex := AValue;
  handleExceptionEnd
end;

function ColorButton_GetImages(AObj: TColorButton): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Images;
  handleExceptionEnd
end;

procedure ColorButton_SetImages(AObj: TColorButton; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Images := AValue;
  handleExceptionEnd
end;

function ColorButton_GetImageWidth(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageWidth;
  handleExceptionEnd
end;

procedure ColorButton_SetImageWidth(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImageWidth := AValue;
  handleExceptionEnd
end;

function ColorButton_GetShowCaption(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowCaption;
  handleExceptionEnd
end;

procedure ColorButton_SetShowCaption(AObj: TColorButton; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowCaption := AValue;
  handleExceptionEnd
end;

function ColorButton_GetBiDiMode(AObj: TColorButton): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure ColorButton_SetBiDiMode(AObj: TColorButton; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function ColorButton_GetGlyph(AObj: TColorButton): TBitmap; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Glyph;
  handleExceptionEnd
end;

procedure ColorButton_SetGlyph(AObj: TColorButton; AValue: TBitmap); extdecl;
begin
  handleExceptionBegin
  AObj.Glyph := AValue;
  handleExceptionEnd
end;

function ColorButton_GetNumGlyphs(AObj: TColorButton): TNumGlyphs; extdecl;
begin
{$ifdef UsehandleException}Result := TNumGlyphs(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.NumGlyphs;
  handleExceptionEnd
end;

procedure ColorButton_SetNumGlyphs(AObj: TColorButton; AValue: TNumGlyphs); extdecl;
begin
  handleExceptionBegin
  AObj.NumGlyphs := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ColorButton_GetBoundsRect(AObj: TColorButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure ColorButton_SetBoundsRect(AObj: TColorButton; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function ColorButton_GetClientHeight(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure ColorButton_SetClientHeight(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ColorButton_GetClientOrigin(AObj: TColorButton; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ColorButton_GetClientRect(AObj: TColorButton; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function ColorButton_GetClientWidth(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure ColorButton_SetClientWidth(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function ColorButton_GetControlState(AObj: TColorButton): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure ColorButton_SetControlState(AObj: TColorButton; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function ColorButton_GetControlStyle(AObj: TColorButton): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure ColorButton_SetControlStyle(AObj: TColorButton; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function ColorButton_GetFloating(AObj: TColorButton): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function ColorButton_GetParent(AObj: TColorButton): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure ColorButton_SetParent(AObj: TColorButton; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function ColorButton_GetLeft(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure ColorButton_SetLeft(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function ColorButton_GetTop(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure ColorButton_SetTop(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function ColorButton_GetWidth(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ColorButton_SetWidth(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ColorButton_GetHeight(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure ColorButton_SetHeight(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function ColorButton_GetCursor(AObj: TColorButton): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure ColorButton_SetCursor(AObj: TColorButton; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function ColorButton_GetComponentCount(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ColorButton_GetComponentIndex(AObj: TColorButton): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ColorButton_SetComponentIndex(AObj: TColorButton; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ColorButton_GetOwner(AObj: TColorButton): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ColorButton_GetName(AObj: TColorButton): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ColorButton_SetName(AObj: TColorButton; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ColorButton_GetTag(AObj: TColorButton): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ColorButton_SetTag(AObj: TColorButton; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAnchorSideLeft(AObj: TColorButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure ColorButton_SetAnchorSideLeft(AObj: TColorButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAnchorSideTop(AObj: TColorButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure ColorButton_SetAnchorSideTop(AObj: TColorButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAnchorSideRight(AObj: TColorButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure ColorButton_SetAnchorSideRight(AObj: TColorButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function ColorButton_GetAnchorSideBottom(AObj: TColorButton): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure ColorButton_SetAnchorSideBottom(AObj: TColorButton; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function ColorButton_GetBorderSpacing(AObj: TColorButton): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure ColorButton_SetBorderSpacing(AObj: TColorButton; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function ColorButton_GetComponents(AObj: TColorButton; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ColorButton_GetAnchorSide(AObj: TColorButton; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function ColorButton_StaticClassType: TClass; extdecl;
begin
  handleExceptionBegin
  Result := TColorButton;
  handleExceptionEnd
end;

exports
  ColorButton_Create,
  ColorButton_Free,
  ColorButton_Click,
  ColorButton_BringToFront,
  ColorButton_ClientToScreen,
  ColorButton_ClientToParent,
  ColorButton_Dragging,
  ColorButton_HasParent,
  ColorButton_Hide,
  ColorButton_Invalidate,
  ColorButton_Perform,
  ColorButton_Refresh,
  ColorButton_Repaint,
  ColorButton_ScreenToClient,
  ColorButton_ParentToClient,
  ColorButton_SendToBack,
  ColorButton_SetBounds,
  ColorButton_Show,
  ColorButton_Update,
  ColorButton_GetTextBuf,
  ColorButton_GetTextLen,
  ColorButton_SetTextBuf,
  ColorButton_FindComponent,
  ColorButton_GetNamePath,
  ColorButton_Assign,
  ColorButton_ClassType,
  ColorButton_ClassName,
  ColorButton_InstanceSize,
  ColorButton_InheritsFrom,
  ColorButton_Equals,
  ColorButton_GetHashCode,
  ColorButton_ToString,
  ColorButton_AnchorToNeighbour,
  ColorButton_AnchorParallel,
  ColorButton_AnchorHorizontalCenterTo,
  ColorButton_AnchorVerticalCenterTo,
  ColorButton_AnchorSame,
  ColorButton_AnchorAsAlign,
  ColorButton_AnchorClient,
  ColorButton_ScaleDesignToForm,
  ColorButton_ScaleFormToDesign,
  ColorButton_Scale96ToForm,
  ColorButton_ScaleFormTo96,
  ColorButton_Scale96ToFont,
  ColorButton_ScaleFontTo96,
  ColorButton_ScaleScreenToFont,
  ColorButton_ScaleFontToScreen,
  ColorButton_Scale96ToScreen,
  ColorButton_ScaleScreenTo96,
  ColorButton_AutoAdjustLayout,
  ColorButton_FixDesignFontsPPI,
  ColorButton_ScaleFontsPPI,
  ColorButton_GetAction,
  ColorButton_SetAction,
  ColorButton_GetAlign,
  ColorButton_SetAlign,
  ColorButton_GetAnchors,
  ColorButton_SetAnchors,
  ColorButton_GetAllowAllUp,
  ColorButton_SetAllowAllUp,
  ColorButton_GetBorderWidth,
  ColorButton_SetBorderWidth,
  ColorButton_GetButtonColorAutoSize,
  ColorButton_SetButtonColorAutoSize,
  ColorButton_GetButtonColorSize,
  ColorButton_SetButtonColorSize,
  ColorButton_GetButtonColor,
  ColorButton_SetButtonColor,
  ColorButton_GetColorDialog,
  ColorButton_SetColorDialog,
  ColorButton_GetConstraints,
  ColorButton_SetConstraints,
  ColorButton_GetCaption,
  ColorButton_SetCaption,
  ColorButton_GetColor,
  ColorButton_SetColor,
  ColorButton_GetDown,
  ColorButton_SetDown,
  ColorButton_GetEnabled,
  ColorButton_SetEnabled,
  ColorButton_GetFlat,
  ColorButton_SetFlat,
  ColorButton_GetFont,
  ColorButton_SetFont,
  ColorButton_GetGroupIndex,
  ColorButton_SetGroupIndex,
  ColorButton_GetHint,
  ColorButton_SetHint,
  ColorButton_GetLayout,
  ColorButton_SetLayout,
  ColorButton_GetSpacing,
  ColorButton_SetSpacing,
  ColorButton_GetTransparent,
  ColorButton_SetTransparent,
  ColorButton_GetVisible,
  ColorButton_SetVisible,
  ColorButton_SetOnClick,
  ColorButton_SetOnColorChanged,
  ColorButton_SetOnDblClick,
  ColorButton_SetOnMouseDown,
  ColorButton_SetOnMouseEnter,
  ColorButton_SetOnMouseLeave,
  ColorButton_SetOnMouseMove,
  ColorButton_SetOnMouseUp,
  ColorButton_SetOnMouseWheel,
  ColorButton_SetOnMouseWheelDown,
  ColorButton_SetOnMouseWheelUp,
  ColorButton_SetOnPaint,
  ColorButton_SetOnResize,
  ColorButton_GetShowHint,
  ColorButton_SetShowHint,
  ColorButton_GetParentFont,
  ColorButton_SetParentFont,
  ColorButton_GetParentShowHint,
  ColorButton_SetParentShowHint,
  ColorButton_GetPopupMenu,
  ColorButton_SetPopupMenu,
  ColorButton_GetImageIndex,
  ColorButton_SetImageIndex,
  ColorButton_GetImages,
  ColorButton_SetImages,
  ColorButton_GetImageWidth,
  ColorButton_SetImageWidth,
  ColorButton_GetShowCaption,
  ColorButton_SetShowCaption,
  ColorButton_GetBiDiMode,
  ColorButton_SetBiDiMode,
  ColorButton_GetGlyph,
  ColorButton_SetGlyph,
  ColorButton_GetNumGlyphs,
  ColorButton_SetNumGlyphs,
  ColorButton_GetBoundsRect,
  ColorButton_SetBoundsRect,
  ColorButton_GetClientHeight,
  ColorButton_SetClientHeight,
  ColorButton_GetClientOrigin,
  ColorButton_GetClientRect,
  ColorButton_GetClientWidth,
  ColorButton_SetClientWidth,
  ColorButton_GetControlState,
  ColorButton_SetControlState,
  ColorButton_GetControlStyle,
  ColorButton_SetControlStyle,
  ColorButton_GetFloating,
  ColorButton_GetParent,
  ColorButton_SetParent,
  ColorButton_GetLeft,
  ColorButton_SetLeft,
  ColorButton_GetTop,
  ColorButton_SetTop,
  ColorButton_GetWidth,
  ColorButton_SetWidth,
  ColorButton_GetHeight,
  ColorButton_SetHeight,
  ColorButton_GetCursor,
  ColorButton_SetCursor,
  ColorButton_GetComponentCount,
  ColorButton_GetComponentIndex,
  ColorButton_SetComponentIndex,
  ColorButton_GetOwner,
  ColorButton_GetName,
  ColorButton_SetName,
  ColorButton_GetTag,
  ColorButton_SetTag,
  ColorButton_GetAnchorSideLeft,
  ColorButton_SetAnchorSideLeft,
  ColorButton_GetAnchorSideTop,
  ColorButton_SetAnchorSideTop,
  ColorButton_GetAnchorSideRight,
  ColorButton_SetAnchorSideRight,
  ColorButton_GetAnchorSideBottom,
  ColorButton_SetAnchorSideBottom,
  ColorButton_GetBorderSpacing,
  ColorButton_SetBorderSpacing,
  ColorButton_GetComponents,
  ColorButton_GetAnchorSide,
  ColorButton_StaticClassType
;

