
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Edit_Create(AOwner: TComponent): TEdit; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TEdit.Create(AOwner);
  handleExceptionEnd
end;

procedure Edit_Free(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Clear(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_ClearSelection(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_CopyToClipboard(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CopyToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_CutToClipboard(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CutToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_PasteFromClipboard(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.PasteFromClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Undo(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Undo;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_SelectAll(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_CanFocus(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ContainsControl(AObj: TEdit; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function Edit_ControlAtPos(AObj: TEdit; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_DisableAlign(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_EnableAlign(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_FindChildControl(AObj: TEdit; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_FlipChildren(AObj: TEdit; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Focused(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_HandleAllocated(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_InsertControl(AObj: TEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Invalidate(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_PaintTo(AObj: TEdit; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_RemoveControl(AObj: TEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Realign(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Repaint(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_ScaleBy(AObj: TEdit; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_ScrollBy(AObj: TEdit; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_SetBounds(AObj: TEdit; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_SetFocus(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Update(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_BringToFront(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Edit_ClientToScreen(AObj: TEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Edit_ClientToParent(AObj: TEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Dragging(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_HasParent(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Hide(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Perform(AObj: TEdit; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Refresh(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Edit_ScreenToClient(AObj: TEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Edit_ParentToClient(AObj: TEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_SendToBack(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Show(AObj: TEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_GetTextBuf(AObj: TEdit; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_GetTextLen(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_SetTextBuf(AObj: TEdit; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_FindComponent(AObj: TEdit; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_GetNamePath(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_Assign(AObj: TEdit; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ClassType(AObj: TEdit): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ClassName(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_InstanceSize(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_InheritsFrom(AObj: TEdit; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Equals(AObj: TEdit; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_GetHashCode(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ToString(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorToNeighbour(AObj: TEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorParallel(AObj: TEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorHorizontalCenterTo(AObj: TEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorVerticalCenterTo(AObj: TEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorSame(AObj: TEdit; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorAsAlign(AObj: TEdit; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AnchorClient(AObj: TEdit; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleDesignToForm(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleFormToDesign(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Scale96ToForm(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleFormTo96(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Scale96ToFont(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleFontTo96(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleScreenToFont(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleFontToScreen(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_Scale96ToScreen(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Edit_ScaleScreenTo96(AObj: TEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_AutoAdjustLayout(AObj: TEdit; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Edit_FixDesignFontsPPI(AObj: TEdit; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure Edit_ScaleFontsPPI(AObj: TEdit; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function Edit_GetAlign(AObj: TEdit): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure Edit_SetAlign(AObj: TEdit; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function Edit_GetAlignment(AObj: TEdit): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure Edit_SetAlignment(AObj: TEdit; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function Edit_GetAnchors(AObj: TEdit): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure Edit_SetAnchors(AObj: TEdit; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function Edit_GetAutoSelect(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelect;
  handleExceptionEnd
end;

procedure Edit_SetAutoSelect(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelect := AValue;
  handleExceptionEnd
end;

function Edit_GetAutoSize(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure Edit_SetAutoSize(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function Edit_GetBiDiMode(AObj: TEdit): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Edit_SetBiDiMode(AObj: TEdit; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function Edit_GetBorderStyle(AObj: TEdit): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure Edit_SetBorderStyle(AObj: TEdit; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function Edit_GetCharCase(AObj: TEdit): TEditCharCase; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TEditCharCase);{$endif}
  handleExceptionBegin
  Result :=  AObj.CharCase;
  handleExceptionEnd
end;

procedure Edit_SetCharCase(AObj: TEdit; AValue: TEditCharCase); extdecl;
begin
  handleExceptionBegin
  AObj.CharCase := AValue;
  handleExceptionEnd
end;

function Edit_GetColor(AObj: TEdit): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure Edit_SetColor(AObj: TEdit; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function Edit_GetConstraints(AObj: TEdit): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure Edit_SetConstraints(AObj: TEdit; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function Edit_GetDoubleBuffered(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure Edit_SetDoubleBuffered(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function Edit_GetDragCursor(AObj: TEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure Edit_SetDragCursor(AObj: TEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function Edit_GetDragKind(AObj: TEdit): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure Edit_SetDragKind(AObj: TEdit; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function Edit_GetDragMode(AObj: TEdit): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure Edit_SetDragMode(AObj: TEdit; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function Edit_GetEnabled(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Edit_SetEnabled(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Edit_GetFont(AObj: TEdit): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure Edit_SetFont(AObj: TEdit; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function Edit_GetHideSelection(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HideSelection;
  handleExceptionEnd
end;

procedure Edit_SetHideSelection(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HideSelection := AValue;
  handleExceptionEnd
end;

function Edit_GetMaxLength(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxLength;
  handleExceptionEnd
end;

procedure Edit_SetMaxLength(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxLength := AValue;
  handleExceptionEnd
end;

function Edit_GetNumbersOnly(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.NumbersOnly;
  handleExceptionEnd
end;

procedure Edit_SetNumbersOnly(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.NumbersOnly := AValue;
  handleExceptionEnd
end;

function Edit_GetParentColor(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure Edit_SetParentColor(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function Edit_GetParentDoubleBuffered(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure Edit_SetParentDoubleBuffered(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function Edit_GetParentFont(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure Edit_SetParentFont(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function Edit_GetParentShowHint(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure Edit_SetParentShowHint(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function Edit_GetPasswordChar(AObj: TEdit): Char; extdecl;
begin
{$ifdef UsehandleException}Result := #0;{$endif}
  handleExceptionBegin
  Result :=  AObj.PasswordChar;
  handleExceptionEnd
end;

procedure Edit_SetPasswordChar(AObj: TEdit; AValue: Char); extdecl;
begin
  handleExceptionBegin
  AObj.PasswordChar := AValue;
  handleExceptionEnd
end;

function Edit_GetPopupMenu(AObj: TEdit): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure Edit_SetPopupMenu(AObj: TEdit; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function Edit_GetReadOnly(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure Edit_SetReadOnly(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function Edit_GetShowHint(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Edit_SetShowHint(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Edit_GetTabOrder(AObj: TEdit): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure Edit_SetTabOrder(AObj: TEdit; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function Edit_GetTabStop(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure Edit_SetTabStop(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function Edit_GetText(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure Edit_SetText(AObj: TEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function Edit_GetTextHint(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure Edit_SetTextHint(AObj: TEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function Edit_GetVisible(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Edit_SetVisible(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnChange(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnClick(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure Edit_SetOnContextPopup(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnDblClick(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure Edit_SetOnDragDrop(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure Edit_SetOnDragOver(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure Edit_SetOnEndDrag(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnEnter(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnExit(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Edit_SetOnKeyDown(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure Edit_SetOnKeyPress(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure Edit_SetOnKeyUp(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Edit_SetOnMouseDown(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnMouseEnter(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Edit_SetOnMouseLeave(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure Edit_SetOnMouseMove(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Edit_SetOnMouseUp(AObj: TEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

function Edit_GetCanUndo(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanUndo;
  handleExceptionEnd
end;

function Edit_GetModified(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure Edit_SetModified(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function Edit_GetSelLength(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure Edit_SetSelLength(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function Edit_GetSelStart(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure Edit_SetSelStart(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function Edit_GetSelText(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure Edit_SetSelText(AObj: TEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function Edit_GetDockClientCount(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function Edit_GetDockSite(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure Edit_SetDockSite(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function Edit_GetMouseInClient(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function Edit_GetVisibleDockClientCount(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function Edit_GetBrush(AObj: TEdit): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function Edit_GetControlCount(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function Edit_GetHandle(AObj: TEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function Edit_GetParentWindow(AObj: TEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure Edit_SetParentWindow(AObj: TEdit; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function Edit_GetShowing(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function Edit_GetUseDockManager(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure Edit_SetUseDockManager(AObj: TEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function Edit_GetAction(AObj: TEdit): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure Edit_SetAction(AObj: TEdit; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Edit_GetBoundsRect(AObj: TEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure Edit_SetBoundsRect(AObj: TEdit; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function Edit_GetClientHeight(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure Edit_SetClientHeight(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Edit_GetClientOrigin(AObj: TEdit; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Edit_GetClientRect(AObj: TEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function Edit_GetClientWidth(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure Edit_SetClientWidth(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function Edit_GetControlState(AObj: TEdit): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure Edit_SetControlState(AObj: TEdit; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function Edit_GetControlStyle(AObj: TEdit): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure Edit_SetControlStyle(AObj: TEdit; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function Edit_GetFloating(AObj: TEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function Edit_GetParent(AObj: TEdit): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure Edit_SetParent(AObj: TEdit; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function Edit_GetLeft(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure Edit_SetLeft(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function Edit_GetTop(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure Edit_SetTop(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function Edit_GetWidth(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure Edit_SetWidth(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function Edit_GetHeight(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Edit_SetHeight(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Edit_GetCursor(AObj: TEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure Edit_SetCursor(AObj: TEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function Edit_GetHint(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Edit_SetHint(AObj: TEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Edit_GetComponentCount(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Edit_GetComponentIndex(AObj: TEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Edit_SetComponentIndex(AObj: TEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Edit_GetOwner(AObj: TEdit): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Edit_GetName(AObj: TEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Edit_SetName(AObj: TEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Edit_GetTag(AObj: TEdit): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Edit_SetTag(AObj: TEdit; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Edit_GetAnchorSideLeft(AObj: TEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure Edit_SetAnchorSideLeft(AObj: TEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function Edit_GetAnchorSideTop(AObj: TEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure Edit_SetAnchorSideTop(AObj: TEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function Edit_GetAnchorSideRight(AObj: TEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure Edit_SetAnchorSideRight(AObj: TEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function Edit_GetAnchorSideBottom(AObj: TEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure Edit_SetAnchorSideBottom(AObj: TEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function Edit_GetChildSizing(AObj: TEdit): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure Edit_SetChildSizing(AObj: TEdit; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function Edit_GetBorderSpacing(AObj: TEdit): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure Edit_SetBorderSpacing(AObj: TEdit; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function Edit_GetDockClients(AObj: TEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function Edit_GetControls(AObj: TEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function Edit_GetComponents(AObj: TEdit; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Edit_GetAnchorSide(AObj: TEdit; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function Edit_StaticClassType: TClass; extdecl;
begin
  Result := TEdit;
end;

exports
  Edit_Create,
  Edit_Free,
  Edit_Clear,
  Edit_ClearSelection,
  Edit_CopyToClipboard,
  Edit_CutToClipboard,
  Edit_PasteFromClipboard,
  Edit_Undo,
  Edit_SelectAll,
  Edit_CanFocus,
  Edit_ContainsControl,
  Edit_ControlAtPos,
  Edit_DisableAlign,
  Edit_EnableAlign,
  Edit_FindChildControl,
  Edit_FlipChildren,
  Edit_Focused,
  Edit_HandleAllocated,
  Edit_InsertControl,
  Edit_Invalidate,
  Edit_PaintTo,
  Edit_RemoveControl,
  Edit_Realign,
  Edit_Repaint,
  Edit_ScaleBy,
  Edit_ScrollBy,
  Edit_SetBounds,
  Edit_SetFocus,
  Edit_Update,
  Edit_BringToFront,
  Edit_ClientToScreen,
  Edit_ClientToParent,
  Edit_Dragging,
  Edit_HasParent,
  Edit_Hide,
  Edit_Perform,
  Edit_Refresh,
  Edit_ScreenToClient,
  Edit_ParentToClient,
  Edit_SendToBack,
  Edit_Show,
  Edit_GetTextBuf,
  Edit_GetTextLen,
  Edit_SetTextBuf,
  Edit_FindComponent,
  Edit_GetNamePath,
  Edit_Assign,
  Edit_ClassType,
  Edit_ClassName,
  Edit_InstanceSize,
  Edit_InheritsFrom,
  Edit_Equals,
  Edit_GetHashCode,
  Edit_ToString,
  Edit_AnchorToNeighbour,
  Edit_AnchorParallel,
  Edit_AnchorHorizontalCenterTo,
  Edit_AnchorVerticalCenterTo,
  Edit_AnchorSame,
  Edit_AnchorAsAlign,
  Edit_AnchorClient,
  Edit_ScaleDesignToForm,
  Edit_ScaleFormToDesign,
  Edit_Scale96ToForm,
  Edit_ScaleFormTo96,
  Edit_Scale96ToFont,
  Edit_ScaleFontTo96,
  Edit_ScaleScreenToFont,
  Edit_ScaleFontToScreen,
  Edit_Scale96ToScreen,
  Edit_ScaleScreenTo96,
  Edit_AutoAdjustLayout,
  Edit_FixDesignFontsPPI,
  Edit_ScaleFontsPPI,
  Edit_GetAlign,
  Edit_SetAlign,
  Edit_GetAlignment,
  Edit_SetAlignment,
  Edit_GetAnchors,
  Edit_SetAnchors,
  Edit_GetAutoSelect,
  Edit_SetAutoSelect,
  Edit_GetAutoSize,
  Edit_SetAutoSize,
  Edit_GetBiDiMode,
  Edit_SetBiDiMode,
  Edit_GetBorderStyle,
  Edit_SetBorderStyle,
  Edit_GetCharCase,
  Edit_SetCharCase,
  Edit_GetColor,
  Edit_SetColor,
  Edit_GetConstraints,
  Edit_SetConstraints,
  Edit_GetDoubleBuffered,
  Edit_SetDoubleBuffered,
  Edit_GetDragCursor,
  Edit_SetDragCursor,
  Edit_GetDragKind,
  Edit_SetDragKind,
  Edit_GetDragMode,
  Edit_SetDragMode,
  Edit_GetEnabled,
  Edit_SetEnabled,
  Edit_GetFont,
  Edit_SetFont,
  Edit_GetHideSelection,
  Edit_SetHideSelection,
  Edit_GetMaxLength,
  Edit_SetMaxLength,
  Edit_GetNumbersOnly,
  Edit_SetNumbersOnly,
  Edit_GetParentColor,
  Edit_SetParentColor,
  Edit_GetParentDoubleBuffered,
  Edit_SetParentDoubleBuffered,
  Edit_GetParentFont,
  Edit_SetParentFont,
  Edit_GetParentShowHint,
  Edit_SetParentShowHint,
  Edit_GetPasswordChar,
  Edit_SetPasswordChar,
  Edit_GetPopupMenu,
  Edit_SetPopupMenu,
  Edit_GetReadOnly,
  Edit_SetReadOnly,
  Edit_GetShowHint,
  Edit_SetShowHint,
  Edit_GetTabOrder,
  Edit_SetTabOrder,
  Edit_GetTabStop,
  Edit_SetTabStop,
  Edit_GetText,
  Edit_SetText,
  Edit_GetTextHint,
  Edit_SetTextHint,
  Edit_GetVisible,
  Edit_SetVisible,
  Edit_SetOnChange,
  Edit_SetOnClick,
  Edit_SetOnContextPopup,
  Edit_SetOnDblClick,
  Edit_SetOnDragDrop,
  Edit_SetOnDragOver,
  Edit_SetOnEndDrag,
  Edit_SetOnEnter,
  Edit_SetOnExit,
  Edit_SetOnKeyDown,
  Edit_SetOnKeyPress,
  Edit_SetOnKeyUp,
  Edit_SetOnMouseDown,
  Edit_SetOnMouseEnter,
  Edit_SetOnMouseLeave,
  Edit_SetOnMouseMove,
  Edit_SetOnMouseUp,
  Edit_GetCanUndo,
  Edit_GetModified,
  Edit_SetModified,
  Edit_GetSelLength,
  Edit_SetSelLength,
  Edit_GetSelStart,
  Edit_SetSelStart,
  Edit_GetSelText,
  Edit_SetSelText,
  Edit_GetDockClientCount,
  Edit_GetDockSite,
  Edit_SetDockSite,
  Edit_GetMouseInClient,
  Edit_GetVisibleDockClientCount,
  Edit_GetBrush,
  Edit_GetControlCount,
  Edit_GetHandle,
  Edit_GetParentWindow,
  Edit_SetParentWindow,
  Edit_GetShowing,
  Edit_GetUseDockManager,
  Edit_SetUseDockManager,
  Edit_GetAction,
  Edit_SetAction,
  Edit_GetBoundsRect,
  Edit_SetBoundsRect,
  Edit_GetClientHeight,
  Edit_SetClientHeight,
  Edit_GetClientOrigin,
  Edit_GetClientRect,
  Edit_GetClientWidth,
  Edit_SetClientWidth,
  Edit_GetControlState,
  Edit_SetControlState,
  Edit_GetControlStyle,
  Edit_SetControlStyle,
  Edit_GetFloating,
  Edit_GetParent,
  Edit_SetParent,
  Edit_GetLeft,
  Edit_SetLeft,
  Edit_GetTop,
  Edit_SetTop,
  Edit_GetWidth,
  Edit_SetWidth,
  Edit_GetHeight,
  Edit_SetHeight,
  Edit_GetCursor,
  Edit_SetCursor,
  Edit_GetHint,
  Edit_SetHint,
  Edit_GetComponentCount,
  Edit_GetComponentIndex,
  Edit_SetComponentIndex,
  Edit_GetOwner,
  Edit_GetName,
  Edit_SetName,
  Edit_GetTag,
  Edit_SetTag,
  Edit_GetAnchorSideLeft,
  Edit_SetAnchorSideLeft,
  Edit_GetAnchorSideTop,
  Edit_SetAnchorSideTop,
  Edit_GetAnchorSideRight,
  Edit_SetAnchorSideRight,
  Edit_GetAnchorSideBottom,
  Edit_SetAnchorSideBottom,
  Edit_GetChildSizing,
  Edit_SetChildSizing,
  Edit_GetBorderSpacing,
  Edit_SetBorderSpacing,
  Edit_GetDockClients,
  Edit_GetControls,
  Edit_GetComponents,
  Edit_GetAnchorSide,
  Edit_StaticClassType;

