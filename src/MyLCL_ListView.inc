
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function ListView_Create(AOwner: TComponent): TListView; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TListView.Create(AOwner);
  handleExceptionEnd
end;

procedure ListView_Free(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AddItem(AObj: TListView; Item: PChar; AObject: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.AddItem(Item, AObject);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_AlphaSort(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AlphaSort;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Clear(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_ClearSelection(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_DeleteSelected(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteSelected;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetHitTestInfoAt(AObj: TListView; X: Integer; Y: Integer): THitTests; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHitTestInfoAt(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetItemAt(AObj: TListView; X: Integer; Y: Integer): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetItemAt(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function ListView_GetNearestItem(AObj: TListView; var Point: TPoint; Direction: TSearchDirection): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetNearestItem(Point, Direction);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetNextItem(AObj: TListView; StartItem: TListItem; Direction: TSearchDirection; States: TListItemStates): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.GetNextItem(StartItem, Direction, States);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_IsEditing(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsEditing;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_SelectAll(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_CustomSort(AObj: TListView; SortProc: PFNLVCOMPARE; lParam: NativeInt): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CustomSort(SortProc, lParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_CanFocus(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ContainsControl(AObj: TListView; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function ListView_ControlAtPos(AObj: TListView; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_DisableAlign(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_EnableAlign(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_FindChildControl(AObj: TListView; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_FlipChildren(AObj: TListView; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Focused(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_HandleAllocated(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_InsertControl(AObj: TListView; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Invalidate(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_PaintTo(AObj: TListView; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_RemoveControl(AObj: TListView; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Realign(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Repaint(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_ScaleBy(AObj: TListView; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_ScrollBy(AObj: TListView; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_SetBounds(AObj: TListView; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_SetFocus(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Update(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_BringToFront(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListView_ClientToScreen(AObj: TListView; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListView_ClientToParent(AObj: TListView; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Dragging(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_HasParent(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Hide(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Perform(AObj: TListView; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Refresh(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListView_ScreenToClient(AObj: TListView; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure ListView_ParentToClient(AObj: TListView; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_SendToBack(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Show(AObj: TListView); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetTextBuf(AObj: TListView; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetTextLen(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_SetTextBuf(AObj: TListView; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_FindComponent(AObj: TListView; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetNamePath(AObj: TListView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_Assign(AObj: TListView; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ClassType(AObj: TListView): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ClassName(AObj: TListView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_InstanceSize(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_InheritsFrom(AObj: TListView; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Equals(AObj: TListView; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_GetHashCode(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ToString(AObj: TListView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorToNeighbour(AObj: TListView; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorParallel(AObj: TListView; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorHorizontalCenterTo(AObj: TListView; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorVerticalCenterTo(AObj: TListView; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorSame(AObj: TListView; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorAsAlign(AObj: TListView; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AnchorClient(AObj: TListView; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleDesignToForm(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleFormToDesign(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Scale96ToForm(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleFormTo96(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Scale96ToFont(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleFontTo96(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleScreenToFont(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleFontToScreen(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_Scale96ToScreen(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function ListView_ScaleScreenTo96(AObj: TListView; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_AutoAdjustLayout(AObj: TListView; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure ListView_FixDesignFontsPPI(AObj: TListView; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure ListView_ScaleFontsPPI(AObj: TListView; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function ListView_GetAutoSort(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSort;
  handleExceptionEnd
end;

procedure ListView_SetAutoSort(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSort := AValue;
  handleExceptionEnd
end;

function ListView_GetAutoSortIndicator(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSortIndicator;
  handleExceptionEnd
end;

procedure ListView_SetAutoSortIndicator(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSortIndicator := AValue;
  handleExceptionEnd
end;

function ListView_GetAutoWidthLastColumn(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoWidthLastColumn;
  handleExceptionEnd
end;

procedure ListView_SetAutoWidthLastColumn(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoWidthLastColumn := AValue;
  handleExceptionEnd
end;

function ListView_GetSmallImagesWidth(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SmallImagesWidth;
  handleExceptionEnd
end;

procedure ListView_SetSmallImagesWidth(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SmallImagesWidth := AValue;
  handleExceptionEnd
end;

function ListView_GetSortColumn(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortColumn;
  handleExceptionEnd
end;

procedure ListView_SetSortColumn(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SortColumn := AValue;
  handleExceptionEnd
end;

function ListView_GetSortDirection(AObj: TListView): TSortDirection; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TSortDirection);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortDirection;
  handleExceptionEnd
end;

procedure ListView_SetSortDirection(AObj: TListView; AValue: TSortDirection); extdecl;
begin
  handleExceptionBegin
  AObj.SortDirection := AValue;
  handleExceptionEnd
end;

function ListView_GetLargeImagesWidth(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.LargeImagesWidth;
  handleExceptionEnd
end;

procedure ListView_SetLargeImagesWidth(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.LargeImagesWidth := AValue;
  handleExceptionEnd
end;

function ListView_GetStateImagesWidth(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.StateImagesWidth;
  handleExceptionEnd
end;

procedure ListView_SetStateImagesWidth(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.StateImagesWidth := AValue;
  handleExceptionEnd
end;

function ListView_GetToolTips(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ToolTips;
  handleExceptionEnd
end;

procedure ListView_SetToolTips(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ToolTips := AValue;
  handleExceptionEnd
end;

function ListView_GetScrollBars(AObj: TListView): TScrollStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TScrollStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScrollBars;
  handleExceptionEnd
end;

procedure ListView_SetScrollBars(AObj: TListView; AValue: TScrollStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBars := AValue;
  handleExceptionEnd
end;

function ListView_GetColumnCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ColumnCount;
  handleExceptionEnd
end;

function ListView_GetAction(AObj: TListView): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure ListView_SetAction(AObj: TListView; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function ListView_GetAlign(AObj: TListView): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure ListView_SetAlign(AObj: TListView; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function ListView_GetAllocBy(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AllocBy;
  handleExceptionEnd
end;

procedure ListView_SetAllocBy(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AllocBy := AValue;
  handleExceptionEnd
end;

function ListView_GetAnchors(AObj: TListView): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure ListView_SetAnchors(AObj: TListView; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function ListView_GetBiDiMode(AObj: TListView): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure ListView_SetBiDiMode(AObj: TListView; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function ListView_GetBorderStyle(AObj: TListView): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure ListView_SetBorderStyle(AObj: TListView; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function ListView_GetBorderWidth(AObj: TListView): TBorderWidth; extdecl;
begin
{$ifdef UsehandleException}Result := TBorderWidth(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderWidth;
  handleExceptionEnd
end;

procedure ListView_SetBorderWidth(AObj: TListView; AValue: TBorderWidth); extdecl;
begin
  handleExceptionBegin
  AObj.BorderWidth := AValue;
  handleExceptionEnd
end;

function ListView_GetCheckboxes(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Checkboxes;
  handleExceptionEnd
end;

procedure ListView_SetCheckboxes(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Checkboxes := AValue;
  handleExceptionEnd
end;

function ListView_GetColor(AObj: TListView): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure ListView_SetColor(AObj: TListView; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function ListView_GetColumns(AObj: TListView): TListColumns; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Columns;
  handleExceptionEnd
end;

procedure ListView_SetColumns(AObj: TListView; AValue: TListColumns); extdecl;
begin
  handleExceptionBegin
  AObj.Columns := AValue;
  handleExceptionEnd
end;

function ListView_GetColumnClick(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ColumnClick;
  handleExceptionEnd
end;

procedure ListView_SetColumnClick(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ColumnClick := AValue;
  handleExceptionEnd
end;

function ListView_GetConstraints(AObj: TListView): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure ListView_SetConstraints(AObj: TListView; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function ListView_GetDoubleBuffered(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure ListView_SetDoubleBuffered(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function ListView_GetDragCursor(AObj: TListView): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure ListView_SetDragCursor(AObj: TListView; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function ListView_GetDragKind(AObj: TListView): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure ListView_SetDragKind(AObj: TListView; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function ListView_GetDragMode(AObj: TListView): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure ListView_SetDragMode(AObj: TListView; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function ListView_GetEnabled(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure ListView_SetEnabled(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function ListView_GetFont(AObj: TListView): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure ListView_SetFont(AObj: TListView; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function ListView_GetFlatScrollBars(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FlatScrollBars;
  handleExceptionEnd
end;

procedure ListView_SetFlatScrollBars(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlatScrollBars := AValue;
  handleExceptionEnd
end;

function ListView_GetFullDrag(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FullDrag;
  handleExceptionEnd
end;

procedure ListView_SetFullDrag(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FullDrag := AValue;
  handleExceptionEnd
end;

function ListView_GetGridLines(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.GridLines;
  handleExceptionEnd
end;

procedure ListView_SetGridLines(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.GridLines := AValue;
  handleExceptionEnd
end;

function ListView_GetHideSelection(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HideSelection;
  handleExceptionEnd
end;

procedure ListView_SetHideSelection(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HideSelection := AValue;
  handleExceptionEnd
end;

function ListView_GetHotTrack(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HotTrack;
  handleExceptionEnd
end;

procedure ListView_SetHotTrack(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HotTrack := AValue;
  handleExceptionEnd
end;

function ListView_GetIconOptions(AObj: TListView): TIconOptions; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.IconOptions;
  handleExceptionEnd
end;

procedure ListView_SetIconOptions(AObj: TListView; AValue: TIconOptions); extdecl;
begin
  handleExceptionBegin
  AObj.IconOptions := AValue;
  handleExceptionEnd
end;

function ListView_GetItems(AObj: TListView): TListItems; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

procedure ListView_SetItems(AObj: TListView; AValue: TListItems); extdecl;
begin
  handleExceptionBegin
  AObj.Items := AValue;
  handleExceptionEnd
end;

function ListView_GetLargeImages(AObj: TListView): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.LargeImages;
  handleExceptionEnd
end;

procedure ListView_SetLargeImages(AObj: TListView; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.LargeImages := AValue;
  handleExceptionEnd
end;

function ListView_GetMultiSelect(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MultiSelect;
  handleExceptionEnd
end;

procedure ListView_SetMultiSelect(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.MultiSelect := AValue;
  handleExceptionEnd
end;

function ListView_GetOwnerData(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.OwnerData;
  handleExceptionEnd
end;

procedure ListView_SetOwnerData(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.OwnerData := AValue;
  handleExceptionEnd
end;

function ListView_GetOwnerDraw(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.OwnerDraw;
  handleExceptionEnd
end;

procedure ListView_SetOwnerDraw(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.OwnerDraw := AValue;
  handleExceptionEnd
end;

function ListView_GetReadOnly(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure ListView_SetReadOnly(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function ListView_GetRowSelect(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.RowSelect;
  handleExceptionEnd
end;

procedure ListView_SetRowSelect(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.RowSelect := AValue;
  handleExceptionEnd
end;

function ListView_GetParentColor(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure ListView_SetParentColor(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function ListView_GetParentDoubleBuffered(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure ListView_SetParentDoubleBuffered(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function ListView_GetParentFont(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure ListView_SetParentFont(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function ListView_GetParentShowHint(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure ListView_SetParentShowHint(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function ListView_GetPopupMenu(AObj: TListView): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure ListView_SetPopupMenu(AObj: TListView; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function ListView_GetShowColumnHeaders(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowColumnHeaders;
  handleExceptionEnd
end;

procedure ListView_SetShowColumnHeaders(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowColumnHeaders := AValue;
  handleExceptionEnd
end;

function ListView_GetShowHint(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure ListView_SetShowHint(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function ListView_GetSmallImages(AObj: TListView): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.SmallImages;
  handleExceptionEnd
end;

procedure ListView_SetSmallImages(AObj: TListView; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.SmallImages := AValue;
  handleExceptionEnd
end;

function ListView_GetSortType(AObj: TListView): TSortType; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TSortType);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortType;
  handleExceptionEnd
end;

procedure ListView_SetSortType(AObj: TListView; AValue: TSortType); extdecl;
begin
  handleExceptionBegin
  AObj.SortType := AValue;
  handleExceptionEnd
end;

function ListView_GetStateImages(AObj: TListView): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.StateImages;
  handleExceptionEnd
end;

procedure ListView_SetStateImages(AObj: TListView; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.StateImages := AValue;
  handleExceptionEnd
end;

function ListView_GetTabOrder(AObj: TListView): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure ListView_SetTabOrder(AObj: TListView; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function ListView_GetTabStop(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure ListView_SetTabStop(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function ListView_GetViewStyle(AObj: TListView): TViewStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TViewStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ViewStyle;
  handleExceptionEnd
end;

procedure ListView_SetViewStyle(AObj: TListView; AValue: TViewStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ViewStyle := AValue;
  handleExceptionEnd
end;

function ListView_GetVisible(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure ListView_SetVisible(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TLVAdvancedCustomDrawEvent
procedure ListView_SetOnAdvancedCustomDraw(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVAdvancedCustomDrawEvent}
  {$DEFINE EventName := OnAdvancedCustomDraw}
  EventMethodCode
end;

//EVENT_TYPE:TLVAdvancedCustomDrawItemEvent
procedure ListView_SetOnAdvancedCustomDrawItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVAdvancedCustomDrawItemEvent}
  {$DEFINE EventName := OnAdvancedCustomDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVAdvancedCustomDrawSubItemEvent
procedure ListView_SetOnAdvancedCustomDrawSubItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVAdvancedCustomDrawSubItemEvent}
  {$DEFINE EventName := OnAdvancedCustomDrawSubItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVChangeEvent
procedure ListView_SetOnChange(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVChangeEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnClick(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TLVColumnClickEvent
procedure ListView_SetOnColumnClick(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVColumnClickEvent}
  {$DEFINE EventName := OnColumnClick}
  EventMethodCode
end;

//EVENT_TYPE:TLVCompareEvent
procedure ListView_SetOnCompare(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVCompareEvent}
  {$DEFINE EventName := OnCompare}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure ListView_SetOnContextPopup(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TLVCustomDrawEvent
procedure ListView_SetOnCustomDraw(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVCustomDrawEvent}
  {$DEFINE EventName := OnCustomDraw}
  EventMethodCode
end;

//EVENT_TYPE:TLVCustomDrawItemEvent
procedure ListView_SetOnCustomDrawItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVCustomDrawItemEvent}
  {$DEFINE EventName := OnCustomDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVCustomDrawSubItemEvent
procedure ListView_SetOnCustomDrawSubItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVCustomDrawSubItemEvent}
  {$DEFINE EventName := OnCustomDrawSubItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVDataEvent
procedure ListView_SetOnData(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDataEvent}
  {$DEFINE EventName := OnData}
  EventMethodCode
end;

//EVENT_TYPE:TLVDataFindEvent
procedure ListView_SetOnDataFind(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDataFindEvent}
  {$DEFINE EventName := OnDataFind}
  EventMethodCode
end;

//EVENT_TYPE:TLVDataHintEvent
procedure ListView_SetOnDataHint(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDataHintEvent}
  {$DEFINE EventName := OnDataHint}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnDblClick(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TLVDeletedEvent
procedure ListView_SetOnDeletion(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDeletedEvent}
  {$DEFINE EventName := OnDeletion}
  EventMethodCode
end;

//EVENT_TYPE:TLVDrawItemEvent
procedure ListView_SetOnDrawItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDrawItemEvent}
  {$DEFINE EventName := OnDrawItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVEditedEvent
procedure ListView_SetOnEdited(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVEditedEvent}
  {$DEFINE EventName := OnEdited}
  EventMethodCode
end;

//EVENT_TYPE:TLVEditingEvent
procedure ListView_SetOnEditing(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVEditingEvent}
  {$DEFINE EventName := OnEditing}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure ListView_SetOnEndDock(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure ListView_SetOnEndDrag(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnEnter(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnExit(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure ListView_SetOnDragDrop(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure ListView_SetOnDragOver(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TLVDeletedEvent
procedure ListView_SetOnInsert(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVDeletedEvent}
  {$DEFINE EventName := OnInsert}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure ListView_SetOnKeyDown(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure ListView_SetOnKeyPress(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure ListView_SetOnKeyUp(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ListView_SetOnMouseDown(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnMouseEnter(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnMouseLeave(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure ListView_SetOnMouseMove(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure ListView_SetOnMouseUp(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure ListView_SetOnResize(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

//EVENT_TYPE:TLVSelectItemEvent
procedure ListView_SetOnSelectItem(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVSelectItemEvent}
  {$DEFINE EventName := OnSelectItem}
  EventMethodCode
end;

//EVENT_TYPE:TLVCheckedItemEvent
procedure ListView_SetOnItemChecked(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTLVCheckedItemEvent}
  {$DEFINE EventName := OnItemChecked}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure ListView_SetOnStartDock(AObj: TListView; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

function ListView_GetCanvas(AObj: TListView): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function ListView_GetDropTarget(AObj: TListView): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DropTarget;
  handleExceptionEnd
end;

procedure ListView_SetDropTarget(AObj: TListView; AValue: TListItem); extdecl;
begin
  handleExceptionBegin
  AObj.DropTarget := AValue;
  handleExceptionEnd
end;

function ListView_GetItemFocused(AObj: TListView): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemFocused;
  handleExceptionEnd
end;

procedure ListView_SetItemFocused(AObj: TListView; AValue: TListItem); extdecl;
begin
  handleExceptionBegin
  AObj.ItemFocused := AValue;
  handleExceptionEnd
end;

function ListView_GetSelCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelCount;
  handleExceptionEnd
end;

function ListView_GetSelected(AObj: TListView): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Selected;
  handleExceptionEnd
end;

procedure ListView_SetSelected(AObj: TListView; AValue: TListItem); extdecl;
begin
  handleExceptionBegin
  AObj.Selected := AValue;
  handleExceptionEnd
end;

function ListView_GetTopItem(AObj: TListView): TListItem; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.TopItem;
  handleExceptionEnd
end;

function ListView_GetVisibleRowCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleRowCount;
  handleExceptionEnd
end;

function ListView_GetItemIndex(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemIndex;
  handleExceptionEnd
end;

procedure ListView_SetItemIndex(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemIndex := AValue;
  handleExceptionEnd
end;

function ListView_GetDockClientCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function ListView_GetDockSite(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure ListView_SetDockSite(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function ListView_GetMouseInClient(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function ListView_GetVisibleDockClientCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function ListView_GetBrush(AObj: TListView): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function ListView_GetControlCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function ListView_GetHandle(AObj: TListView): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function ListView_GetParentWindow(AObj: TListView): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure ListView_SetParentWindow(AObj: TListView; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function ListView_GetShowing(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function ListView_GetUseDockManager(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure ListView_SetUseDockManager(AObj: TListView; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListView_GetBoundsRect(AObj: TListView; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure ListView_SetBoundsRect(AObj: TListView; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function ListView_GetClientHeight(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure ListView_SetClientHeight(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListView_GetClientOrigin(AObj: TListView; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure ListView_GetClientRect(AObj: TListView; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function ListView_GetClientWidth(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure ListView_SetClientWidth(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function ListView_GetControlState(AObj: TListView): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure ListView_SetControlState(AObj: TListView; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function ListView_GetControlStyle(AObj: TListView): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure ListView_SetControlStyle(AObj: TListView; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function ListView_GetFloating(AObj: TListView): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function ListView_GetParent(AObj: TListView): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure ListView_SetParent(AObj: TListView; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function ListView_GetLeft(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure ListView_SetLeft(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function ListView_GetTop(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure ListView_SetTop(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function ListView_GetWidth(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure ListView_SetWidth(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function ListView_GetHeight(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure ListView_SetHeight(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function ListView_GetCursor(AObj: TListView): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure ListView_SetCursor(AObj: TListView; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function ListView_GetHint(AObj: TListView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure ListView_SetHint(AObj: TListView; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function ListView_GetComponentCount(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function ListView_GetComponentIndex(AObj: TListView): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure ListView_SetComponentIndex(AObj: TListView; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function ListView_GetOwner(AObj: TListView): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function ListView_GetName(AObj: TListView): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure ListView_SetName(AObj: TListView; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function ListView_GetTag(AObj: TListView): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure ListView_SetTag(AObj: TListView; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function ListView_GetAnchorSideLeft(AObj: TListView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure ListView_SetAnchorSideLeft(AObj: TListView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function ListView_GetAnchorSideTop(AObj: TListView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure ListView_SetAnchorSideTop(AObj: TListView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function ListView_GetAnchorSideRight(AObj: TListView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure ListView_SetAnchorSideRight(AObj: TListView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function ListView_GetAnchorSideBottom(AObj: TListView): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure ListView_SetAnchorSideBottom(AObj: TListView; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function ListView_GetChildSizing(AObj: TListView): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure ListView_SetChildSizing(AObj: TListView; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function ListView_GetBorderSpacing(AObj: TListView): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure ListView_SetBorderSpacing(AObj: TListView; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function ListView_GetColumn(AObj: TListView; Index: Integer): TListColumn; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Column[Index];
  handleExceptionEnd
end;

function ListView_GetDockClients(AObj: TListView; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function ListView_GetControls(AObj: TListView; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function ListView_GetComponents(AObj: TListView; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function ListView_GetAnchorSide(AObj: TListView; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function ListView_StaticClassType: TClass; extdecl;
begin
  Result := TListView;
end;

exports
  ListView_Create,
  ListView_Free,
  ListView_AddItem,
  ListView_AlphaSort,
  ListView_Clear,
  ListView_ClearSelection,
  ListView_DeleteSelected,
  ListView_GetHitTestInfoAt,
  ListView_GetItemAt,
  ListView_GetNearestItem,
  ListView_GetNextItem,
  ListView_IsEditing,
  ListView_SelectAll,
  ListView_CustomSort,
  ListView_CanFocus,
  ListView_ContainsControl,
  ListView_ControlAtPos,
  ListView_DisableAlign,
  ListView_EnableAlign,
  ListView_FindChildControl,
  ListView_FlipChildren,
  ListView_Focused,
  ListView_HandleAllocated,
  ListView_InsertControl,
  ListView_Invalidate,
  ListView_PaintTo,
  ListView_RemoveControl,
  ListView_Realign,
  ListView_Repaint,
  ListView_ScaleBy,
  ListView_ScrollBy,
  ListView_SetBounds,
  ListView_SetFocus,
  ListView_Update,
  ListView_BringToFront,
  ListView_ClientToScreen,
  ListView_ClientToParent,
  ListView_Dragging,
  ListView_HasParent,
  ListView_Hide,
  ListView_Perform,
  ListView_Refresh,
  ListView_ScreenToClient,
  ListView_ParentToClient,
  ListView_SendToBack,
  ListView_Show,
  ListView_GetTextBuf,
  ListView_GetTextLen,
  ListView_SetTextBuf,
  ListView_FindComponent,
  ListView_GetNamePath,
  ListView_Assign,
  ListView_ClassType,
  ListView_ClassName,
  ListView_InstanceSize,
  ListView_InheritsFrom,
  ListView_Equals,
  ListView_GetHashCode,
  ListView_ToString,
  ListView_AnchorToNeighbour,
  ListView_AnchorParallel,
  ListView_AnchorHorizontalCenterTo,
  ListView_AnchorVerticalCenterTo,
  ListView_AnchorSame,
  ListView_AnchorAsAlign,
  ListView_AnchorClient,
  ListView_ScaleDesignToForm,
  ListView_ScaleFormToDesign,
  ListView_Scale96ToForm,
  ListView_ScaleFormTo96,
  ListView_Scale96ToFont,
  ListView_ScaleFontTo96,
  ListView_ScaleScreenToFont,
  ListView_ScaleFontToScreen,
  ListView_Scale96ToScreen,
  ListView_ScaleScreenTo96,
  ListView_AutoAdjustLayout,
  ListView_FixDesignFontsPPI,
  ListView_ScaleFontsPPI,
  ListView_GetAutoSort,
  ListView_SetAutoSort,
  ListView_GetAutoSortIndicator,
  ListView_SetAutoSortIndicator,
  ListView_GetAutoWidthLastColumn,
  ListView_SetAutoWidthLastColumn,
  ListView_GetSmallImagesWidth,
  ListView_SetSmallImagesWidth,
  ListView_GetSortColumn,
  ListView_SetSortColumn,
  ListView_GetSortDirection,
  ListView_SetSortDirection,
  ListView_GetLargeImagesWidth,
  ListView_SetLargeImagesWidth,
  ListView_GetStateImagesWidth,
  ListView_SetStateImagesWidth,
  ListView_GetToolTips,
  ListView_SetToolTips,
  ListView_GetScrollBars,
  ListView_SetScrollBars,
  ListView_GetColumnCount,
  ListView_GetAction,
  ListView_SetAction,
  ListView_GetAlign,
  ListView_SetAlign,
  ListView_GetAllocBy,
  ListView_SetAllocBy,
  ListView_GetAnchors,
  ListView_SetAnchors,
  ListView_GetBiDiMode,
  ListView_SetBiDiMode,
  ListView_GetBorderStyle,
  ListView_SetBorderStyle,
  ListView_GetBorderWidth,
  ListView_SetBorderWidth,
  ListView_GetCheckboxes,
  ListView_SetCheckboxes,
  ListView_GetColor,
  ListView_SetColor,
  ListView_GetColumns,
  ListView_SetColumns,
  ListView_GetColumnClick,
  ListView_SetColumnClick,
  ListView_GetConstraints,
  ListView_SetConstraints,
  ListView_GetDoubleBuffered,
  ListView_SetDoubleBuffered,
  ListView_GetDragCursor,
  ListView_SetDragCursor,
  ListView_GetDragKind,
  ListView_SetDragKind,
  ListView_GetDragMode,
  ListView_SetDragMode,
  ListView_GetEnabled,
  ListView_SetEnabled,
  ListView_GetFont,
  ListView_SetFont,
  ListView_GetFlatScrollBars,
  ListView_SetFlatScrollBars,
  ListView_GetFullDrag,
  ListView_SetFullDrag,
  ListView_GetGridLines,
  ListView_SetGridLines,
  ListView_GetHideSelection,
  ListView_SetHideSelection,
  ListView_GetHotTrack,
  ListView_SetHotTrack,
  ListView_GetIconOptions,
  ListView_SetIconOptions,
  ListView_GetItems,
  ListView_SetItems,
  ListView_GetLargeImages,
  ListView_SetLargeImages,
  ListView_GetMultiSelect,
  ListView_SetMultiSelect,
  ListView_GetOwnerData,
  ListView_SetOwnerData,
  ListView_GetOwnerDraw,
  ListView_SetOwnerDraw,
  ListView_GetReadOnly,
  ListView_SetReadOnly,
  ListView_GetRowSelect,
  ListView_SetRowSelect,
  ListView_GetParentColor,
  ListView_SetParentColor,
  ListView_GetParentDoubleBuffered,
  ListView_SetParentDoubleBuffered,
  ListView_GetParentFont,
  ListView_SetParentFont,
  ListView_GetParentShowHint,
  ListView_SetParentShowHint,
  ListView_GetPopupMenu,
  ListView_SetPopupMenu,
  ListView_GetShowColumnHeaders,
  ListView_SetShowColumnHeaders,
  ListView_GetShowHint,
  ListView_SetShowHint,
  ListView_GetSmallImages,
  ListView_SetSmallImages,
  ListView_GetSortType,
  ListView_SetSortType,
  ListView_GetStateImages,
  ListView_SetStateImages,
  ListView_GetTabOrder,
  ListView_SetTabOrder,
  ListView_GetTabStop,
  ListView_SetTabStop,
  ListView_GetViewStyle,
  ListView_SetViewStyle,
  ListView_GetVisible,
  ListView_SetVisible,
  ListView_SetOnAdvancedCustomDraw,
  ListView_SetOnAdvancedCustomDrawItem,
  ListView_SetOnAdvancedCustomDrawSubItem,
  ListView_SetOnChange,
  ListView_SetOnClick,
  ListView_SetOnColumnClick,
  ListView_SetOnCompare,
  ListView_SetOnContextPopup,
  ListView_SetOnCustomDraw,
  ListView_SetOnCustomDrawItem,
  ListView_SetOnCustomDrawSubItem,
  ListView_SetOnData,
  ListView_SetOnDataFind,
  ListView_SetOnDataHint,
  ListView_SetOnDblClick,
  ListView_SetOnDeletion,
  ListView_SetOnDrawItem,
  ListView_SetOnEdited,
  ListView_SetOnEditing,
  ListView_SetOnEndDock,
  ListView_SetOnEndDrag,
  ListView_SetOnEnter,
  ListView_SetOnExit,
  ListView_SetOnDragDrop,
  ListView_SetOnDragOver,
  ListView_SetOnInsert,
  ListView_SetOnKeyDown,
  ListView_SetOnKeyPress,
  ListView_SetOnKeyUp,
  ListView_SetOnMouseDown,
  ListView_SetOnMouseEnter,
  ListView_SetOnMouseLeave,
  ListView_SetOnMouseMove,
  ListView_SetOnMouseUp,
  ListView_SetOnResize,
  ListView_SetOnSelectItem,
  ListView_SetOnItemChecked,
  ListView_SetOnStartDock,
  ListView_GetCanvas,
  ListView_GetDropTarget,
  ListView_SetDropTarget,
  ListView_GetItemFocused,
  ListView_SetItemFocused,
  ListView_GetSelCount,
  ListView_GetSelected,
  ListView_SetSelected,
  ListView_GetTopItem,
  ListView_GetVisibleRowCount,
  ListView_GetItemIndex,
  ListView_SetItemIndex,
  ListView_GetDockClientCount,
  ListView_GetDockSite,
  ListView_SetDockSite,
  ListView_GetMouseInClient,
  ListView_GetVisibleDockClientCount,
  ListView_GetBrush,
  ListView_GetControlCount,
  ListView_GetHandle,
  ListView_GetParentWindow,
  ListView_SetParentWindow,
  ListView_GetShowing,
  ListView_GetUseDockManager,
  ListView_SetUseDockManager,
  ListView_GetBoundsRect,
  ListView_SetBoundsRect,
  ListView_GetClientHeight,
  ListView_SetClientHeight,
  ListView_GetClientOrigin,
  ListView_GetClientRect,
  ListView_GetClientWidth,
  ListView_SetClientWidth,
  ListView_GetControlState,
  ListView_SetControlState,
  ListView_GetControlStyle,
  ListView_SetControlStyle,
  ListView_GetFloating,
  ListView_GetParent,
  ListView_SetParent,
  ListView_GetLeft,
  ListView_SetLeft,
  ListView_GetTop,
  ListView_SetTop,
  ListView_GetWidth,
  ListView_SetWidth,
  ListView_GetHeight,
  ListView_SetHeight,
  ListView_GetCursor,
  ListView_SetCursor,
  ListView_GetHint,
  ListView_SetHint,
  ListView_GetComponentCount,
  ListView_GetComponentIndex,
  ListView_SetComponentIndex,
  ListView_GetOwner,
  ListView_GetName,
  ListView_SetName,
  ListView_GetTag,
  ListView_SetTag,
  ListView_GetAnchorSideLeft,
  ListView_SetAnchorSideLeft,
  ListView_GetAnchorSideTop,
  ListView_SetAnchorSideTop,
  ListView_GetAnchorSideRight,
  ListView_SetAnchorSideRight,
  ListView_GetAnchorSideBottom,
  ListView_SetAnchorSideBottom,
  ListView_GetChildSizing,
  ListView_SetChildSizing,
  ListView_GetBorderSpacing,
  ListView_SetBorderSpacing,
  ListView_GetColumn,
  ListView_GetDockClients,
  ListView_GetControls,
  ListView_GetComponents,
  ListView_GetAnchorSide,
  ListView_StaticClassType;

