
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function StringGrid_Create(AOwner: TComponent): TStringGrid; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TStringGrid.Create(AOwner);
  handleExceptionEnd
end;

procedure StringGrid_Free(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_DeleteColRow(AObj: TStringGrid; IsColumn: LongBool; index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteColRow(IsColumn, index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_DeleteCol(AObj: TStringGrid; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteCol(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_DeleteRow(AObj: TStringGrid; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteRow(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_ExchangeColRow(AObj: TStringGrid; IsColumn: LongBool; index: Integer; WithIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ExchangeColRow(IsColumn, index, WithIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_InsertColRow(AObj: TStringGrid; IsColumn: LongBool; index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.InsertColRow(IsColumn, index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_MoveColRow(AObj: TStringGrid; IsColumn: LongBool; FromIndex: Integer; ToIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MoveColRow(IsColumn, FromIndex, ToIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_SortColRow(AObj: TStringGrid; IsColumn: LongBool; Index: Integer; FromIndex: Integer; ToIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SortColRow(IsColumn, Index, FromIndex, ToIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_EditorByStyle(AObj: TStringGrid; Style: TColumnButtonStyle): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.EditorByStyle(Style);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EditorKeyDown(AObj: TStringGrid; Sender: TObject; var Key: Word; Shift: TShiftState); extdecl;
begin
  handleExceptionBegin
  AObj.EditorKeyDown(Sender, Key, Shift);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EditorKeyPress(AObj: TStringGrid; Sender: TObject; var Key: Char); extdecl;
begin
  handleExceptionBegin
  AObj.EditorKeyPress(Sender, Key);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EditorKeyUp(AObj: TStringGrid; Sender: TObject; var key: Word; shift: TShiftState); extdecl;
begin
  handleExceptionBegin
  AObj.EditorKeyUp(Sender, key, shift);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EditorTextChanged(AObj: TStringGrid; aCol: Integer; aRow: Integer; aText: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.EditorTextChanged(aCol, aRow, aText);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EditingDone(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.EditingDone;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AutoAdjustColumns(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustColumns;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
procedure StringGrid_CellRect(AObj: TStringGrid; ACol: Integer; ARow: Integer; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.CellRect(ACol, ARow);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_CellToGridZone(AObj: TStringGrid; aCol: Integer; aRow: Integer): TGridZone; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TGridZone);{$endif}
  handleExceptionBegin
  Result :=  AObj.CellToGridZone(aCol, aRow);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_CheckPosition(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.CheckPosition;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ClearCols(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ClearCols;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ClearRows(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ClearRows;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Clear(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_ClearSelections(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelections;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_HasMultiSelection(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasMultiSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_InvalidateCell(AObj: TStringGrid; aCol: Integer; aRow: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.InvalidateCell(aCol, aRow);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_InvalidateCol(AObj: TStringGrid; ACol: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.InvalidateCol(ACol);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
procedure StringGrid_InvalidateRange(AObj: TStringGrid; var aRange: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.InvalidateRange(aRange);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_InvalidateRow(AObj: TStringGrid; ARow: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.InvalidateRow(ARow);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_IsCellVisible(AObj: TStringGrid; aCol: Integer; aRow: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsCellVisible(aCol, aRow);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_IsFixedCellVisible(AObj: TStringGrid; aCol: Integer; aRow: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsFixedCellVisible(aCol, aRow);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
procedure StringGrid_MouseCoord(AObj: TStringGrid; X: Integer; Y: Integer; var Result: TGridCoord); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MouseCoord(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_MouseToCell(AObj: TStringGrid; var Mouse: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MouseToCell(Mouse);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_MouseToLogcell(AObj: TStringGrid; var Mouse: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MouseToLogcell(Mouse);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_MouseToGridZone(AObj: TStringGrid; X: Integer; Y: Integer): TGridZone; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TGridZone);{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseToGridZone(X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_CanFocus(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ContainsControl(AObj: TStringGrid; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function StringGrid_ControlAtPos(AObj: TStringGrid; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_DisableAlign(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_EnableAlign(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_FindChildControl(AObj: TStringGrid; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_FlipChildren(AObj: TStringGrid; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Focused(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_HandleAllocated(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_InsertControl(AObj: TStringGrid; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Invalidate(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_PaintTo(AObj: TStringGrid; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_RemoveControl(AObj: TStringGrid; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Realign(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Repaint(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_ScaleBy(AObj: TStringGrid; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_ScrollBy(AObj: TStringGrid; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_SetBounds(AObj: TStringGrid; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_SetFocus(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Update(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_BringToFront(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_ClientToScreen(AObj: TStringGrid; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_ClientToParent(AObj: TStringGrid; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Dragging(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_HasParent(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Hide(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Perform(AObj: TStringGrid; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Refresh(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_ScreenToClient(AObj: TStringGrid; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure StringGrid_ParentToClient(AObj: TStringGrid; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_SendToBack(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Show(AObj: TStringGrid); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_GetTextBuf(AObj: TStringGrid; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_GetTextLen(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_SetTextBuf(AObj: TStringGrid; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_FindComponent(AObj: TStringGrid; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_GetNamePath(AObj: TStringGrid): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_Assign(AObj: TStringGrid; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ClassType(AObj: TStringGrid): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ClassName(AObj: TStringGrid): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_InstanceSize(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_InheritsFrom(AObj: TStringGrid; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Equals(AObj: TStringGrid; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_GetHashCode(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ToString(AObj: TStringGrid): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorToNeighbour(AObj: TStringGrid; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorParallel(AObj: TStringGrid; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorHorizontalCenterTo(AObj: TStringGrid; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorVerticalCenterTo(AObj: TStringGrid; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorSame(AObj: TStringGrid; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorAsAlign(AObj: TStringGrid; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AnchorClient(AObj: TStringGrid; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleDesignToForm(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleFormToDesign(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Scale96ToForm(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleFormTo96(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Scale96ToFont(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleFontTo96(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleScreenToFont(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleFontToScreen(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_Scale96ToScreen(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringGrid_ScaleScreenTo96(AObj: TStringGrid; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_AutoAdjustLayout(AObj: TStringGrid; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringGrid_FixDesignFontsPPI(AObj: TStringGrid; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure StringGrid_ScaleFontsPPI(AObj: TStringGrid; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function StringGrid_GetSelectedColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectedColor;
  handleExceptionEnd
end;

procedure StringGrid_SetSelectedColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.SelectedColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetSelectedColumn(AObj: TStringGrid): TGridColumn; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.SelectedColumn;
  handleExceptionEnd
end;

function StringGrid_GetStrictSort(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.StrictSort;
  handleExceptionEnd
end;

procedure StringGrid_SetStrictSort(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.StrictSort := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFixedHotColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FixedHotColor;
  handleExceptionEnd
end;

procedure StringGrid_SetFixedHotColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.FixedHotColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFastEditing(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FastEditing;
  handleExceptionEnd
end;

procedure StringGrid_SetFastEditing(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FastEditing := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFixedGridLineColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FixedGridLineColor;
  handleExceptionEnd
end;

procedure StringGrid_SetFixedGridLineColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.FixedGridLineColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFocusColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FocusColor;
  handleExceptionEnd
end;

procedure StringGrid_SetFocusColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.FocusColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFocusRectVisible(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FocusRectVisible;
  handleExceptionEnd
end;

procedure StringGrid_SetFocusRectVisible(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FocusRectVisible := AValue;
  handleExceptionEnd
end;

function StringGrid_GetGridLineColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GridLineColor;
  handleExceptionEnd
end;

procedure StringGrid_SetGridLineColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.GridLineColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetGridLineStyle(AObj: TStringGrid): TPenStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TPenStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.GridLineStyle;
  handleExceptionEnd
end;

procedure StringGrid_SetGridLineStyle(AObj: TStringGrid; AValue: TPenStyle); extdecl;
begin
  handleExceptionBegin
  AObj.GridLineStyle := AValue;
  handleExceptionEnd
end;

function StringGrid_GetEditor(AObj: TStringGrid): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Editor;
  handleExceptionEnd
end;

procedure StringGrid_SetEditor(AObj: TStringGrid; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Editor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetEditorBorderStyle(AObj: TStringGrid): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.EditorBorderStyle;
  handleExceptionEnd
end;

procedure StringGrid_SetEditorBorderStyle(AObj: TStringGrid; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.EditorBorderStyle := AValue;
  handleExceptionEnd
end;

function StringGrid_GetEditorMode(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.EditorMode;
  handleExceptionEnd
end;

procedure StringGrid_SetEditorMode(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.EditorMode := AValue;
  handleExceptionEnd
end;

function StringGrid_GetSortOrder(AObj: TStringGrid): TSortOrder; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TSortOrder);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortOrder;
  handleExceptionEnd
end;

procedure StringGrid_SetSortOrder(AObj: TStringGrid; AValue: TSortOrder); extdecl;
begin
  handleExceptionBegin
  AObj.SortOrder := AValue;
  handleExceptionEnd
end;

function StringGrid_GetSortColumn(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SortColumn;
  handleExceptionEnd
end;

//EVENT_TYPE:TOnSelectEvent
procedure StringGrid_SetOnAfterSelection(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnSelectEvent}
  {$DEFINE EventName := OnAfterSelection}
  EventMethodCode
end;

//EVENT_TYPE:TOnSelectEvent
procedure StringGrid_SetOnBeforeSelection(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnSelectEvent}
  {$DEFINE EventName := OnBeforeSelection}
  EventMethodCode
end;

//EVENT_TYPE:TOnSelectEvent
procedure StringGrid_SetOnButtonClick(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnSelectEvent}
  {$DEFINE EventName := OnButtonClick}
  EventMethodCode
end;

//EVENT_TYPE:TToggledCheckboxEvent
procedure StringGrid_SetOnCheckboxToggled(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTToggledCheckboxEvent}
  {$DEFINE EventName := OnCheckboxToggled}
  EventMethodCode
end;

//EVENT_TYPE:TGridOperationEvent
procedure StringGrid_SetOnColRowDeleted(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGridOperationEvent}
  {$DEFINE EventName := OnColRowDeleted}
  EventMethodCode
end;

//EVENT_TYPE:TGridOperationEvent
procedure StringGrid_SetOnColRowExchanged(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGridOperationEvent}
  {$DEFINE EventName := OnColRowExchanged}
  EventMethodCode
end;

//EVENT_TYPE:TGridOperationEvent
procedure StringGrid_SetOnColRowInserted(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGridOperationEvent}
  {$DEFINE EventName := OnColRowInserted}
  EventMethodCode
end;

//EVENT_TYPE:TGridOperationEvent
procedure StringGrid_SetOnColRowMoved(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGridOperationEvent}
  {$DEFINE EventName := OnColRowMoved}
  EventMethodCode
end;

//EVENT_TYPE:TOnCompareCells
procedure StringGrid_SetOnCompareCells(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnCompareCells}
  {$DEFINE EventName := OnCompareCells}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnEditingDone(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEditingDone}
  EventMethodCode
end;

//EVENT_TYPE:TGetCellHintEvent
procedure StringGrid_SetOnGetCellHint(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetCellHintEvent}
  {$DEFINE EventName := OnGetCellHint}
  EventMethodCode
end;

//EVENT_TYPE:TGetCheckboxStateEvent
procedure StringGrid_SetOnGetCheckboxState(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetCheckboxStateEvent}
  {$DEFINE EventName := OnGetCheckboxState}
  EventMethodCode
end;

//EVENT_TYPE:TSetCheckboxStateEvent
procedure StringGrid_SetOnSetCheckboxState(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTSetCheckboxStateEvent}
  {$DEFINE EventName := OnSetCheckboxState}
  EventMethodCode
end;

//EVENT_TYPE:THdrEvent
procedure StringGrid_SetOnHeaderClick(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTHdrEvent}
  {$DEFINE EventName := OnHeaderClick}
  EventMethodCode
end;

//EVENT_TYPE:THdrEvent
procedure StringGrid_SetOnHeaderSized(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTHdrEvent}
  {$DEFINE EventName := OnHeaderSized}
  EventMethodCode
end;

//EVENT_TYPE:THeaderSizingEvent
procedure StringGrid_SetOnHeaderSizing(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTHeaderSizingEvent}
  {$DEFINE EventName := OnHeaderSizing}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnPickListSelect(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnPickListSelect}
  EventMethodCode
end;

//EVENT_TYPE:TOnSelectEvent
procedure StringGrid_SetOnSelection(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnSelectEvent}
  {$DEFINE EventName := OnSelection}
  EventMethodCode
end;

//EVENT_TYPE:TSelectEditorEvent
procedure StringGrid_SetOnSelectEditor(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTSelectEditorEvent}
  {$DEFINE EventName := OnSelectEditor}
  EventMethodCode
end;

//EVENT_TYPE:TUserCheckBoxBitmapEvent
procedure StringGrid_SetOnUserCheckboxBitmap(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTUserCheckBoxBitmapEvent}
  {$DEFINE EventName := OnUserCheckboxBitmap}
  EventMethodCode
end;

//EVENT_TYPE:TValidateEntryEvent
procedure StringGrid_SetOnValidateEntry(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTValidateEntryEvent}
  {$DEFINE EventName := OnValidateEntry}
  EventMethodCode
end;

//EVENT_TYPE:TOnPrepareCanvasEvent
procedure StringGrid_SetOnPrepareCanvas(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTOnPrepareCanvasEvent}
  {$DEFINE EventName := OnPrepareCanvas}
  EventMethodCode
end;

function StringGrid_GetAlternateColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AlternateColor;
  handleExceptionEnd
end;

procedure StringGrid_SetAlternateColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.AlternateColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAutoAdvance(AObj: TStringGrid): TAutoAdvance; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAutoAdvance);{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoAdvance;
  handleExceptionEnd
end;

procedure StringGrid_SetAutoAdvance(AObj: TStringGrid; AValue: TAutoAdvance); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdvance := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAutoEdit(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoEdit;
  handleExceptionEnd
end;

procedure StringGrid_SetAutoEdit(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoEdit := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAutoFillColumns(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoFillColumns;
  handleExceptionEnd
end;

procedure StringGrid_SetAutoFillColumns(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoFillColumns := AValue;
  handleExceptionEnd
end;

function StringGrid_GetCellHintPriority(AObj: TStringGrid): TCellHintPriority; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TCellHintPriority);{$endif}
  handleExceptionBegin
  Result :=  AObj.CellHintPriority;
  handleExceptionEnd
end;

procedure StringGrid_SetCellHintPriority(AObj: TStringGrid; AValue: TCellHintPriority); extdecl;
begin
  handleExceptionBegin
  AObj.CellHintPriority := AValue;
  handleExceptionEnd
end;

function StringGrid_GetColumnClickSorts(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ColumnClickSorts;
  handleExceptionEnd
end;

procedure StringGrid_SetColumnClickSorts(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ColumnClickSorts := AValue;
  handleExceptionEnd
end;

function StringGrid_GetColumns(AObj: TStringGrid): TGridColumns; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Columns;
  handleExceptionEnd
end;

procedure StringGrid_SetColumns(AObj: TStringGrid; AValue: TGridColumns); extdecl;
begin
  handleExceptionBegin
  AObj.Columns := AValue;
  handleExceptionEnd
end;

function StringGrid_GetExtendedSelect(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ExtendedSelect;
  handleExceptionEnd
end;

procedure StringGrid_SetExtendedSelect(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ExtendedSelect := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFlat(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Flat;
  handleExceptionEnd
end;

procedure StringGrid_SetFlat(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Flat := AValue;
  handleExceptionEnd
end;

function StringGrid_GetHeaderHotZones(AObj: TStringGrid): TGridZoneSet; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.HeaderHotZones;
  handleExceptionEnd
end;

procedure StringGrid_SetHeaderHotZones(AObj: TStringGrid; AValue: TGridZoneSet); extdecl;
begin
  handleExceptionBegin
  AObj.HeaderHotZones := AValue;
  handleExceptionEnd
end;

function StringGrid_GetHeaderPushZones(AObj: TStringGrid): TGridZoneSet; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.HeaderPushZones;
  handleExceptionEnd
end;

procedure StringGrid_SetHeaderPushZones(AObj: TStringGrid; AValue: TGridZoneSet); extdecl;
begin
  handleExceptionBegin
  AObj.HeaderPushZones := AValue;
  handleExceptionEnd
end;

function StringGrid_GetImageIndexSortAsc(AObj: TStringGrid): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndexSortAsc;
  handleExceptionEnd
end;

procedure StringGrid_SetImageIndexSortAsc(AObj: TStringGrid; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndexSortAsc := AValue;
  handleExceptionEnd
end;

function StringGrid_GetImageIndexSortDesc(AObj: TStringGrid): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndexSortDesc;
  handleExceptionEnd
end;

procedure StringGrid_SetImageIndexSortDesc(AObj: TStringGrid; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndexSortDesc := AValue;
  handleExceptionEnd
end;

function StringGrid_GetMouseWheelOption(AObj: TStringGrid): TMouseWheelOption; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TMouseWheelOption);{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseWheelOption;
  handleExceptionEnd
end;

procedure StringGrid_SetMouseWheelOption(AObj: TStringGrid; AValue: TMouseWheelOption); extdecl;
begin
  handleExceptionBegin
  AObj.MouseWheelOption := AValue;
  handleExceptionEnd
end;

function StringGrid_GetOptions2(AObj: TStringGrid): TGridOptions2; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options2;
  handleExceptionEnd
end;

procedure StringGrid_SetOptions2(AObj: TStringGrid; AValue: TGridOptions2); extdecl;
begin
  handleExceptionBegin
  AObj.Options2 := AValue;
  handleExceptionEnd
end;

function StringGrid_GetRangeSelectMode(AObj: TStringGrid): TRangeSelectMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TRangeSelectMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.RangeSelectMode;
  handleExceptionEnd
end;

procedure StringGrid_SetRangeSelectMode(AObj: TStringGrid; AValue: TRangeSelectMode); extdecl;
begin
  handleExceptionBegin
  AObj.RangeSelectMode := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTabAdvance(AObj: TStringGrid): TAutoAdvance; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAutoAdvance);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabAdvance;
  handleExceptionEnd
end;

procedure StringGrid_SetTabAdvance(AObj: TStringGrid; AValue: TAutoAdvance); extdecl;
begin
  handleExceptionBegin
  AObj.TabAdvance := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTitleFont(AObj: TStringGrid): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.TitleFont;
  handleExceptionEnd
end;

procedure StringGrid_SetTitleFont(AObj: TStringGrid; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.TitleFont := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTitleImageList(AObj: TStringGrid): TImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.TitleImageList;
  handleExceptionEnd
end;

procedure StringGrid_SetTitleImageList(AObj: TStringGrid; AValue: TImageList); extdecl;
begin
  handleExceptionBegin
  AObj.TitleImageList := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTitleStyle(AObj: TStringGrid): TTitleStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TTitleStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.TitleStyle;
  handleExceptionEnd
end;

procedure StringGrid_SetTitleStyle(AObj: TStringGrid; AValue: TTitleStyle); extdecl;
begin
  handleExceptionBegin
  AObj.TitleStyle := AValue;
  handleExceptionEnd
end;

function StringGrid_GetUseXORFeatures(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseXORFeatures;
  handleExceptionEnd
end;

procedure StringGrid_SetUseXORFeatures(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseXORFeatures := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAlign(AObj: TStringGrid): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure StringGrid_SetAlign(AObj: TStringGrid; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAnchors(AObj: TStringGrid): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure StringGrid_SetAnchors(AObj: TStringGrid; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function StringGrid_GetBiDiMode(AObj: TStringGrid): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure StringGrid_SetBiDiMode(AObj: TStringGrid; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function StringGrid_GetBorderStyle(AObj: TStringGrid): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure StringGrid_SetBorderStyle(AObj: TStringGrid; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function StringGrid_GetColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure StringGrid_SetColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function StringGrid_GetColCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ColCount;
  handleExceptionEnd
end;

procedure StringGrid_SetColCount(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ColCount := AValue;
  handleExceptionEnd
end;

function StringGrid_GetConstraints(AObj: TStringGrid): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure StringGrid_SetConstraints(AObj: TStringGrid; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDefaultColWidth(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DefaultColWidth;
  handleExceptionEnd
end;

procedure StringGrid_SetDefaultColWidth(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultColWidth := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDefaultRowHeight(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DefaultRowHeight;
  handleExceptionEnd
end;

procedure StringGrid_SetDefaultRowHeight(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultRowHeight := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDefaultDrawing(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DefaultDrawing;
  handleExceptionEnd
end;

procedure StringGrid_SetDefaultDrawing(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultDrawing := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDoubleBuffered(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure StringGrid_SetDoubleBuffered(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDragCursor(AObj: TStringGrid): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure StringGrid_SetDragCursor(AObj: TStringGrid; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDragKind(AObj: TStringGrid): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure StringGrid_SetDragKind(AObj: TStringGrid; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDragMode(AObj: TStringGrid): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure StringGrid_SetDragMode(AObj: TStringGrid; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function StringGrid_GetEnabled(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure StringGrid_SetEnabled(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFixedColor(AObj: TStringGrid): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FixedColor;
  handleExceptionEnd
end;

procedure StringGrid_SetFixedColor(AObj: TStringGrid; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.FixedColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFixedCols(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FixedCols;
  handleExceptionEnd
end;

procedure StringGrid_SetFixedCols(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixedCols := AValue;
  handleExceptionEnd
end;

function StringGrid_GetRowCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.RowCount;
  handleExceptionEnd
end;

procedure StringGrid_SetRowCount(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.RowCount := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFixedRows(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FixedRows;
  handleExceptionEnd
end;

procedure StringGrid_SetFixedRows(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixedRows := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFont(AObj: TStringGrid): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure StringGrid_SetFont(AObj: TStringGrid; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function StringGrid_GetGridLineWidth(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GridLineWidth;
  handleExceptionEnd
end;

procedure StringGrid_SetGridLineWidth(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.GridLineWidth := AValue;
  handleExceptionEnd
end;

function StringGrid_GetOptions(AObj: TStringGrid): TGridOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure StringGrid_SetOptions(AObj: TStringGrid; AValue: TGridOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function StringGrid_GetParentColor(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure StringGrid_SetParentColor(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetParentDoubleBuffered(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure StringGrid_SetParentDoubleBuffered(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function StringGrid_GetParentFont(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure StringGrid_SetParentFont(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function StringGrid_GetParentShowHint(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure StringGrid_SetParentShowHint(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function StringGrid_GetPopupMenu(AObj: TStringGrid): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure StringGrid_SetPopupMenu(AObj: TStringGrid; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function StringGrid_GetScrollBars(AObj: TStringGrid): TScrollStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TScrollStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScrollBars;
  handleExceptionEnd
end;

procedure StringGrid_SetScrollBars(AObj: TStringGrid; AValue: TScrollStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBars := AValue;
  handleExceptionEnd
end;

function StringGrid_GetShowHint(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure StringGrid_SetShowHint(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTabOrder(AObj: TStringGrid): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure StringGrid_SetTabOrder(AObj: TStringGrid; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function StringGrid_GetVisible(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure StringGrid_SetVisible(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function StringGrid_GetVisibleColCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleColCount;
  handleExceptionEnd
end;

function StringGrid_GetVisibleRowCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleRowCount;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnClick(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure StringGrid_SetOnContextPopup(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnDblClick(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure StringGrid_SetOnDragDrop(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure StringGrid_SetOnDragOver(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TDrawCellEvent
procedure StringGrid_SetOnDrawCell(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDrawCellEvent}
  {$DEFINE EventName := OnDrawCell}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure StringGrid_SetOnEndDock(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure StringGrid_SetOnEndDrag(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnEnter(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnExit(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TGetEditEvent
procedure StringGrid_SetOnGetEditMask(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetEditEvent}
  {$DEFINE EventName := OnGetEditMask}
  EventMethodCode
end;

//EVENT_TYPE:TGetEditEvent
procedure StringGrid_SetOnGetEditText(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetEditEvent}
  {$DEFINE EventName := OnGetEditText}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure StringGrid_SetOnKeyDown(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure StringGrid_SetOnKeyPress(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure StringGrid_SetOnKeyUp(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure StringGrid_SetOnMouseDown(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnMouseEnter(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnMouseLeave(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure StringGrid_SetOnMouseMove(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure StringGrid_SetOnMouseUp(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure StringGrid_SetOnMouseWheelDown(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure StringGrid_SetOnMouseWheelUp(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

//EVENT_TYPE:TSelectCellEvent
procedure StringGrid_SetOnSelectCell(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTSelectCellEvent}
  {$DEFINE EventName := OnSelectCell}
  EventMethodCode
end;

//EVENT_TYPE:TSetEditEvent
procedure StringGrid_SetOnSetEditText(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTSetEditEvent}
  {$DEFINE EventName := OnSetEditText}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure StringGrid_SetOnStartDock(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringGrid_SetOnTopLeftChanged(AObj: TStringGrid; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnTopLeftChanged}
  EventMethodCode
end;

function StringGrid_GetCanvas(AObj: TStringGrid): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function StringGrid_GetCol(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Col;
  handleExceptionEnd
end;

procedure StringGrid_SetCol(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Col := AValue;
  handleExceptionEnd
end;

function StringGrid_GetGridHeight(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GridHeight;
  handleExceptionEnd
end;

function StringGrid_GetGridWidth(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GridWidth;
  handleExceptionEnd
end;

function StringGrid_GetLeftCol(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.LeftCol;
  handleExceptionEnd
end;

procedure StringGrid_SetLeftCol(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.LeftCol := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure StringGrid_GetSelection(AObj: TStringGrid; var Result: TGridRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Selection;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure StringGrid_SetSelection(AObj: TStringGrid; var AValue: TGridRect); extdecl;
begin
  handleExceptionBegin
  AObj.Selection := AValue;
  handleExceptionEnd
end;

function StringGrid_GetRow(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Row;
  handleExceptionEnd
end;

procedure StringGrid_SetRow(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Row := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTopRow(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TopRow;
  handleExceptionEnd
end;

procedure StringGrid_SetTopRow(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.TopRow := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTabStop(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure StringGrid_SetTabStop(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDockClientCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function StringGrid_GetDockSite(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure StringGrid_SetDockSite(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function StringGrid_GetMouseInClient(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function StringGrid_GetVisibleDockClientCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function StringGrid_GetBrush(AObj: TStringGrid): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function StringGrid_GetControlCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function StringGrid_GetHandle(AObj: TStringGrid): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function StringGrid_GetParentWindow(AObj: TStringGrid): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure StringGrid_SetParentWindow(AObj: TStringGrid; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function StringGrid_GetShowing(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function StringGrid_GetUseDockManager(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure StringGrid_SetUseDockManager(AObj: TStringGrid; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAction(AObj: TStringGrid): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure StringGrid_SetAction(AObj: TStringGrid; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure StringGrid_GetBoundsRect(AObj: TStringGrid; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure StringGrid_SetBoundsRect(AObj: TStringGrid; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function StringGrid_GetClientHeight(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure StringGrid_SetClientHeight(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure StringGrid_GetClientOrigin(AObj: TStringGrid; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure StringGrid_GetClientRect(AObj: TStringGrid; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function StringGrid_GetClientWidth(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure StringGrid_SetClientWidth(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function StringGrid_GetControlState(AObj: TStringGrid): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure StringGrid_SetControlState(AObj: TStringGrid; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function StringGrid_GetControlStyle(AObj: TStringGrid): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure StringGrid_SetControlStyle(AObj: TStringGrid; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function StringGrid_GetFloating(AObj: TStringGrid): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function StringGrid_GetParent(AObj: TStringGrid): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure StringGrid_SetParent(AObj: TStringGrid; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function StringGrid_GetLeft(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure StringGrid_SetLeft(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTop(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure StringGrid_SetTop(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function StringGrid_GetWidth(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure StringGrid_SetWidth(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function StringGrid_GetHeight(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure StringGrid_SetHeight(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function StringGrid_GetCursor(AObj: TStringGrid): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure StringGrid_SetCursor(AObj: TStringGrid; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function StringGrid_GetHint(AObj: TStringGrid): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure StringGrid_SetHint(AObj: TStringGrid; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function StringGrid_GetComponentCount(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function StringGrid_GetComponentIndex(AObj: TStringGrid): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure StringGrid_SetComponentIndex(AObj: TStringGrid; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function StringGrid_GetOwner(AObj: TStringGrid): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function StringGrid_GetName(AObj: TStringGrid): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure StringGrid_SetName(AObj: TStringGrid; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function StringGrid_GetTag(AObj: TStringGrid): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure StringGrid_SetTag(AObj: TStringGrid; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAnchorSideLeft(AObj: TStringGrid): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure StringGrid_SetAnchorSideLeft(AObj: TStringGrid; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAnchorSideTop(AObj: TStringGrid): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure StringGrid_SetAnchorSideTop(AObj: TStringGrid; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAnchorSideRight(AObj: TStringGrid): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure StringGrid_SetAnchorSideRight(AObj: TStringGrid; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function StringGrid_GetAnchorSideBottom(AObj: TStringGrid): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure StringGrid_SetAnchorSideBottom(AObj: TStringGrid; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function StringGrid_GetChildSizing(AObj: TStringGrid): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure StringGrid_SetChildSizing(AObj: TStringGrid; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function StringGrid_GetBorderSpacing(AObj: TStringGrid): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure StringGrid_SetBorderSpacing(AObj: TStringGrid; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function StringGrid_GetIsCellSelected(AObj: TStringGrid; aCol: Integer; aRow: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.IsCellSelected[aCol, aRow];
  handleExceptionEnd
end;

function StringGrid_GetCells(AObj: TStringGrid; ACol: Integer; ARow: Integer): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Cells[ACol, ARow]);
  handleExceptionEnd
end;

procedure StringGrid_SetCells(AObj: TStringGrid; ACol: Integer; ARow: Integer; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Cells[ACol, ARow] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetCols(AObj: TStringGrid; Index: Integer): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Cols[Index];
  handleExceptionEnd
end;

procedure StringGrid_SetCols(AObj: TStringGrid; Index: Integer; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Cols[Index] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetObjects(AObj: TStringGrid; ACol: Integer; ARow: Integer): TObject; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Objects[ACol, ARow];
  handleExceptionEnd
end;

procedure StringGrid_SetObjects(AObj: TStringGrid; ACol: Integer; ARow: Integer; AValue: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.Objects[ACol, ARow] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetRows(AObj: TStringGrid; Index: Integer): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Rows[Index];
  handleExceptionEnd
end;

procedure StringGrid_SetRows(AObj: TStringGrid; Index: Integer; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Rows[Index] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetColWidths(AObj: TStringGrid; Index: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ColWidths[Index];
  handleExceptionEnd
end;

procedure StringGrid_SetColWidths(AObj: TStringGrid; Index: Integer; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ColWidths[Index] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetRowHeights(AObj: TStringGrid; Index: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.RowHeights[Index];
  handleExceptionEnd
end;

procedure StringGrid_SetRowHeights(AObj: TStringGrid; Index: Integer; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.RowHeights[Index] := AValue;
  handleExceptionEnd
end;

function StringGrid_GetDockClients(AObj: TStringGrid; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function StringGrid_GetControls(AObj: TStringGrid; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function StringGrid_GetComponents(AObj: TStringGrid; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function StringGrid_GetAnchorSide(AObj: TStringGrid; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function StringGrid_StaticClassType: TClass; extdecl;
begin
  Result := TStringGrid;
end;

exports
  StringGrid_Create,
  StringGrid_Free,
  StringGrid_DeleteColRow,
  StringGrid_DeleteCol,
  StringGrid_DeleteRow,
  StringGrid_ExchangeColRow,
  StringGrid_InsertColRow,
  StringGrid_MoveColRow,
  StringGrid_SortColRow,
  StringGrid_EditorByStyle,
  StringGrid_EditorKeyDown,
  StringGrid_EditorKeyPress,
  StringGrid_EditorKeyUp,
  StringGrid_EditorTextChanged,
  StringGrid_EditingDone,
  StringGrid_AutoAdjustColumns,
  StringGrid_CellRect,
  StringGrid_CellToGridZone,
  StringGrid_CheckPosition,
  StringGrid_ClearCols,
  StringGrid_ClearRows,
  StringGrid_Clear,
  StringGrid_ClearSelections,
  StringGrid_HasMultiSelection,
  StringGrid_InvalidateCell,
  StringGrid_InvalidateCol,
  StringGrid_InvalidateRange,
  StringGrid_InvalidateRow,
  StringGrid_IsCellVisible,
  StringGrid_IsFixedCellVisible,
  StringGrid_MouseCoord,
  StringGrid_MouseToCell,
  StringGrid_MouseToLogcell,
  StringGrid_MouseToGridZone,
  StringGrid_CanFocus,
  StringGrid_ContainsControl,
  StringGrid_ControlAtPos,
  StringGrid_DisableAlign,
  StringGrid_EnableAlign,
  StringGrid_FindChildControl,
  StringGrid_FlipChildren,
  StringGrid_Focused,
  StringGrid_HandleAllocated,
  StringGrid_InsertControl,
  StringGrid_Invalidate,
  StringGrid_PaintTo,
  StringGrid_RemoveControl,
  StringGrid_Realign,
  StringGrid_Repaint,
  StringGrid_ScaleBy,
  StringGrid_ScrollBy,
  StringGrid_SetBounds,
  StringGrid_SetFocus,
  StringGrid_Update,
  StringGrid_BringToFront,
  StringGrid_ClientToScreen,
  StringGrid_ClientToParent,
  StringGrid_Dragging,
  StringGrid_HasParent,
  StringGrid_Hide,
  StringGrid_Perform,
  StringGrid_Refresh,
  StringGrid_ScreenToClient,
  StringGrid_ParentToClient,
  StringGrid_SendToBack,
  StringGrid_Show,
  StringGrid_GetTextBuf,
  StringGrid_GetTextLen,
  StringGrid_SetTextBuf,
  StringGrid_FindComponent,
  StringGrid_GetNamePath,
  StringGrid_Assign,
  StringGrid_ClassType,
  StringGrid_ClassName,
  StringGrid_InstanceSize,
  StringGrid_InheritsFrom,
  StringGrid_Equals,
  StringGrid_GetHashCode,
  StringGrid_ToString,
  StringGrid_AnchorToNeighbour,
  StringGrid_AnchorParallel,
  StringGrid_AnchorHorizontalCenterTo,
  StringGrid_AnchorVerticalCenterTo,
  StringGrid_AnchorSame,
  StringGrid_AnchorAsAlign,
  StringGrid_AnchorClient,
  StringGrid_ScaleDesignToForm,
  StringGrid_ScaleFormToDesign,
  StringGrid_Scale96ToForm,
  StringGrid_ScaleFormTo96,
  StringGrid_Scale96ToFont,
  StringGrid_ScaleFontTo96,
  StringGrid_ScaleScreenToFont,
  StringGrid_ScaleFontToScreen,
  StringGrid_Scale96ToScreen,
  StringGrid_ScaleScreenTo96,
  StringGrid_AutoAdjustLayout,
  StringGrid_FixDesignFontsPPI,
  StringGrid_ScaleFontsPPI,
  StringGrid_GetSelectedColor,
  StringGrid_SetSelectedColor,
  StringGrid_GetSelectedColumn,
  StringGrid_GetStrictSort,
  StringGrid_SetStrictSort,
  StringGrid_GetFixedHotColor,
  StringGrid_SetFixedHotColor,
  StringGrid_GetFastEditing,
  StringGrid_SetFastEditing,
  StringGrid_GetFixedGridLineColor,
  StringGrid_SetFixedGridLineColor,
  StringGrid_GetFocusColor,
  StringGrid_SetFocusColor,
  StringGrid_GetFocusRectVisible,
  StringGrid_SetFocusRectVisible,
  StringGrid_GetGridLineColor,
  StringGrid_SetGridLineColor,
  StringGrid_GetGridLineStyle,
  StringGrid_SetGridLineStyle,
  StringGrid_GetEditor,
  StringGrid_SetEditor,
  StringGrid_GetEditorBorderStyle,
  StringGrid_SetEditorBorderStyle,
  StringGrid_GetEditorMode,
  StringGrid_SetEditorMode,
  StringGrid_GetSortOrder,
  StringGrid_SetSortOrder,
  StringGrid_GetSortColumn,
  StringGrid_SetOnAfterSelection,
  StringGrid_SetOnBeforeSelection,
  StringGrid_SetOnButtonClick,
  StringGrid_SetOnCheckboxToggled,
  StringGrid_SetOnColRowDeleted,
  StringGrid_SetOnColRowExchanged,
  StringGrid_SetOnColRowInserted,
  StringGrid_SetOnColRowMoved,
  StringGrid_SetOnCompareCells,
  StringGrid_SetOnEditingDone,
  StringGrid_SetOnGetCellHint,
  StringGrid_SetOnGetCheckboxState,
  StringGrid_SetOnSetCheckboxState,
  StringGrid_SetOnHeaderClick,
  StringGrid_SetOnHeaderSized,
  StringGrid_SetOnHeaderSizing,
  StringGrid_SetOnPickListSelect,
  StringGrid_SetOnSelection,
  StringGrid_SetOnSelectEditor,
  StringGrid_SetOnUserCheckboxBitmap,
  StringGrid_SetOnValidateEntry,
  StringGrid_SetOnPrepareCanvas,
  StringGrid_GetAlternateColor,
  StringGrid_SetAlternateColor,
  StringGrid_GetAutoAdvance,
  StringGrid_SetAutoAdvance,
  StringGrid_GetAutoEdit,
  StringGrid_SetAutoEdit,
  StringGrid_GetAutoFillColumns,
  StringGrid_SetAutoFillColumns,
  StringGrid_GetCellHintPriority,
  StringGrid_SetCellHintPriority,
  StringGrid_GetColumnClickSorts,
  StringGrid_SetColumnClickSorts,
  StringGrid_GetColumns,
  StringGrid_SetColumns,
  StringGrid_GetExtendedSelect,
  StringGrid_SetExtendedSelect,
  StringGrid_GetFlat,
  StringGrid_SetFlat,
  StringGrid_GetHeaderHotZones,
  StringGrid_SetHeaderHotZones,
  StringGrid_GetHeaderPushZones,
  StringGrid_SetHeaderPushZones,
  StringGrid_GetImageIndexSortAsc,
  StringGrid_SetImageIndexSortAsc,
  StringGrid_GetImageIndexSortDesc,
  StringGrid_SetImageIndexSortDesc,
  StringGrid_GetMouseWheelOption,
  StringGrid_SetMouseWheelOption,
  StringGrid_GetOptions2,
  StringGrid_SetOptions2,
  StringGrid_GetRangeSelectMode,
  StringGrid_SetRangeSelectMode,
  StringGrid_GetTabAdvance,
  StringGrid_SetTabAdvance,
  StringGrid_GetTitleFont,
  StringGrid_SetTitleFont,
  StringGrid_GetTitleImageList,
  StringGrid_SetTitleImageList,
  StringGrid_GetTitleStyle,
  StringGrid_SetTitleStyle,
  StringGrid_GetUseXORFeatures,
  StringGrid_SetUseXORFeatures,
  StringGrid_GetAlign,
  StringGrid_SetAlign,
  StringGrid_GetAnchors,
  StringGrid_SetAnchors,
  StringGrid_GetBiDiMode,
  StringGrid_SetBiDiMode,
  StringGrid_GetBorderStyle,
  StringGrid_SetBorderStyle,
  StringGrid_GetColor,
  StringGrid_SetColor,
  StringGrid_GetColCount,
  StringGrid_SetColCount,
  StringGrid_GetConstraints,
  StringGrid_SetConstraints,
  StringGrid_GetDefaultColWidth,
  StringGrid_SetDefaultColWidth,
  StringGrid_GetDefaultRowHeight,
  StringGrid_SetDefaultRowHeight,
  StringGrid_GetDefaultDrawing,
  StringGrid_SetDefaultDrawing,
  StringGrid_GetDoubleBuffered,
  StringGrid_SetDoubleBuffered,
  StringGrid_GetDragCursor,
  StringGrid_SetDragCursor,
  StringGrid_GetDragKind,
  StringGrid_SetDragKind,
  StringGrid_GetDragMode,
  StringGrid_SetDragMode,
  StringGrid_GetEnabled,
  StringGrid_SetEnabled,
  StringGrid_GetFixedColor,
  StringGrid_SetFixedColor,
  StringGrid_GetFixedCols,
  StringGrid_SetFixedCols,
  StringGrid_GetRowCount,
  StringGrid_SetRowCount,
  StringGrid_GetFixedRows,
  StringGrid_SetFixedRows,
  StringGrid_GetFont,
  StringGrid_SetFont,
  StringGrid_GetGridLineWidth,
  StringGrid_SetGridLineWidth,
  StringGrid_GetOptions,
  StringGrid_SetOptions,
  StringGrid_GetParentColor,
  StringGrid_SetParentColor,
  StringGrid_GetParentDoubleBuffered,
  StringGrid_SetParentDoubleBuffered,
  StringGrid_GetParentFont,
  StringGrid_SetParentFont,
  StringGrid_GetParentShowHint,
  StringGrid_SetParentShowHint,
  StringGrid_GetPopupMenu,
  StringGrid_SetPopupMenu,
  StringGrid_GetScrollBars,
  StringGrid_SetScrollBars,
  StringGrid_GetShowHint,
  StringGrid_SetShowHint,
  StringGrid_GetTabOrder,
  StringGrid_SetTabOrder,
  StringGrid_GetVisible,
  StringGrid_SetVisible,
  StringGrid_GetVisibleColCount,
  StringGrid_GetVisibleRowCount,
  StringGrid_SetOnClick,
  StringGrid_SetOnContextPopup,
  StringGrid_SetOnDblClick,
  StringGrid_SetOnDragDrop,
  StringGrid_SetOnDragOver,
  StringGrid_SetOnDrawCell,
  StringGrid_SetOnEndDock,
  StringGrid_SetOnEndDrag,
  StringGrid_SetOnEnter,
  StringGrid_SetOnExit,
  StringGrid_SetOnGetEditMask,
  StringGrid_SetOnGetEditText,
  StringGrid_SetOnKeyDown,
  StringGrid_SetOnKeyPress,
  StringGrid_SetOnKeyUp,
  StringGrid_SetOnMouseDown,
  StringGrid_SetOnMouseEnter,
  StringGrid_SetOnMouseLeave,
  StringGrid_SetOnMouseMove,
  StringGrid_SetOnMouseUp,
  StringGrid_SetOnMouseWheelDown,
  StringGrid_SetOnMouseWheelUp,
  StringGrid_SetOnSelectCell,
  StringGrid_SetOnSetEditText,
  StringGrid_SetOnStartDock,
  StringGrid_SetOnTopLeftChanged,
  StringGrid_GetCanvas,
  StringGrid_GetCol,
  StringGrid_SetCol,
  StringGrid_GetGridHeight,
  StringGrid_GetGridWidth,
  StringGrid_GetLeftCol,
  StringGrid_SetLeftCol,
  StringGrid_GetSelection,
  StringGrid_SetSelection,
  StringGrid_GetRow,
  StringGrid_SetRow,
  StringGrid_GetTopRow,
  StringGrid_SetTopRow,
  StringGrid_GetTabStop,
  StringGrid_SetTabStop,
  StringGrid_GetDockClientCount,
  StringGrid_GetDockSite,
  StringGrid_SetDockSite,
  StringGrid_GetMouseInClient,
  StringGrid_GetVisibleDockClientCount,
  StringGrid_GetBrush,
  StringGrid_GetControlCount,
  StringGrid_GetHandle,
  StringGrid_GetParentWindow,
  StringGrid_SetParentWindow,
  StringGrid_GetShowing,
  StringGrid_GetUseDockManager,
  StringGrid_SetUseDockManager,
  StringGrid_GetAction,
  StringGrid_SetAction,
  StringGrid_GetBoundsRect,
  StringGrid_SetBoundsRect,
  StringGrid_GetClientHeight,
  StringGrid_SetClientHeight,
  StringGrid_GetClientOrigin,
  StringGrid_GetClientRect,
  StringGrid_GetClientWidth,
  StringGrid_SetClientWidth,
  StringGrid_GetControlState,
  StringGrid_SetControlState,
  StringGrid_GetControlStyle,
  StringGrid_SetControlStyle,
  StringGrid_GetFloating,
  StringGrid_GetParent,
  StringGrid_SetParent,
  StringGrid_GetLeft,
  StringGrid_SetLeft,
  StringGrid_GetTop,
  StringGrid_SetTop,
  StringGrid_GetWidth,
  StringGrid_SetWidth,
  StringGrid_GetHeight,
  StringGrid_SetHeight,
  StringGrid_GetCursor,
  StringGrid_SetCursor,
  StringGrid_GetHint,
  StringGrid_SetHint,
  StringGrid_GetComponentCount,
  StringGrid_GetComponentIndex,
  StringGrid_SetComponentIndex,
  StringGrid_GetOwner,
  StringGrid_GetName,
  StringGrid_SetName,
  StringGrid_GetTag,
  StringGrid_SetTag,
  StringGrid_GetAnchorSideLeft,
  StringGrid_SetAnchorSideLeft,
  StringGrid_GetAnchorSideTop,
  StringGrid_SetAnchorSideTop,
  StringGrid_GetAnchorSideRight,
  StringGrid_SetAnchorSideRight,
  StringGrid_GetAnchorSideBottom,
  StringGrid_SetAnchorSideBottom,
  StringGrid_GetChildSizing,
  StringGrid_SetChildSizing,
  StringGrid_GetBorderSpacing,
  StringGrid_SetBorderSpacing,
  StringGrid_GetIsCellSelected,
  StringGrid_GetCells,
  StringGrid_SetCells,
  StringGrid_GetCols,
  StringGrid_SetCols,
  StringGrid_GetObjects,
  StringGrid_SetObjects,
  StringGrid_GetRows,
  StringGrid_SetRows,
  StringGrid_GetColWidths,
  StringGrid_SetColWidths,
  StringGrid_GetRowHeights,
  StringGrid_SetRowHeights,
  StringGrid_GetDockClients,
  StringGrid_GetControls,
  StringGrid_GetComponents,
  StringGrid_GetAnchorSide,
  StringGrid_StaticClassType;

