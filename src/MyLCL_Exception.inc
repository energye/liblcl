
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

//CLASSMETHOD:
function Exception_ToString(AObj: Exception): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_ClassType(AObj: Exception): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_ClassName(AObj: Exception): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_InstanceSize(AObj: Exception): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_InheritsFrom(AObj: Exception; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_Equals(AObj: Exception; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Exception_GetHashCode(AObj: Exception): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

function Exception_GetMessage(AObj: Exception): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Message);
  handleExceptionEnd
end;

procedure Exception_SetMessage(AObj: Exception; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Message := AValue;
  handleExceptionEnd
end;

function Exception_StaticClassType: TClass; extdecl;
begin
  Result := Exception;
end;

exports
  Exception_ToString,
  Exception_ClassType,
  Exception_ClassName,
  Exception_InstanceSize,
  Exception_InheritsFrom,
  Exception_Equals,
  Exception_GetHashCode,
  Exception_GetMessage,
  Exception_SetMessage,
  Exception_StaticClassType;

