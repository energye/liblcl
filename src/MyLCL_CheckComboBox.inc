
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function CheckComboBox_Create(AOwner: TComponent): TCheckComboBox; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TCheckComboBox.Create(AOwner);
  handleExceptionEnd
end;

procedure CheckComboBox_Free(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AddItem(AObj: TCheckComboBox; AItem: PChar; AState: TCheckBoxState; AEnabled: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AddItem(AItem, AState, AEnabled);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AssignItems(AObj: TCheckComboBox; AItems: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.AssignItems(AItems);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Clear(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_DeleteItem(AObj: TCheckComboBox; AIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DeleteItem(AIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_CheckAll(AObj: TCheckComboBox; AState: TCheckBoxState; AAllowGrayed: LongBool; AAllowDisabled: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.CheckAll(AState, AAllowGrayed, AAllowDisabled);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Toggle(AObj: TCheckComboBox; AIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Toggle(AIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_ClearSelection(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Focused(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_SelectAll(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_CanFocus(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ContainsControl(AObj: TCheckComboBox; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function CheckComboBox_ControlAtPos(AObj: TCheckComboBox; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_DisableAlign(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_EnableAlign(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_FindChildControl(AObj: TCheckComboBox; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_FlipChildren(AObj: TCheckComboBox; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_HandleAllocated(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_InsertControl(AObj: TCheckComboBox; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Invalidate(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_PaintTo(AObj: TCheckComboBox; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_RemoveControl(AObj: TCheckComboBox; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Realign(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Repaint(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_ScaleBy(AObj: TCheckComboBox; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_ScrollBy(AObj: TCheckComboBox; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_SetBounds(AObj: TCheckComboBox; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_SetFocus(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Update(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_BringToFront(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure CheckComboBox_ClientToScreen(AObj: TCheckComboBox; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure CheckComboBox_ClientToParent(AObj: TCheckComboBox; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Dragging(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_HasParent(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Hide(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Perform(AObj: TCheckComboBox; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Refresh(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure CheckComboBox_ScreenToClient(AObj: TCheckComboBox; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure CheckComboBox_ParentToClient(AObj: TCheckComboBox; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_SendToBack(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Show(AObj: TCheckComboBox); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_GetTextBuf(AObj: TCheckComboBox; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_GetTextLen(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_SetTextBuf(AObj: TCheckComboBox; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_FindComponent(AObj: TCheckComboBox; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_GetNamePath(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_Assign(AObj: TCheckComboBox; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ClassType(AObj: TCheckComboBox): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ClassName(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_InstanceSize(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_InheritsFrom(AObj: TCheckComboBox; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Equals(AObj: TCheckComboBox; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_GetHashCode(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ToString(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorToNeighbour(AObj: TCheckComboBox; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorParallel(AObj: TCheckComboBox; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorHorizontalCenterTo(AObj: TCheckComboBox; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorVerticalCenterTo(AObj: TCheckComboBox; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorSame(AObj: TCheckComboBox; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorAsAlign(AObj: TCheckComboBox; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AnchorClient(AObj: TCheckComboBox; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleDesignToForm(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleFormToDesign(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Scale96ToForm(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleFormTo96(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Scale96ToFont(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleFontTo96(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleScreenToFont(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleFontToScreen(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_Scale96ToScreen(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function CheckComboBox_ScaleScreenTo96(AObj: TCheckComboBox; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_AutoAdjustLayout(AObj: TCheckComboBox; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure CheckComboBox_FixDesignFontsPPI(AObj: TCheckComboBox; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure CheckComboBox_ScaleFontsPPI(AObj: TCheckComboBox; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function CheckComboBox_GetAlign(AObj: TCheckComboBox): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAlign(AObj: TCheckComboBox; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAllowGrayed(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AllowGrayed;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAllowGrayed(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AllowGrayed := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAnchors(AObj: TCheckComboBox): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAnchors(AObj: TCheckComboBox; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAutoDropDown(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoDropDown;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAutoDropDown(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoDropDown := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAutoSize(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAutoSize(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetColor(AObj: TCheckComboBox): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure CheckComboBox_SetColor(AObj: TCheckComboBox; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetConstraints(AObj: TCheckComboBox): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure CheckComboBox_SetConstraints(AObj: TCheckComboBox; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function CheckComboBox_GetDragCursor(AObj: TCheckComboBox): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDragCursor(AObj: TCheckComboBox; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDragKind(AObj: TCheckComboBox): TDragKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDragKind(AObj: TCheckComboBox; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDragMode(AObj: TCheckComboBox): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDragMode(AObj: TCheckComboBox; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDropDownCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DropDownCount;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDropDownCount(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.DropDownCount := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetEnabled(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure CheckComboBox_SetEnabled(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetFont(AObj: TCheckComboBox): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure CheckComboBox_SetFont(AObj: TCheckComboBox; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetItemHeight(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemHeight;
  handleExceptionEnd
end;

procedure CheckComboBox_SetItemHeight(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemHeight := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetItemIndex(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemIndex;
  handleExceptionEnd
end;

procedure CheckComboBox_SetItemIndex(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemIndex := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetItems(AObj: TCheckComboBox): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

procedure CheckComboBox_SetItems(AObj: TCheckComboBox; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Items := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetItemWidth(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemWidth;
  handleExceptionEnd
end;

procedure CheckComboBox_SetItemWidth(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemWidth := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetMaxLength(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxLength;
  handleExceptionEnd
end;

procedure CheckComboBox_SetMaxLength(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxLength := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnChange(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnClick(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnCloseUp(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnCloseUp}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure CheckComboBox_SetOnContextPopup(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnDblClick(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure CheckComboBox_SetOnDragDrop(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure CheckComboBox_SetOnDragOver(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure CheckComboBox_SetOnEndDrag(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnDropDown(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDropDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnEnter(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnExit(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TCheckItemChange
procedure CheckComboBox_SetOnItemChange(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTCheckItemChange}
  {$DEFINE EventName := OnItemChange}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure CheckComboBox_SetOnKeyDown(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure CheckComboBox_SetOnKeyPress(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure CheckComboBox_SetOnKeyUp(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure CheckComboBox_SetOnMouseDown(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnMouseEnter(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnMouseLeave(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure CheckComboBox_SetOnMouseMove(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure CheckComboBox_SetOnMouseUp(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelEvent
procedure CheckComboBox_SetOnMouseWheel(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelEvent}
  {$DEFINE EventName := OnMouseWheel}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure CheckComboBox_SetOnMouseWheelDown(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure CheckComboBox_SetOnMouseWheelUp(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure CheckComboBox_SetOnSelect(AObj: TCheckComboBox; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnSelect}
  EventMethodCode
end;

function CheckComboBox_GetParentColor(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParentColor(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetParentFont(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParentFont(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetParentShowHint(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParentShowHint(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetPopupMenu(AObj: TCheckComboBox): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure CheckComboBox_SetPopupMenu(AObj: TCheckComboBox; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetShowHint(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure CheckComboBox_SetShowHint(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetSorted(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Sorted;
  handleExceptionEnd
end;

procedure CheckComboBox_SetSorted(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Sorted := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetTabOrder(AObj: TCheckComboBox): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure CheckComboBox_SetTabOrder(AObj: TCheckComboBox; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetTabStop(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure CheckComboBox_SetTabStop(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetText(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure CheckComboBox_SetText(AObj: TCheckComboBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetTextHint(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure CheckComboBox_SetTextHint(AObj: TCheckComboBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetVisible(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure CheckComboBox_SetVisible(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAutoComplete(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoComplete;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAutoComplete(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoComplete := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetCharCase(AObj: TCheckComboBox): TEditCharCase; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TEditCharCase);{$endif}
  handleExceptionBegin
  Result :=  AObj.CharCase;
  handleExceptionEnd
end;

procedure CheckComboBox_SetCharCase(AObj: TCheckComboBox; AValue: TEditCharCase); extdecl;
begin
  handleExceptionBegin
  AObj.CharCase := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetSelText(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure CheckComboBox_SetSelText(AObj: TCheckComboBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetCanvas(AObj: TCheckComboBox): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function CheckComboBox_GetDroppedDown(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DroppedDown;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDroppedDown(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DroppedDown := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetSelLength(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure CheckComboBox_SetSelLength(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetSelStart(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure CheckComboBox_SetSelStart(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDockClientCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function CheckComboBox_GetDockSite(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDockSite(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDoubleBuffered(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure CheckComboBox_SetDoubleBuffered(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetMouseInClient(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function CheckComboBox_GetVisibleDockClientCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function CheckComboBox_GetBrush(AObj: TCheckComboBox): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function CheckComboBox_GetControlCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function CheckComboBox_GetHandle(AObj: TCheckComboBox): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function CheckComboBox_GetParentDoubleBuffered(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParentDoubleBuffered(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetParentWindow(AObj: TCheckComboBox): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParentWindow(AObj: TCheckComboBox; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetShowing(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function CheckComboBox_GetUseDockManager(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure CheckComboBox_SetUseDockManager(AObj: TCheckComboBox; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAction(AObj: TCheckComboBox): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAction(AObj: TCheckComboBox; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetBiDiMode(AObj: TCheckComboBox): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure CheckComboBox_SetBiDiMode(AObj: TCheckComboBox; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure CheckComboBox_GetBoundsRect(AObj: TCheckComboBox; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure CheckComboBox_SetBoundsRect(AObj: TCheckComboBox; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetClientHeight(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure CheckComboBox_SetClientHeight(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure CheckComboBox_GetClientOrigin(AObj: TCheckComboBox; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure CheckComboBox_GetClientRect(AObj: TCheckComboBox; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function CheckComboBox_GetClientWidth(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure CheckComboBox_SetClientWidth(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetControlState(AObj: TCheckComboBox): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure CheckComboBox_SetControlState(AObj: TCheckComboBox; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetControlStyle(AObj: TCheckComboBox): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure CheckComboBox_SetControlStyle(AObj: TCheckComboBox; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetFloating(AObj: TCheckComboBox): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function CheckComboBox_GetParent(AObj: TCheckComboBox): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure CheckComboBox_SetParent(AObj: TCheckComboBox; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetLeft(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure CheckComboBox_SetLeft(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetTop(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure CheckComboBox_SetTop(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetWidth(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure CheckComboBox_SetWidth(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetHeight(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure CheckComboBox_SetHeight(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetCursor(AObj: TCheckComboBox): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure CheckComboBox_SetCursor(AObj: TCheckComboBox; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetHint(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure CheckComboBox_SetHint(AObj: TCheckComboBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetComponentCount(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function CheckComboBox_GetComponentIndex(AObj: TCheckComboBox): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure CheckComboBox_SetComponentIndex(AObj: TCheckComboBox; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetOwner(AObj: TCheckComboBox): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function CheckComboBox_GetName(AObj: TCheckComboBox): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure CheckComboBox_SetName(AObj: TCheckComboBox; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetTag(AObj: TCheckComboBox): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure CheckComboBox_SetTag(AObj: TCheckComboBox; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAnchorSideLeft(AObj: TCheckComboBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAnchorSideLeft(AObj: TCheckComboBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAnchorSideTop(AObj: TCheckComboBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAnchorSideTop(AObj: TCheckComboBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAnchorSideRight(AObj: TCheckComboBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAnchorSideRight(AObj: TCheckComboBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetAnchorSideBottom(AObj: TCheckComboBox): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure CheckComboBox_SetAnchorSideBottom(AObj: TCheckComboBox; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetChildSizing(AObj: TCheckComboBox): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure CheckComboBox_SetChildSizing(AObj: TCheckComboBox; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetBorderSpacing(AObj: TCheckComboBox): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure CheckComboBox_SetBorderSpacing(AObj: TCheckComboBox; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetChecked(AObj: TCheckComboBox; AIndex: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Checked[AIndex];
  handleExceptionEnd
end;

procedure CheckComboBox_SetChecked(AObj: TCheckComboBox; AIndex: Integer; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Checked[AIndex] := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetItemEnabled(AObj: TCheckComboBox; AIndex: Integer): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemEnabled[AIndex];
  handleExceptionEnd
end;

procedure CheckComboBox_SetItemEnabled(AObj: TCheckComboBox; AIndex: Integer; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ItemEnabled[AIndex] := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetObjects(AObj: TCheckComboBox; AIndex: Integer): TObject; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Objects[AIndex];
  handleExceptionEnd
end;

procedure CheckComboBox_SetObjects(AObj: TCheckComboBox; AIndex: Integer; AValue: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.Objects[AIndex] := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetState(AObj: TCheckComboBox; AIndex: Integer): TCheckBoxState; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TCheckBoxState);{$endif}
  handleExceptionBegin
  Result :=  AObj.State[AIndex];
  handleExceptionEnd
end;

procedure CheckComboBox_SetState(AObj: TCheckComboBox; AIndex: Integer; AValue: TCheckBoxState); extdecl;
begin
  handleExceptionBegin
  AObj.State[AIndex] := AValue;
  handleExceptionEnd
end;

function CheckComboBox_GetDockClients(AObj: TCheckComboBox; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function CheckComboBox_GetControls(AObj: TCheckComboBox; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function CheckComboBox_GetComponents(AObj: TCheckComboBox; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function CheckComboBox_GetAnchorSide(AObj: TCheckComboBox; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function CheckComboBox_StaticClassType: TClass; extdecl;
begin
  Result := TCheckComboBox;
end;

exports
  CheckComboBox_Create,
  CheckComboBox_Free,
  CheckComboBox_AddItem,
  CheckComboBox_AssignItems,
  CheckComboBox_Clear,
  CheckComboBox_DeleteItem,
  CheckComboBox_CheckAll,
  CheckComboBox_Toggle,
  CheckComboBox_ClearSelection,
  CheckComboBox_Focused,
  CheckComboBox_SelectAll,
  CheckComboBox_CanFocus,
  CheckComboBox_ContainsControl,
  CheckComboBox_ControlAtPos,
  CheckComboBox_DisableAlign,
  CheckComboBox_EnableAlign,
  CheckComboBox_FindChildControl,
  CheckComboBox_FlipChildren,
  CheckComboBox_HandleAllocated,
  CheckComboBox_InsertControl,
  CheckComboBox_Invalidate,
  CheckComboBox_PaintTo,
  CheckComboBox_RemoveControl,
  CheckComboBox_Realign,
  CheckComboBox_Repaint,
  CheckComboBox_ScaleBy,
  CheckComboBox_ScrollBy,
  CheckComboBox_SetBounds,
  CheckComboBox_SetFocus,
  CheckComboBox_Update,
  CheckComboBox_BringToFront,
  CheckComboBox_ClientToScreen,
  CheckComboBox_ClientToParent,
  CheckComboBox_Dragging,
  CheckComboBox_HasParent,
  CheckComboBox_Hide,
  CheckComboBox_Perform,
  CheckComboBox_Refresh,
  CheckComboBox_ScreenToClient,
  CheckComboBox_ParentToClient,
  CheckComboBox_SendToBack,
  CheckComboBox_Show,
  CheckComboBox_GetTextBuf,
  CheckComboBox_GetTextLen,
  CheckComboBox_SetTextBuf,
  CheckComboBox_FindComponent,
  CheckComboBox_GetNamePath,
  CheckComboBox_Assign,
  CheckComboBox_ClassType,
  CheckComboBox_ClassName,
  CheckComboBox_InstanceSize,
  CheckComboBox_InheritsFrom,
  CheckComboBox_Equals,
  CheckComboBox_GetHashCode,
  CheckComboBox_ToString,
  CheckComboBox_AnchorToNeighbour,
  CheckComboBox_AnchorParallel,
  CheckComboBox_AnchorHorizontalCenterTo,
  CheckComboBox_AnchorVerticalCenterTo,
  CheckComboBox_AnchorSame,
  CheckComboBox_AnchorAsAlign,
  CheckComboBox_AnchorClient,
  CheckComboBox_ScaleDesignToForm,
  CheckComboBox_ScaleFormToDesign,
  CheckComboBox_Scale96ToForm,
  CheckComboBox_ScaleFormTo96,
  CheckComboBox_Scale96ToFont,
  CheckComboBox_ScaleFontTo96,
  CheckComboBox_ScaleScreenToFont,
  CheckComboBox_ScaleFontToScreen,
  CheckComboBox_Scale96ToScreen,
  CheckComboBox_ScaleScreenTo96,
  CheckComboBox_AutoAdjustLayout,
  CheckComboBox_FixDesignFontsPPI,
  CheckComboBox_ScaleFontsPPI,
  CheckComboBox_GetAlign,
  CheckComboBox_SetAlign,
  CheckComboBox_GetAllowGrayed,
  CheckComboBox_SetAllowGrayed,
  CheckComboBox_GetAnchors,
  CheckComboBox_SetAnchors,
  CheckComboBox_GetAutoDropDown,
  CheckComboBox_SetAutoDropDown,
  CheckComboBox_GetAutoSize,
  CheckComboBox_SetAutoSize,
  CheckComboBox_GetColor,
  CheckComboBox_SetColor,
  CheckComboBox_GetConstraints,
  CheckComboBox_SetConstraints,
  CheckComboBox_GetCount,
  CheckComboBox_GetDragCursor,
  CheckComboBox_SetDragCursor,
  CheckComboBox_GetDragKind,
  CheckComboBox_SetDragKind,
  CheckComboBox_GetDragMode,
  CheckComboBox_SetDragMode,
  CheckComboBox_GetDropDownCount,
  CheckComboBox_SetDropDownCount,
  CheckComboBox_GetEnabled,
  CheckComboBox_SetEnabled,
  CheckComboBox_GetFont,
  CheckComboBox_SetFont,
  CheckComboBox_GetItemHeight,
  CheckComboBox_SetItemHeight,
  CheckComboBox_GetItemIndex,
  CheckComboBox_SetItemIndex,
  CheckComboBox_GetItems,
  CheckComboBox_SetItems,
  CheckComboBox_GetItemWidth,
  CheckComboBox_SetItemWidth,
  CheckComboBox_GetMaxLength,
  CheckComboBox_SetMaxLength,
  CheckComboBox_SetOnChange,
  CheckComboBox_SetOnClick,
  CheckComboBox_SetOnCloseUp,
  CheckComboBox_SetOnContextPopup,
  CheckComboBox_SetOnDblClick,
  CheckComboBox_SetOnDragDrop,
  CheckComboBox_SetOnDragOver,
  CheckComboBox_SetOnEndDrag,
  CheckComboBox_SetOnDropDown,
  CheckComboBox_SetOnEnter,
  CheckComboBox_SetOnExit,
  CheckComboBox_SetOnItemChange,
  CheckComboBox_SetOnKeyDown,
  CheckComboBox_SetOnKeyPress,
  CheckComboBox_SetOnKeyUp,
  CheckComboBox_SetOnMouseDown,
  CheckComboBox_SetOnMouseEnter,
  CheckComboBox_SetOnMouseLeave,
  CheckComboBox_SetOnMouseMove,
  CheckComboBox_SetOnMouseUp,
  CheckComboBox_SetOnMouseWheel,
  CheckComboBox_SetOnMouseWheelDown,
  CheckComboBox_SetOnMouseWheelUp,
  CheckComboBox_SetOnSelect,
  CheckComboBox_GetParentColor,
  CheckComboBox_SetParentColor,
  CheckComboBox_GetParentFont,
  CheckComboBox_SetParentFont,
  CheckComboBox_GetParentShowHint,
  CheckComboBox_SetParentShowHint,
  CheckComboBox_GetPopupMenu,
  CheckComboBox_SetPopupMenu,
  CheckComboBox_GetShowHint,
  CheckComboBox_SetShowHint,
  CheckComboBox_GetSorted,
  CheckComboBox_SetSorted,
  CheckComboBox_GetTabOrder,
  CheckComboBox_SetTabOrder,
  CheckComboBox_GetTabStop,
  CheckComboBox_SetTabStop,
  CheckComboBox_GetText,
  CheckComboBox_SetText,
  CheckComboBox_GetTextHint,
  CheckComboBox_SetTextHint,
  CheckComboBox_GetVisible,
  CheckComboBox_SetVisible,
  CheckComboBox_GetAutoComplete,
  CheckComboBox_SetAutoComplete,
  CheckComboBox_GetCharCase,
  CheckComboBox_SetCharCase,
  CheckComboBox_GetSelText,
  CheckComboBox_SetSelText,
  CheckComboBox_GetCanvas,
  CheckComboBox_GetDroppedDown,
  CheckComboBox_SetDroppedDown,
  CheckComboBox_GetSelLength,
  CheckComboBox_SetSelLength,
  CheckComboBox_GetSelStart,
  CheckComboBox_SetSelStart,
  CheckComboBox_GetDockClientCount,
  CheckComboBox_GetDockSite,
  CheckComboBox_SetDockSite,
  CheckComboBox_GetDoubleBuffered,
  CheckComboBox_SetDoubleBuffered,
  CheckComboBox_GetMouseInClient,
  CheckComboBox_GetVisibleDockClientCount,
  CheckComboBox_GetBrush,
  CheckComboBox_GetControlCount,
  CheckComboBox_GetHandle,
  CheckComboBox_GetParentDoubleBuffered,
  CheckComboBox_SetParentDoubleBuffered,
  CheckComboBox_GetParentWindow,
  CheckComboBox_SetParentWindow,
  CheckComboBox_GetShowing,
  CheckComboBox_GetUseDockManager,
  CheckComboBox_SetUseDockManager,
  CheckComboBox_GetAction,
  CheckComboBox_SetAction,
  CheckComboBox_GetBiDiMode,
  CheckComboBox_SetBiDiMode,
  CheckComboBox_GetBoundsRect,
  CheckComboBox_SetBoundsRect,
  CheckComboBox_GetClientHeight,
  CheckComboBox_SetClientHeight,
  CheckComboBox_GetClientOrigin,
  CheckComboBox_GetClientRect,
  CheckComboBox_GetClientWidth,
  CheckComboBox_SetClientWidth,
  CheckComboBox_GetControlState,
  CheckComboBox_SetControlState,
  CheckComboBox_GetControlStyle,
  CheckComboBox_SetControlStyle,
  CheckComboBox_GetFloating,
  CheckComboBox_GetParent,
  CheckComboBox_SetParent,
  CheckComboBox_GetLeft,
  CheckComboBox_SetLeft,
  CheckComboBox_GetTop,
  CheckComboBox_SetTop,
  CheckComboBox_GetWidth,
  CheckComboBox_SetWidth,
  CheckComboBox_GetHeight,
  CheckComboBox_SetHeight,
  CheckComboBox_GetCursor,
  CheckComboBox_SetCursor,
  CheckComboBox_GetHint,
  CheckComboBox_SetHint,
  CheckComboBox_GetComponentCount,
  CheckComboBox_GetComponentIndex,
  CheckComboBox_SetComponentIndex,
  CheckComboBox_GetOwner,
  CheckComboBox_GetName,
  CheckComboBox_SetName,
  CheckComboBox_GetTag,
  CheckComboBox_SetTag,
  CheckComboBox_GetAnchorSideLeft,
  CheckComboBox_SetAnchorSideLeft,
  CheckComboBox_GetAnchorSideTop,
  CheckComboBox_SetAnchorSideTop,
  CheckComboBox_GetAnchorSideRight,
  CheckComboBox_SetAnchorSideRight,
  CheckComboBox_GetAnchorSideBottom,
  CheckComboBox_SetAnchorSideBottom,
  CheckComboBox_GetChildSizing,
  CheckComboBox_SetChildSizing,
  CheckComboBox_GetBorderSpacing,
  CheckComboBox_SetBorderSpacing,
  CheckComboBox_GetChecked,
  CheckComboBox_SetChecked,
  CheckComboBox_GetItemEnabled,
  CheckComboBox_SetItemEnabled,
  CheckComboBox_GetObjects,
  CheckComboBox_SetObjects,
  CheckComboBox_GetState,
  CheckComboBox_SetState,
  CheckComboBox_GetDockClients,
  CheckComboBox_GetControls,
  CheckComboBox_GetComponents,
  CheckComboBox_GetAnchorSide,
  CheckComboBox_StaticClassType;

