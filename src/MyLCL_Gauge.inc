
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Gauge_Create(AOwner: TComponent): TGauge; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TGauge.Create(AOwner);
  handleExceptionEnd
end;

procedure Gauge_Free(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AddProgress(AObj: TGauge; Value: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AddProgress(Value);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_BringToFront(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Gauge_ClientToScreen(AObj: TGauge; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Gauge_ClientToParent(AObj: TGauge; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Dragging(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_HasParent(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Hide(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Invalidate(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Perform(AObj: TGauge; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Refresh(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Repaint(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Gauge_ScreenToClient(AObj: TGauge; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure Gauge_ParentToClient(AObj: TGauge; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_SendToBack(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_SetBounds(AObj: TGauge; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Show(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Update(AObj: TGauge); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_GetTextBuf(AObj: TGauge; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_GetTextLen(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_SetTextBuf(AObj: TGauge; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_FindComponent(AObj: TGauge; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_GetNamePath(AObj: TGauge): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_Assign(AObj: TGauge; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ClassType(AObj: TGauge): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ClassName(AObj: TGauge): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_InstanceSize(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_InheritsFrom(AObj: TGauge; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Equals(AObj: TGauge; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_GetHashCode(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ToString(AObj: TGauge): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorToNeighbour(AObj: TGauge; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorParallel(AObj: TGauge; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorHorizontalCenterTo(AObj: TGauge; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorVerticalCenterTo(AObj: TGauge; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorSame(AObj: TGauge; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorAsAlign(AObj: TGauge; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AnchorClient(AObj: TGauge; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleDesignToForm(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleFormToDesign(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Scale96ToForm(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleFormTo96(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Scale96ToFont(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleFontTo96(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleScreenToFont(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleFontToScreen(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_Scale96ToScreen(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Gauge_ScaleScreenTo96(AObj: TGauge; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_AutoAdjustLayout(AObj: TGauge; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Gauge_FixDesignFontsPPI(AObj: TGauge; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure Gauge_ScaleFontsPPI(AObj: TGauge; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function Gauge_GetPercentDone(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.PercentDone;
  handleExceptionEnd
end;

function Gauge_GetAlign(AObj: TGauge): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure Gauge_SetAlign(AObj: TGauge; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function Gauge_GetAnchors(AObj: TGauge): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure Gauge_SetAnchors(AObj: TGauge; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function Gauge_GetBackColor(AObj: TGauge): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.BackColor;
  handleExceptionEnd
end;

procedure Gauge_SetBackColor(AObj: TGauge; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.BackColor := AValue;
  handleExceptionEnd
end;

function Gauge_GetBorderStyle(AObj: TGauge): TBorderStyle; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBorderStyle);{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderStyle;
  handleExceptionEnd
end;

procedure Gauge_SetBorderStyle(AObj: TGauge; AValue: TBorderStyle); extdecl;
begin
  handleExceptionBegin
  AObj.BorderStyle := AValue;
  handleExceptionEnd
end;

function Gauge_GetColor(AObj: TGauge): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure Gauge_SetColor(AObj: TGauge; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function Gauge_GetConstraints(AObj: TGauge): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure Gauge_SetConstraints(AObj: TGauge; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function Gauge_GetEnabled(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Gauge_SetEnabled(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Gauge_GetForeColor(AObj: TGauge): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ForeColor;
  handleExceptionEnd
end;

procedure Gauge_SetForeColor(AObj: TGauge; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.ForeColor := AValue;
  handleExceptionEnd
end;

function Gauge_GetFont(AObj: TGauge): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure Gauge_SetFont(AObj: TGauge; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function Gauge_GetKind(AObj: TGauge): TGaugeKind; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TGaugeKind);{$endif}
  handleExceptionBegin
  Result :=  AObj.Kind;
  handleExceptionEnd
end;

procedure Gauge_SetKind(AObj: TGauge; AValue: TGaugeKind); extdecl;
begin
  handleExceptionBegin
  AObj.Kind := AValue;
  handleExceptionEnd
end;

function Gauge_GetMinValue(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MinValue;
  handleExceptionEnd
end;

procedure Gauge_SetMinValue(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MinValue := AValue;
  handleExceptionEnd
end;

function Gauge_GetMaxValue(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxValue;
  handleExceptionEnd
end;

procedure Gauge_SetMaxValue(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxValue := AValue;
  handleExceptionEnd
end;

function Gauge_GetParentColor(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure Gauge_SetParentColor(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function Gauge_GetParentFont(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure Gauge_SetParentFont(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function Gauge_GetParentShowHint(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure Gauge_SetParentShowHint(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function Gauge_GetPopupMenu(AObj: TGauge): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure Gauge_SetPopupMenu(AObj: TGauge; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function Gauge_GetProgress(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Progress;
  handleExceptionEnd
end;

procedure Gauge_SetProgress(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Progress := AValue;
  handleExceptionEnd
end;

function Gauge_GetShowHint(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Gauge_SetShowHint(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Gauge_GetShowText(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowText;
  handleExceptionEnd
end;

procedure Gauge_SetShowText(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowText := AValue;
  handleExceptionEnd
end;

function Gauge_GetVisible(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Gauge_SetVisible(AObj: TGauge; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

function Gauge_GetAction(AObj: TGauge): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure Gauge_SetAction(AObj: TGauge; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function Gauge_GetBiDiMode(AObj: TGauge): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Gauge_SetBiDiMode(AObj: TGauge; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Gauge_GetBoundsRect(AObj: TGauge; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure Gauge_SetBoundsRect(AObj: TGauge; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function Gauge_GetClientHeight(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure Gauge_SetClientHeight(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Gauge_GetClientOrigin(AObj: TGauge; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure Gauge_GetClientRect(AObj: TGauge; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function Gauge_GetClientWidth(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure Gauge_SetClientWidth(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function Gauge_GetControlState(AObj: TGauge): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure Gauge_SetControlState(AObj: TGauge; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function Gauge_GetControlStyle(AObj: TGauge): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure Gauge_SetControlStyle(AObj: TGauge; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function Gauge_GetFloating(AObj: TGauge): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function Gauge_GetParent(AObj: TGauge): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure Gauge_SetParent(AObj: TGauge; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function Gauge_GetLeft(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure Gauge_SetLeft(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function Gauge_GetTop(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure Gauge_SetTop(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function Gauge_GetWidth(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure Gauge_SetWidth(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function Gauge_GetHeight(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Gauge_SetHeight(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Gauge_GetCursor(AObj: TGauge): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure Gauge_SetCursor(AObj: TGauge; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function Gauge_GetHint(AObj: TGauge): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Gauge_SetHint(AObj: TGauge; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Gauge_GetComponentCount(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Gauge_GetComponentIndex(AObj: TGauge): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Gauge_SetComponentIndex(AObj: TGauge; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Gauge_GetOwner(AObj: TGauge): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Gauge_GetName(AObj: TGauge): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Gauge_SetName(AObj: TGauge; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Gauge_GetTag(AObj: TGauge): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Gauge_SetTag(AObj: TGauge; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Gauge_GetAnchorSideLeft(AObj: TGauge): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure Gauge_SetAnchorSideLeft(AObj: TGauge; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function Gauge_GetAnchorSideTop(AObj: TGauge): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure Gauge_SetAnchorSideTop(AObj: TGauge; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function Gauge_GetAnchorSideRight(AObj: TGauge): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure Gauge_SetAnchorSideRight(AObj: TGauge; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function Gauge_GetAnchorSideBottom(AObj: TGauge): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure Gauge_SetAnchorSideBottom(AObj: TGauge; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function Gauge_GetBorderSpacing(AObj: TGauge): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure Gauge_SetBorderSpacing(AObj: TGauge; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function Gauge_GetComponents(AObj: TGauge; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Gauge_GetAnchorSide(AObj: TGauge; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function Gauge_StaticClassType: TClass; extdecl;
begin
  Result := TGauge;
end;

exports
  Gauge_Create,
  Gauge_Free,
  Gauge_AddProgress,
  Gauge_BringToFront,
  Gauge_ClientToScreen,
  Gauge_ClientToParent,
  Gauge_Dragging,
  Gauge_HasParent,
  Gauge_Hide,
  Gauge_Invalidate,
  Gauge_Perform,
  Gauge_Refresh,
  Gauge_Repaint,
  Gauge_ScreenToClient,
  Gauge_ParentToClient,
  Gauge_SendToBack,
  Gauge_SetBounds,
  Gauge_Show,
  Gauge_Update,
  Gauge_GetTextBuf,
  Gauge_GetTextLen,
  Gauge_SetTextBuf,
  Gauge_FindComponent,
  Gauge_GetNamePath,
  Gauge_Assign,
  Gauge_ClassType,
  Gauge_ClassName,
  Gauge_InstanceSize,
  Gauge_InheritsFrom,
  Gauge_Equals,
  Gauge_GetHashCode,
  Gauge_ToString,
  Gauge_AnchorToNeighbour,
  Gauge_AnchorParallel,
  Gauge_AnchorHorizontalCenterTo,
  Gauge_AnchorVerticalCenterTo,
  Gauge_AnchorSame,
  Gauge_AnchorAsAlign,
  Gauge_AnchorClient,
  Gauge_ScaleDesignToForm,
  Gauge_ScaleFormToDesign,
  Gauge_Scale96ToForm,
  Gauge_ScaleFormTo96,
  Gauge_Scale96ToFont,
  Gauge_ScaleFontTo96,
  Gauge_ScaleScreenToFont,
  Gauge_ScaleFontToScreen,
  Gauge_Scale96ToScreen,
  Gauge_ScaleScreenTo96,
  Gauge_AutoAdjustLayout,
  Gauge_FixDesignFontsPPI,
  Gauge_ScaleFontsPPI,
  Gauge_GetPercentDone,
  Gauge_GetAlign,
  Gauge_SetAlign,
  Gauge_GetAnchors,
  Gauge_SetAnchors,
  Gauge_GetBackColor,
  Gauge_SetBackColor,
  Gauge_GetBorderStyle,
  Gauge_SetBorderStyle,
  Gauge_GetColor,
  Gauge_SetColor,
  Gauge_GetConstraints,
  Gauge_SetConstraints,
  Gauge_GetEnabled,
  Gauge_SetEnabled,
  Gauge_GetForeColor,
  Gauge_SetForeColor,
  Gauge_GetFont,
  Gauge_SetFont,
  Gauge_GetKind,
  Gauge_SetKind,
  Gauge_GetMinValue,
  Gauge_SetMinValue,
  Gauge_GetMaxValue,
  Gauge_SetMaxValue,
  Gauge_GetParentColor,
  Gauge_SetParentColor,
  Gauge_GetParentFont,
  Gauge_SetParentFont,
  Gauge_GetParentShowHint,
  Gauge_SetParentShowHint,
  Gauge_GetPopupMenu,
  Gauge_SetPopupMenu,
  Gauge_GetProgress,
  Gauge_SetProgress,
  Gauge_GetShowHint,
  Gauge_SetShowHint,
  Gauge_GetShowText,
  Gauge_SetShowText,
  Gauge_GetVisible,
  Gauge_SetVisible,
  Gauge_GetAction,
  Gauge_SetAction,
  Gauge_GetBiDiMode,
  Gauge_SetBiDiMode,
  Gauge_GetBoundsRect,
  Gauge_SetBoundsRect,
  Gauge_GetClientHeight,
  Gauge_SetClientHeight,
  Gauge_GetClientOrigin,
  Gauge_GetClientRect,
  Gauge_GetClientWidth,
  Gauge_SetClientWidth,
  Gauge_GetControlState,
  Gauge_SetControlState,
  Gauge_GetControlStyle,
  Gauge_SetControlStyle,
  Gauge_GetFloating,
  Gauge_GetParent,
  Gauge_SetParent,
  Gauge_GetLeft,
  Gauge_SetLeft,
  Gauge_GetTop,
  Gauge_SetTop,
  Gauge_GetWidth,
  Gauge_SetWidth,
  Gauge_GetHeight,
  Gauge_SetHeight,
  Gauge_GetCursor,
  Gauge_SetCursor,
  Gauge_GetHint,
  Gauge_SetHint,
  Gauge_GetComponentCount,
  Gauge_GetComponentIndex,
  Gauge_SetComponentIndex,
  Gauge_GetOwner,
  Gauge_GetName,
  Gauge_SetName,
  Gauge_GetTag,
  Gauge_SetTag,
  Gauge_GetAnchorSideLeft,
  Gauge_SetAnchorSideLeft,
  Gauge_GetAnchorSideTop,
  Gauge_SetAnchorSideTop,
  Gauge_GetAnchorSideRight,
  Gauge_SetAnchorSideRight,
  Gauge_GetAnchorSideBottom,
  Gauge_SetAnchorSideBottom,
  Gauge_GetBorderSpacing,
  Gauge_SetBorderSpacing,
  Gauge_GetComponents,
  Gauge_GetAnchorSide,
  Gauge_StaticClassType;

