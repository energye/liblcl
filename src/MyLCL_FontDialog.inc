
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function FontDialog_Create(AOwner: TComponent): TFontDialog; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TFontDialog.Create(AOwner);
  handleExceptionEnd
end;

procedure FontDialog_Free(AObj: TFontDialog); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_Execute(AObj: TFontDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Execute;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_FindComponent(AObj: TFontDialog; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_GetNamePath(AObj: TFontDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_HasParent(AObj: TFontDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure FontDialog_Assign(AObj: TFontDialog; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_ClassType(AObj: TFontDialog): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_ClassName(AObj: TFontDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_InstanceSize(AObj: TFontDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_InheritsFrom(AObj: TFontDialog; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_Equals(AObj: TFontDialog; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_GetHashCode(AObj: TFontDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function FontDialog_ToString(AObj: TFontDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function FontDialog_GetFont(AObj: TFontDialog): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure FontDialog_SetFont(AObj: TFontDialog; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function FontDialog_GetOptions(AObj: TFontDialog): TFontDialogOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure FontDialog_SetOptions(AObj: TFontDialog; AValue: TFontDialogOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function FontDialog_GetHandle(AObj: TFontDialog): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure FontDialog_SetOnClose(AObj: TFontDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClose}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure FontDialog_SetOnShow(AObj: TFontDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnShow}
  EventMethodCode
end;

function FontDialog_GetComponentCount(AObj: TFontDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function FontDialog_GetComponentIndex(AObj: TFontDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure FontDialog_SetComponentIndex(AObj: TFontDialog; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function FontDialog_GetOwner(AObj: TFontDialog): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function FontDialog_GetName(AObj: TFontDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure FontDialog_SetName(AObj: TFontDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function FontDialog_GetTag(AObj: TFontDialog): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure FontDialog_SetTag(AObj: TFontDialog; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function FontDialog_GetComponents(AObj: TFontDialog; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function FontDialog_StaticClassType: TClass; extdecl;
begin
  Result := TFontDialog;
end;

exports
  FontDialog_Create,
  FontDialog_Free,
  FontDialog_Execute,
  FontDialog_FindComponent,
  FontDialog_GetNamePath,
  FontDialog_HasParent,
  FontDialog_Assign,
  FontDialog_ClassType,
  FontDialog_ClassName,
  FontDialog_InstanceSize,
  FontDialog_InheritsFrom,
  FontDialog_Equals,
  FontDialog_GetHashCode,
  FontDialog_ToString,
  FontDialog_GetFont,
  FontDialog_SetFont,
  FontDialog_GetOptions,
  FontDialog_SetOptions,
  FontDialog_GetHandle,
  FontDialog_SetOnClose,
  FontDialog_SetOnShow,
  FontDialog_GetComponentCount,
  FontDialog_GetComponentIndex,
  FontDialog_SetComponentIndex,
  FontDialog_GetOwner,
  FontDialog_GetName,
  FontDialog_SetName,
  FontDialog_GetTag,
  FontDialog_SetTag,
  FontDialog_GetComponents,
  FontDialog_StaticClassType;

