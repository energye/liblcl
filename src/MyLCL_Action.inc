
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function Action_Create(AOwner: TComponent): TAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TAction.Create(AOwner);
  handleExceptionEnd
end;

procedure Action_Free(AObj: TAction); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_Execute(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Execute;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_Update(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_HasParent(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_FindComponent(AObj: TAction; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_GetNamePath(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure Action_Assign(AObj: TAction; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_ClassType(AObj: TAction): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_ClassName(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_InstanceSize(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_InheritsFrom(AObj: TAction; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_Equals(AObj: TAction; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_GetHashCode(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function Action_ToString(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function Action_GetAutoCheck(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoCheck;
  handleExceptionEnd
end;

procedure Action_SetAutoCheck(AObj: TAction; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoCheck := AValue;
  handleExceptionEnd
end;

function Action_GetCaption(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure Action_SetCaption(AObj: TAction; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function Action_GetChecked(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Checked;
  handleExceptionEnd
end;

procedure Action_SetChecked(AObj: TAction; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Checked := AValue;
  handleExceptionEnd
end;

function Action_GetEnabled(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Action_SetEnabled(AObj: TAction; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Action_GetGroupIndex(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GroupIndex;
  handleExceptionEnd
end;

procedure Action_SetGroupIndex(AObj: TAction; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.GroupIndex := AValue;
  handleExceptionEnd
end;

function Action_GetHint(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Action_SetHint(AObj: TAction; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Action_GetImageIndex(AObj: TAction): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndex;
  handleExceptionEnd
end;

procedure Action_SetImageIndex(AObj: TAction; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndex := AValue;
  handleExceptionEnd
end;

function Action_GetShortCut(AObj: TAction): TShortCut; extdecl;
begin
{$ifdef UsehandleException}Result := TShortCut(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ShortCut;
  handleExceptionEnd
end;

procedure Action_SetShortCut(AObj: TAction; AValue: TShortCut); extdecl;
begin
  handleExceptionBegin
  AObj.ShortCut := AValue;
  handleExceptionEnd
end;

function Action_GetVisible(AObj: TAction): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Action_SetVisible(AObj: TAction; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure Action_SetOnExecute(AObj: TAction; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExecute}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Action_SetOnUpdate(AObj: TAction; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnUpdate}
  EventMethodCode
end;

function Action_GetIndex(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Index;
  handleExceptionEnd
end;

procedure Action_SetIndex(AObj: TAction; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Index := AValue;
  handleExceptionEnd
end;

function Action_GetComponentCount(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Action_GetComponentIndex(AObj: TAction): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Action_SetComponentIndex(AObj: TAction; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Action_GetOwner(AObj: TAction): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Action_GetName(AObj: TAction): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Action_SetName(AObj: TAction; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Action_GetTag(AObj: TAction): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Action_SetTag(AObj: TAction; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Action_GetComponents(AObj: TAction; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Action_StaticClassType: TClass; extdecl;
begin
  Result := TAction;
end;

exports
  Action_Create,
  Action_Free,
  Action_Execute,
  Action_Update,
  Action_HasParent,
  Action_FindComponent,
  Action_GetNamePath,
  Action_Assign,
  Action_ClassType,
  Action_ClassName,
  Action_InstanceSize,
  Action_InheritsFrom,
  Action_Equals,
  Action_GetHashCode,
  Action_ToString,
  Action_GetAutoCheck,
  Action_SetAutoCheck,
  Action_GetCaption,
  Action_SetCaption,
  Action_GetChecked,
  Action_SetChecked,
  Action_GetEnabled,
  Action_SetEnabled,
  Action_GetGroupIndex,
  Action_SetGroupIndex,
  Action_GetHint,
  Action_SetHint,
  Action_GetImageIndex,
  Action_SetImageIndex,
  Action_GetShortCut,
  Action_SetShortCut,
  Action_GetVisible,
  Action_SetVisible,
  Action_SetOnExecute,
  Action_SetOnUpdate,
  Action_GetIndex,
  Action_SetIndex,
  Action_GetComponentCount,
  Action_GetComponentIndex,
  Action_SetComponentIndex,
  Action_GetOwner,
  Action_GetName,
  Action_SetName,
  Action_GetTag,
  Action_SetTag,
  Action_GetComponents,
  Action_StaticClassType;

