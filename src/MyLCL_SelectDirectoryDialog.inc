
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function SelectDirectoryDialog_Create(AOwner: TComponent): TSelectDirectoryDialog; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TSelectDirectoryDialog.Create(AOwner);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_Free(AObj: TSelectDirectoryDialog); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_Execute(AObj: TSelectDirectoryDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Execute;
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_FindComponent(AObj: TSelectDirectoryDialog; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_GetNamePath(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_HasParent(AObj: TSelectDirectoryDialog): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure SelectDirectoryDialog_Assign(AObj: TSelectDirectoryDialog; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_ClassType(AObj: TSelectDirectoryDialog): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_ClassName(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_InstanceSize(AObj: TSelectDirectoryDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_InheritsFrom(AObj: TSelectDirectoryDialog; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_Equals(AObj: TSelectDirectoryDialog; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_GetHashCode(AObj: TSelectDirectoryDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function SelectDirectoryDialog_ToString(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetFiles(AObj: TSelectDirectoryDialog): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Files;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetDefaultExt(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DefaultExt);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetDefaultExt(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DefaultExt := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetFileName(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.FileName);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetFileName(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.FileName := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetFilter(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Filter);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetFilter(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Filter := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetFilterIndex(AObj: TSelectDirectoryDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.FilterIndex;
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetFilterIndex(AObj: TSelectDirectoryDialog; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FilterIndex := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetInitialDir(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.InitialDir);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetInitialDir(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.InitialDir := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetOptions(AObj: TSelectDirectoryDialog): TOpenOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Options;
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetOptions(AObj: TSelectDirectoryDialog; AValue: TOpenOptions); extdecl;
begin
  handleExceptionBegin
  AObj.Options := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetTitle(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Title);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetTitle(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Title := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetHandle(AObj: TSelectDirectoryDialog): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure SelectDirectoryDialog_SetOnClose(AObj: TSelectDirectoryDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClose}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure SelectDirectoryDialog_SetOnShow(AObj: TSelectDirectoryDialog; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnShow}
  EventMethodCode
end;

function SelectDirectoryDialog_GetComponentCount(AObj: TSelectDirectoryDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetComponentIndex(AObj: TSelectDirectoryDialog): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetComponentIndex(AObj: TSelectDirectoryDialog; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetOwner(AObj: TSelectDirectoryDialog): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetName(AObj: TSelectDirectoryDialog): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetName(AObj: TSelectDirectoryDialog; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetTag(AObj: TSelectDirectoryDialog): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure SelectDirectoryDialog_SetTag(AObj: TSelectDirectoryDialog; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function SelectDirectoryDialog_GetComponents(AObj: TSelectDirectoryDialog; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function SelectDirectoryDialog_StaticClassType: TClass; extdecl;
begin
  Result := TSelectDirectoryDialog;
end;

exports
  SelectDirectoryDialog_Create,
  SelectDirectoryDialog_Free,
  SelectDirectoryDialog_Execute,
  SelectDirectoryDialog_FindComponent,
  SelectDirectoryDialog_GetNamePath,
  SelectDirectoryDialog_HasParent,
  SelectDirectoryDialog_Assign,
  SelectDirectoryDialog_ClassType,
  SelectDirectoryDialog_ClassName,
  SelectDirectoryDialog_InstanceSize,
  SelectDirectoryDialog_InheritsFrom,
  SelectDirectoryDialog_Equals,
  SelectDirectoryDialog_GetHashCode,
  SelectDirectoryDialog_ToString,
  SelectDirectoryDialog_GetFiles,
  SelectDirectoryDialog_GetDefaultExt,
  SelectDirectoryDialog_SetDefaultExt,
  SelectDirectoryDialog_GetFileName,
  SelectDirectoryDialog_SetFileName,
  SelectDirectoryDialog_GetFilter,
  SelectDirectoryDialog_SetFilter,
  SelectDirectoryDialog_GetFilterIndex,
  SelectDirectoryDialog_SetFilterIndex,
  SelectDirectoryDialog_GetInitialDir,
  SelectDirectoryDialog_SetInitialDir,
  SelectDirectoryDialog_GetOptions,
  SelectDirectoryDialog_SetOptions,
  SelectDirectoryDialog_GetTitle,
  SelectDirectoryDialog_SetTitle,
  SelectDirectoryDialog_GetHandle,
  SelectDirectoryDialog_SetOnClose,
  SelectDirectoryDialog_SetOnShow,
  SelectDirectoryDialog_GetComponentCount,
  SelectDirectoryDialog_GetComponentIndex,
  SelectDirectoryDialog_SetComponentIndex,
  SelectDirectoryDialog_GetOwner,
  SelectDirectoryDialog_GetName,
  SelectDirectoryDialog_SetName,
  SelectDirectoryDialog_GetTag,
  SelectDirectoryDialog_SetTag,
  SelectDirectoryDialog_GetComponents,
  SelectDirectoryDialog_StaticClassType;

