
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function DirectoryEdit_Create(AOwner: TComponent): TDirectoryEdit; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TDirectoryEdit.Create(AOwner);
  handleExceptionEnd
end;

procedure DirectoryEdit_Free(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_SetFocus(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Focused(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Clear(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_ClearSelection(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ClearSelection;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_CopyToClipboard(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CopyToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_CutToClipboard(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.CutToClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_PasteFromClipboard(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.PasteFromClipboard;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_SelectAll(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SelectAll;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Undo(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Undo;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_ValidateEdit(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.ValidateEdit;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_CanFocus(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ContainsControl(AObj: TDirectoryEdit; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function DirectoryEdit_ControlAtPos(AObj: TDirectoryEdit; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_DisableAlign(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_EnableAlign(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_FindChildControl(AObj: TDirectoryEdit; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_FlipChildren(AObj: TDirectoryEdit; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_HandleAllocated(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_InsertControl(AObj: TDirectoryEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Invalidate(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_PaintTo(AObj: TDirectoryEdit; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_RemoveControl(AObj: TDirectoryEdit; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Realign(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Repaint(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_ScaleBy(AObj: TDirectoryEdit; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_ScrollBy(AObj: TDirectoryEdit; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_SetBounds(AObj: TDirectoryEdit; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Update(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_BringToFront(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure DirectoryEdit_ClientToScreen(AObj: TDirectoryEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure DirectoryEdit_ClientToParent(AObj: TDirectoryEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Dragging(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_HasParent(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Hide(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Perform(AObj: TDirectoryEdit; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Refresh(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure DirectoryEdit_ScreenToClient(AObj: TDirectoryEdit; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure DirectoryEdit_ParentToClient(AObj: TDirectoryEdit; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_SendToBack(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Show(AObj: TDirectoryEdit); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_GetTextBuf(AObj: TDirectoryEdit; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_GetTextLen(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_SetTextBuf(AObj: TDirectoryEdit; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_FindComponent(AObj: TDirectoryEdit; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_GetNamePath(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_Assign(AObj: TDirectoryEdit; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ClassType(AObj: TDirectoryEdit): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ClassName(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_InstanceSize(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_InheritsFrom(AObj: TDirectoryEdit; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Equals(AObj: TDirectoryEdit; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_GetHashCode(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ToString(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorToNeighbour(AObj: TDirectoryEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorParallel(AObj: TDirectoryEdit; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorHorizontalCenterTo(AObj: TDirectoryEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorVerticalCenterTo(AObj: TDirectoryEdit; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorSame(AObj: TDirectoryEdit; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorAsAlign(AObj: TDirectoryEdit; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AnchorClient(AObj: TDirectoryEdit; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleDesignToForm(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleFormToDesign(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Scale96ToForm(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleFormTo96(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Scale96ToFont(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleFontTo96(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleScreenToFont(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleFontToScreen(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_Scale96ToScreen(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function DirectoryEdit_ScaleScreenTo96(AObj: TDirectoryEdit; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_AutoAdjustLayout(AObj: TDirectoryEdit; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure DirectoryEdit_FixDesignFontsPPI(AObj: TDirectoryEdit; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure DirectoryEdit_ScaleFontsPPI(AObj: TDirectoryEdit; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

function DirectoryEdit_GetAutoSelected(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelected;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAutoSelected(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelected := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDirectory(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Directory);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDirectory(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Directory := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetRootDir(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.RootDir);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetRootDir(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.RootDir := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TAcceptFileNameEvent
procedure DirectoryEdit_SetOnAcceptDirectory(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTAcceptFileNameEvent}
  {$DEFINE EventName := OnAcceptDirectory}
  EventMethodCode
end;

function DirectoryEdit_GetDialogTitle(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.DialogTitle);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDialogTitle(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.DialogTitle := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDialogOptions(AObj: TDirectoryEdit): TOpenOptions; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.DialogOptions;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDialogOptions(AObj: TDirectoryEdit; AValue: TOpenOptions); extdecl;
begin
  handleExceptionBegin
  AObj.DialogOptions := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetShowHidden(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHidden;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetShowHidden(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHidden := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetButtonCaption(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ButtonCaption);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetButtonCaption(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonCaption := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetButtonCursor(AObj: TDirectoryEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonCursor;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetButtonCursor(AObj: TDirectoryEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonCursor := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetButtonHint(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ButtonHint);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetButtonHint(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonHint := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetButtonOnlyWhenFocused(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonOnlyWhenFocused;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetButtonOnlyWhenFocused(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonOnlyWhenFocused := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetButtonWidth(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ButtonWidth;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetButtonWidth(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ButtonWidth := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetConstraints(AObj: TDirectoryEdit): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetConstraints(AObj: TDirectoryEdit; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDirectInput(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DirectInput;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDirectInput(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DirectInput := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetGlyph(AObj: TDirectoryEdit): TBitmap; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Glyph;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetGlyph(AObj: TDirectoryEdit; AValue: TBitmap); extdecl;
begin
  handleExceptionBegin
  AObj.Glyph := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetNumGlyphs(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.NumGlyphs;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetNumGlyphs(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.NumGlyphs := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetImages(AObj: TDirectoryEdit): TCustomImageList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Images;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetImages(AObj: TDirectoryEdit; AValue: TCustomImageList); extdecl;
begin
  handleExceptionBegin
  AObj.Images := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetImageIndex(AObj: TDirectoryEdit): TImageIndex; extdecl;
begin
{$ifdef UsehandleException}Result := TImageIndex(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageIndex;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetImageIndex(AObj: TDirectoryEdit; AValue: TImageIndex); extdecl;
begin
  handleExceptionBegin
  AObj.ImageIndex := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetImageWidth(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ImageWidth;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetImageWidth(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ImageWidth := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetFlat(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Flat;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetFlat(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Flat := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetFocusOnButtonClick(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.FocusOnButtonClick;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetFocusOnButtonClick(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FocusOnButtonClick := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAlign(AObj: TDirectoryEdit): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAlign(AObj: TDirectoryEdit; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchors(AObj: TDirectoryEdit): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAnchors(AObj: TDirectoryEdit; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAutoSize(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAutoSize(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAutoSelect(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.AutoSelect;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAutoSelect(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSelect := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetColor(AObj: TDirectoryEdit): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetColor(AObj: TDirectoryEdit; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDragCursor(AObj: TDirectoryEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDragCursor(AObj: TDirectoryEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDragMode(AObj: TDirectoryEdit): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDragMode(AObj: TDirectoryEdit; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetEnabled(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetEnabled(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetFont(AObj: TDirectoryEdit): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetFont(AObj: TDirectoryEdit; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetLayout(AObj: TDirectoryEdit): TLeftRight; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TLeftRight);{$endif}
  handleExceptionBegin
  Result :=  AObj.Layout;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetLayout(AObj: TDirectoryEdit; AValue: TLeftRight); extdecl;
begin
  handleExceptionBegin
  AObj.Layout := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetMaxLength(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.MaxLength;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetMaxLength(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.MaxLength := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetParentColor(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParentColor(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetParentFont(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParentFont(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetParentShowHint(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParentShowHint(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetPopupMenu(AObj: TDirectoryEdit): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetPopupMenu(AObj: TDirectoryEdit; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetReadOnly(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ReadOnly;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetReadOnly(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ReadOnly := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetShowHint(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetShowHint(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetTabOrder(AObj: TDirectoryEdit): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetTabOrder(AObj: TDirectoryEdit; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetSpacing(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Spacing;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetSpacing(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Spacing := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetTabStop(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetTabStop(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetVisible(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetVisible(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnButtonClick(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnButtonClick}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnChange(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnClick(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure DirectoryEdit_SetOnContextPopup(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnDblClick(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure DirectoryEdit_SetOnDragDrop(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure DirectoryEdit_SetOnDragOver(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnEditingDone(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEditingDone}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure DirectoryEdit_SetOnEndDrag(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnEnter(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnExit(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure DirectoryEdit_SetOnKeyDown(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyDown}
  EventMethodCode
end;

//EVENT_TYPE:TKeyPressEvent
procedure DirectoryEdit_SetOnKeyPress(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyPressEvent}
  {$DEFINE EventName := OnKeyPress}
  EventMethodCode
end;

//EVENT_TYPE:TKeyEvent
procedure DirectoryEdit_SetOnKeyUp(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTKeyEvent}
  {$DEFINE EventName := OnKeyUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure DirectoryEdit_SetOnMouseDown(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnMouseEnter(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure DirectoryEdit_SetOnMouseLeave(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure DirectoryEdit_SetOnMouseMove(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure DirectoryEdit_SetOnMouseUp(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelEvent
procedure DirectoryEdit_SetOnMouseWheel(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelEvent}
  {$DEFINE EventName := OnMouseWheel}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure DirectoryEdit_SetOnMouseWheelDown(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure DirectoryEdit_SetOnMouseWheelUp(AObj: TDirectoryEdit; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

function DirectoryEdit_GetText(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetText(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetTextHint(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.TextHint);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetTextHint(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.TextHint := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAlignment(AObj: TDirectoryEdit): TAlignment; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlignment);{$endif}
  handleExceptionBegin
  Result :=  AObj.Alignment;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAlignment(AObj: TDirectoryEdit; AValue: TAlignment); extdecl;
begin
  handleExceptionBegin
  AObj.Alignment := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetCanUndo(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanUndo;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DirectoryEdit_GetCaretPos(AObj: TDirectoryEdit; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.CaretPos;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DirectoryEdit_SetCaretPos(AObj: TDirectoryEdit; var AValue: TPoint); extdecl;
begin
  handleExceptionBegin
  AObj.CaretPos := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetCharCase(AObj: TDirectoryEdit): TEditCharCase; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TEditCharCase);{$endif}
  handleExceptionBegin
  Result :=  AObj.CharCase;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetCharCase(AObj: TDirectoryEdit; AValue: TEditCharCase); extdecl;
begin
  handleExceptionBegin
  AObj.CharCase := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetHideSelection(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HideSelection;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetHideSelection(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.HideSelection := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetModified(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetModified(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetNumbersOnly(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.NumbersOnly;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetNumbersOnly(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.NumbersOnly := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetPasswordChar(AObj: TDirectoryEdit): Char; extdecl;
begin
{$ifdef UsehandleException}Result := #0;{$endif}
  handleExceptionBegin
  Result :=  AObj.PasswordChar;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetPasswordChar(AObj: TDirectoryEdit; AValue: Char); extdecl;
begin
  handleExceptionBegin
  AObj.PasswordChar := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetSelLength(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelLength;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetSelLength(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelLength := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetSelStart(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.SelStart;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetSelStart(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SelStart := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetSelText(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.SelText);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetSelText(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SelText := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDockClientCount(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function DirectoryEdit_GetDockSite(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDockSite(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDoubleBuffered(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetDoubleBuffered(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetMouseInClient(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function DirectoryEdit_GetVisibleDockClientCount(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function DirectoryEdit_GetBrush(AObj: TDirectoryEdit): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function DirectoryEdit_GetControlCount(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function DirectoryEdit_GetHandle(AObj: TDirectoryEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function DirectoryEdit_GetParentDoubleBuffered(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParentDoubleBuffered(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetParentWindow(AObj: TDirectoryEdit): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParentWindow(AObj: TDirectoryEdit; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetShowing(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function DirectoryEdit_GetUseDockManager(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetUseDockManager(AObj: TDirectoryEdit; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAction(AObj: TDirectoryEdit): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAction(AObj: TDirectoryEdit; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetBiDiMode(AObj: TDirectoryEdit): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetBiDiMode(AObj: TDirectoryEdit; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DirectoryEdit_GetBoundsRect(AObj: TDirectoryEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure DirectoryEdit_SetBoundsRect(AObj: TDirectoryEdit; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetClientHeight(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetClientHeight(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DirectoryEdit_GetClientOrigin(AObj: TDirectoryEdit; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure DirectoryEdit_GetClientRect(AObj: TDirectoryEdit; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function DirectoryEdit_GetClientWidth(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetClientWidth(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetControlState(AObj: TDirectoryEdit): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetControlState(AObj: TDirectoryEdit; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetControlStyle(AObj: TDirectoryEdit): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetControlStyle(AObj: TDirectoryEdit; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetFloating(AObj: TDirectoryEdit): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function DirectoryEdit_GetParent(AObj: TDirectoryEdit): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetParent(AObj: TDirectoryEdit; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetLeft(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetLeft(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetTop(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetTop(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetWidth(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetWidth(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetHeight(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetHeight(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetCursor(AObj: TDirectoryEdit): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetCursor(AObj: TDirectoryEdit; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetHint(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetHint(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetComponentCount(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function DirectoryEdit_GetComponentIndex(AObj: TDirectoryEdit): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetComponentIndex(AObj: TDirectoryEdit; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetOwner(AObj: TDirectoryEdit): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function DirectoryEdit_GetName(AObj: TDirectoryEdit): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure DirectoryEdit_SetName(AObj: TDirectoryEdit; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetTag(AObj: TDirectoryEdit): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetTag(AObj: TDirectoryEdit; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchorSideLeft(AObj: TDirectoryEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAnchorSideLeft(AObj: TDirectoryEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchorSideTop(AObj: TDirectoryEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAnchorSideTop(AObj: TDirectoryEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchorSideRight(AObj: TDirectoryEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAnchorSideRight(AObj: TDirectoryEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchorSideBottom(AObj: TDirectoryEdit): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetAnchorSideBottom(AObj: TDirectoryEdit; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetChildSizing(AObj: TDirectoryEdit): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetChildSizing(AObj: TDirectoryEdit; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetBorderSpacing(AObj: TDirectoryEdit): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure DirectoryEdit_SetBorderSpacing(AObj: TDirectoryEdit; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function DirectoryEdit_GetDockClients(AObj: TDirectoryEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function DirectoryEdit_GetControls(AObj: TDirectoryEdit; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function DirectoryEdit_GetComponents(AObj: TDirectoryEdit; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function DirectoryEdit_GetAnchorSide(AObj: TDirectoryEdit; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function DirectoryEdit_StaticClassType: TClass; extdecl;
begin
  Result := TDirectoryEdit;
end;

exports
  DirectoryEdit_Create,
  DirectoryEdit_Free,
  DirectoryEdit_SetFocus,
  DirectoryEdit_Focused,
  DirectoryEdit_Clear,
  DirectoryEdit_ClearSelection,
  DirectoryEdit_CopyToClipboard,
  DirectoryEdit_CutToClipboard,
  DirectoryEdit_PasteFromClipboard,
  DirectoryEdit_SelectAll,
  DirectoryEdit_Undo,
  DirectoryEdit_ValidateEdit,
  DirectoryEdit_CanFocus,
  DirectoryEdit_ContainsControl,
  DirectoryEdit_ControlAtPos,
  DirectoryEdit_DisableAlign,
  DirectoryEdit_EnableAlign,
  DirectoryEdit_FindChildControl,
  DirectoryEdit_FlipChildren,
  DirectoryEdit_HandleAllocated,
  DirectoryEdit_InsertControl,
  DirectoryEdit_Invalidate,
  DirectoryEdit_PaintTo,
  DirectoryEdit_RemoveControl,
  DirectoryEdit_Realign,
  DirectoryEdit_Repaint,
  DirectoryEdit_ScaleBy,
  DirectoryEdit_ScrollBy,
  DirectoryEdit_SetBounds,
  DirectoryEdit_Update,
  DirectoryEdit_BringToFront,
  DirectoryEdit_ClientToScreen,
  DirectoryEdit_ClientToParent,
  DirectoryEdit_Dragging,
  DirectoryEdit_HasParent,
  DirectoryEdit_Hide,
  DirectoryEdit_Perform,
  DirectoryEdit_Refresh,
  DirectoryEdit_ScreenToClient,
  DirectoryEdit_ParentToClient,
  DirectoryEdit_SendToBack,
  DirectoryEdit_Show,
  DirectoryEdit_GetTextBuf,
  DirectoryEdit_GetTextLen,
  DirectoryEdit_SetTextBuf,
  DirectoryEdit_FindComponent,
  DirectoryEdit_GetNamePath,
  DirectoryEdit_Assign,
  DirectoryEdit_ClassType,
  DirectoryEdit_ClassName,
  DirectoryEdit_InstanceSize,
  DirectoryEdit_InheritsFrom,
  DirectoryEdit_Equals,
  DirectoryEdit_GetHashCode,
  DirectoryEdit_ToString,
  DirectoryEdit_AnchorToNeighbour,
  DirectoryEdit_AnchorParallel,
  DirectoryEdit_AnchorHorizontalCenterTo,
  DirectoryEdit_AnchorVerticalCenterTo,
  DirectoryEdit_AnchorSame,
  DirectoryEdit_AnchorAsAlign,
  DirectoryEdit_AnchorClient,
  DirectoryEdit_ScaleDesignToForm,
  DirectoryEdit_ScaleFormToDesign,
  DirectoryEdit_Scale96ToForm,
  DirectoryEdit_ScaleFormTo96,
  DirectoryEdit_Scale96ToFont,
  DirectoryEdit_ScaleFontTo96,
  DirectoryEdit_ScaleScreenToFont,
  DirectoryEdit_ScaleFontToScreen,
  DirectoryEdit_Scale96ToScreen,
  DirectoryEdit_ScaleScreenTo96,
  DirectoryEdit_AutoAdjustLayout,
  DirectoryEdit_FixDesignFontsPPI,
  DirectoryEdit_ScaleFontsPPI,
  DirectoryEdit_GetAutoSelected,
  DirectoryEdit_SetAutoSelected,
  DirectoryEdit_GetDirectory,
  DirectoryEdit_SetDirectory,
  DirectoryEdit_GetRootDir,
  DirectoryEdit_SetRootDir,
  DirectoryEdit_SetOnAcceptDirectory,
  DirectoryEdit_GetDialogTitle,
  DirectoryEdit_SetDialogTitle,
  DirectoryEdit_GetDialogOptions,
  DirectoryEdit_SetDialogOptions,
  DirectoryEdit_GetShowHidden,
  DirectoryEdit_SetShowHidden,
  DirectoryEdit_GetButtonCaption,
  DirectoryEdit_SetButtonCaption,
  DirectoryEdit_GetButtonCursor,
  DirectoryEdit_SetButtonCursor,
  DirectoryEdit_GetButtonHint,
  DirectoryEdit_SetButtonHint,
  DirectoryEdit_GetButtonOnlyWhenFocused,
  DirectoryEdit_SetButtonOnlyWhenFocused,
  DirectoryEdit_GetButtonWidth,
  DirectoryEdit_SetButtonWidth,
  DirectoryEdit_GetConstraints,
  DirectoryEdit_SetConstraints,
  DirectoryEdit_GetDirectInput,
  DirectoryEdit_SetDirectInput,
  DirectoryEdit_GetGlyph,
  DirectoryEdit_SetGlyph,
  DirectoryEdit_GetNumGlyphs,
  DirectoryEdit_SetNumGlyphs,
  DirectoryEdit_GetImages,
  DirectoryEdit_SetImages,
  DirectoryEdit_GetImageIndex,
  DirectoryEdit_SetImageIndex,
  DirectoryEdit_GetImageWidth,
  DirectoryEdit_SetImageWidth,
  DirectoryEdit_GetFlat,
  DirectoryEdit_SetFlat,
  DirectoryEdit_GetFocusOnButtonClick,
  DirectoryEdit_SetFocusOnButtonClick,
  DirectoryEdit_GetAlign,
  DirectoryEdit_SetAlign,
  DirectoryEdit_GetAnchors,
  DirectoryEdit_SetAnchors,
  DirectoryEdit_GetAutoSize,
  DirectoryEdit_SetAutoSize,
  DirectoryEdit_GetAutoSelect,
  DirectoryEdit_SetAutoSelect,
  DirectoryEdit_GetColor,
  DirectoryEdit_SetColor,
  DirectoryEdit_GetDragCursor,
  DirectoryEdit_SetDragCursor,
  DirectoryEdit_GetDragMode,
  DirectoryEdit_SetDragMode,
  DirectoryEdit_GetEnabled,
  DirectoryEdit_SetEnabled,
  DirectoryEdit_GetFont,
  DirectoryEdit_SetFont,
  DirectoryEdit_GetLayout,
  DirectoryEdit_SetLayout,
  DirectoryEdit_GetMaxLength,
  DirectoryEdit_SetMaxLength,
  DirectoryEdit_GetParentColor,
  DirectoryEdit_SetParentColor,
  DirectoryEdit_GetParentFont,
  DirectoryEdit_SetParentFont,
  DirectoryEdit_GetParentShowHint,
  DirectoryEdit_SetParentShowHint,
  DirectoryEdit_GetPopupMenu,
  DirectoryEdit_SetPopupMenu,
  DirectoryEdit_GetReadOnly,
  DirectoryEdit_SetReadOnly,
  DirectoryEdit_GetShowHint,
  DirectoryEdit_SetShowHint,
  DirectoryEdit_GetTabOrder,
  DirectoryEdit_SetTabOrder,
  DirectoryEdit_GetSpacing,
  DirectoryEdit_SetSpacing,
  DirectoryEdit_GetTabStop,
  DirectoryEdit_SetTabStop,
  DirectoryEdit_GetVisible,
  DirectoryEdit_SetVisible,
  DirectoryEdit_SetOnButtonClick,
  DirectoryEdit_SetOnChange,
  DirectoryEdit_SetOnClick,
  DirectoryEdit_SetOnContextPopup,
  DirectoryEdit_SetOnDblClick,
  DirectoryEdit_SetOnDragDrop,
  DirectoryEdit_SetOnDragOver,
  DirectoryEdit_SetOnEditingDone,
  DirectoryEdit_SetOnEndDrag,
  DirectoryEdit_SetOnEnter,
  DirectoryEdit_SetOnExit,
  DirectoryEdit_SetOnKeyDown,
  DirectoryEdit_SetOnKeyPress,
  DirectoryEdit_SetOnKeyUp,
  DirectoryEdit_SetOnMouseDown,
  DirectoryEdit_SetOnMouseEnter,
  DirectoryEdit_SetOnMouseLeave,
  DirectoryEdit_SetOnMouseMove,
  DirectoryEdit_SetOnMouseUp,
  DirectoryEdit_SetOnMouseWheel,
  DirectoryEdit_SetOnMouseWheelDown,
  DirectoryEdit_SetOnMouseWheelUp,
  DirectoryEdit_GetText,
  DirectoryEdit_SetText,
  DirectoryEdit_GetTextHint,
  DirectoryEdit_SetTextHint,
  DirectoryEdit_GetAlignment,
  DirectoryEdit_SetAlignment,
  DirectoryEdit_GetCanUndo,
  DirectoryEdit_GetCaretPos,
  DirectoryEdit_SetCaretPos,
  DirectoryEdit_GetCharCase,
  DirectoryEdit_SetCharCase,
  DirectoryEdit_GetHideSelection,
  DirectoryEdit_SetHideSelection,
  DirectoryEdit_GetModified,
  DirectoryEdit_SetModified,
  DirectoryEdit_GetNumbersOnly,
  DirectoryEdit_SetNumbersOnly,
  DirectoryEdit_GetPasswordChar,
  DirectoryEdit_SetPasswordChar,
  DirectoryEdit_GetSelLength,
  DirectoryEdit_SetSelLength,
  DirectoryEdit_GetSelStart,
  DirectoryEdit_SetSelStart,
  DirectoryEdit_GetSelText,
  DirectoryEdit_SetSelText,
  DirectoryEdit_GetDockClientCount,
  DirectoryEdit_GetDockSite,
  DirectoryEdit_SetDockSite,
  DirectoryEdit_GetDoubleBuffered,
  DirectoryEdit_SetDoubleBuffered,
  DirectoryEdit_GetMouseInClient,
  DirectoryEdit_GetVisibleDockClientCount,
  DirectoryEdit_GetBrush,
  DirectoryEdit_GetControlCount,
  DirectoryEdit_GetHandle,
  DirectoryEdit_GetParentDoubleBuffered,
  DirectoryEdit_SetParentDoubleBuffered,
  DirectoryEdit_GetParentWindow,
  DirectoryEdit_SetParentWindow,
  DirectoryEdit_GetShowing,
  DirectoryEdit_GetUseDockManager,
  DirectoryEdit_SetUseDockManager,
  DirectoryEdit_GetAction,
  DirectoryEdit_SetAction,
  DirectoryEdit_GetBiDiMode,
  DirectoryEdit_SetBiDiMode,
  DirectoryEdit_GetBoundsRect,
  DirectoryEdit_SetBoundsRect,
  DirectoryEdit_GetClientHeight,
  DirectoryEdit_SetClientHeight,
  DirectoryEdit_GetClientOrigin,
  DirectoryEdit_GetClientRect,
  DirectoryEdit_GetClientWidth,
  DirectoryEdit_SetClientWidth,
  DirectoryEdit_GetControlState,
  DirectoryEdit_SetControlState,
  DirectoryEdit_GetControlStyle,
  DirectoryEdit_SetControlStyle,
  DirectoryEdit_GetFloating,
  DirectoryEdit_GetParent,
  DirectoryEdit_SetParent,
  DirectoryEdit_GetLeft,
  DirectoryEdit_SetLeft,
  DirectoryEdit_GetTop,
  DirectoryEdit_SetTop,
  DirectoryEdit_GetWidth,
  DirectoryEdit_SetWidth,
  DirectoryEdit_GetHeight,
  DirectoryEdit_SetHeight,
  DirectoryEdit_GetCursor,
  DirectoryEdit_SetCursor,
  DirectoryEdit_GetHint,
  DirectoryEdit_SetHint,
  DirectoryEdit_GetComponentCount,
  DirectoryEdit_GetComponentIndex,
  DirectoryEdit_SetComponentIndex,
  DirectoryEdit_GetOwner,
  DirectoryEdit_GetName,
  DirectoryEdit_SetName,
  DirectoryEdit_GetTag,
  DirectoryEdit_SetTag,
  DirectoryEdit_GetAnchorSideLeft,
  DirectoryEdit_SetAnchorSideLeft,
  DirectoryEdit_GetAnchorSideTop,
  DirectoryEdit_SetAnchorSideTop,
  DirectoryEdit_GetAnchorSideRight,
  DirectoryEdit_SetAnchorSideRight,
  DirectoryEdit_GetAnchorSideBottom,
  DirectoryEdit_SetAnchorSideBottom,
  DirectoryEdit_GetChildSizing,
  DirectoryEdit_SetChildSizing,
  DirectoryEdit_GetBorderSpacing,
  DirectoryEdit_SetBorderSpacing,
  DirectoryEdit_GetDockClients,
  DirectoryEdit_GetControls,
  DirectoryEdit_GetComponents,
  DirectoryEdit_GetAnchorSide,
  DirectoryEdit_StaticClassType;

