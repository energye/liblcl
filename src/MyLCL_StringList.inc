
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function StringList_Create: TStringList; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TStringList.Create;
  handleExceptionEnd
end;

procedure StringList_Free(AObj: TStringList); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_Add(AObj: TStringList; S: PChar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Add(S);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_AddObject(AObj: TStringList; S: PChar; AObject: TObject): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.AddObject(S, AObject);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Assign(AObj: TStringList; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Clear(AObj: TStringList); extdecl;
begin
  handleExceptionBegin
  AObj.Clear;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Delete(AObj: TStringList; Index: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Delete(Index);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Exchange(AObj: TStringList; Index1: Integer; Index2: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Exchange(Index1, Index2);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_IndexOf(AObj: TStringList; S: PChar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.IndexOf(S);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Insert(AObj: TStringList; Index: Integer; S: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Insert(Index, S);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_InsertObject(AObj: TStringList; Index: Integer; S: PChar; AObject: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.InsertObject(Index, S, AObject);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Append(AObj: TStringList; S: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Append(S);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_BeginUpdate(AObj: TStringList); extdecl;
begin
  handleExceptionBegin
  AObj.BeginUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_EndUpdate(AObj: TStringList); extdecl;
begin
  handleExceptionBegin
  AObj.EndUpdate;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_Equals(AObj: TStringList; Strings: TStrings): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Strings);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_IndexOfName(AObj: TStringList; Name: PChar): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.IndexOfName(Name);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_IndexOfObject(AObj: TStringList; AObject: TObject): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.IndexOfObject(AObject);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_LoadFromFile(AObj: TStringList; FileName: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromFile(FileName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_LoadFromStream(AObj: TStringList; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_Move(AObj: TStringList; CurIndex: Integer; NewIndex: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Move(CurIndex, NewIndex);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_SaveToFile(AObj: TStringList; FileName: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToFile(FileName);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure StringList_SaveToStream(AObj: TStringList; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_GetNamePath(AObj: TStringList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_ClassType(AObj: TStringList): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_ClassName(AObj: TStringList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_InstanceSize(AObj: TStringList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_InheritsFrom(AObj: TStringList; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_GetHashCode(AObj: TStringList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function StringList_ToString(AObj: TStringList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function StringList_GetSorted(AObj: TStringList): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Sorted;
  handleExceptionEnd
end;

procedure StringList_SetSorted(AObj: TStringList; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Sorted := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure StringList_SetOnChange(AObj: TStringList; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure StringList_SetOnChanging(AObj: TStringList; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChanging}
  EventMethodCode
end;

function StringList_GetCapacity(AObj: TStringList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Capacity;
  handleExceptionEnd
end;

procedure StringList_SetCapacity(AObj: TStringList; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Capacity := AValue;
  handleExceptionEnd
end;

function StringList_GetCommaText(AObj: TStringList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.CommaText);
  handleExceptionEnd
end;

procedure StringList_SetCommaText(AObj: TStringList; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.CommaText := AValue;
  handleExceptionEnd
end;

function StringList_GetCount(AObj: TStringList): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Count;
  handleExceptionEnd
end;

function StringList_GetDelimiter(AObj: TStringList): Char; extdecl;
begin
{$ifdef UsehandleException}Result := #0;{$endif}
  handleExceptionBegin
  Result :=  AObj.Delimiter;
  handleExceptionEnd
end;

procedure StringList_SetDelimiter(AObj: TStringList; AValue: Char); extdecl;
begin
  handleExceptionBegin
  AObj.Delimiter := AValue;
  handleExceptionEnd
end;

function StringList_GetNameValueSeparator(AObj: TStringList): Char; extdecl;
begin
{$ifdef UsehandleException}Result := #0;{$endif}
  handleExceptionBegin
  Result :=  AObj.NameValueSeparator;
  handleExceptionEnd
end;

procedure StringList_SetNameValueSeparator(AObj: TStringList; AValue: Char); extdecl;
begin
  handleExceptionBegin
  AObj.NameValueSeparator := AValue;
  handleExceptionEnd
end;

function StringList_GetText(AObj: TStringList): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Text);
  handleExceptionEnd
end;

procedure StringList_SetText(AObj: TStringList; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Text := AValue;
  handleExceptionEnd
end;

function StringList_GetObjects(AObj: TStringList; Index: Integer): TObject; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Objects[Index];
  handleExceptionEnd
end;

procedure StringList_SetObjects(AObj: TStringList; Index: Integer; AValue: TObject); extdecl;
begin
  handleExceptionBegin
  AObj.Objects[Index] := AValue;
  handleExceptionEnd
end;

function StringList_GetValues(AObj: TStringList; Name: PChar): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Values[Name]);
  handleExceptionEnd
end;

procedure StringList_SetValues(AObj: TStringList; Name: string; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Values[Name] := AValue;
  handleExceptionEnd
end;

function StringList_GetValueFromIndex(AObj: TStringList; Index: Integer): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ValueFromIndex[Index]);
  handleExceptionEnd
end;

procedure StringList_SetValueFromIndex(AObj: TStringList; Index: Integer; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.ValueFromIndex[Index] := AValue;
  handleExceptionEnd
end;

function StringList_GetStrings(AObj: TStringList; Index: Integer): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Strings[Index]);
  handleExceptionEnd
end;

procedure StringList_SetStrings(AObj: TStringList; Index: Integer; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Strings[Index] := AValue;
  handleExceptionEnd
end;

function StringList_StaticClassType: TClass; extdecl;
begin
  Result := TStringList;
end;

exports
  StringList_Create,
  StringList_Free,
  StringList_Add,
  StringList_AddObject,
  StringList_Assign,
  StringList_Clear,
  StringList_Delete,
  StringList_Exchange,
  StringList_IndexOf,
  StringList_Insert,
  StringList_InsertObject,
  StringList_Append,
  StringList_BeginUpdate,
  StringList_EndUpdate,
  StringList_Equals,
  StringList_IndexOfName,
  StringList_IndexOfObject,
  StringList_LoadFromFile,
  StringList_LoadFromStream,
  StringList_Move,
  StringList_SaveToFile,
  StringList_SaveToStream,
  StringList_GetNamePath,
  StringList_ClassType,
  StringList_ClassName,
  StringList_InstanceSize,
  StringList_InheritsFrom,
  StringList_GetHashCode,
  StringList_ToString,
  StringList_GetSorted,
  StringList_SetSorted,
  StringList_SetOnChange,
  StringList_SetOnChanging,
  StringList_GetCapacity,
  StringList_SetCapacity,
  StringList_GetCommaText,
  StringList_SetCommaText,
  StringList_GetCount,
  StringList_GetDelimiter,
  StringList_SetDelimiter,
  StringList_GetNameValueSeparator,
  StringList_SetNameValueSeparator,
  StringList_GetText,
  StringList_SetText,
  StringList_GetObjects,
  StringList_SetObjects,
  StringList_GetValues,
  StringList_SetValues,
  StringList_GetValueFromIndex,
  StringList_SetValueFromIndex,
  StringList_GetStrings,
  StringList_SetStrings,
  StringList_StaticClassType;

