
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function RadioGroup_Create(AOwner: TComponent): TRadioGroup; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TRadioGroup.Create(AOwner);
  handleExceptionEnd
end;

procedure RadioGroup_Free(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_FlipChildren(AObj: TRadioGroup; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_CanFocus(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ContainsControl(AObj: TRadioGroup; Control: TControl): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:2=nonPtr
function RadioGroup_ControlAtPos(AObj: TRadioGroup; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_DisableAlign(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_EnableAlign(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_FindChildControl(AObj: TRadioGroup; ControlName: PChar): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Focused(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_HandleAllocated(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_InsertControl(AObj: TRadioGroup; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Invalidate(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_PaintTo(AObj: TRadioGroup; DC: HDC; X: Integer; Y: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.PaintTo(DC, X, Y);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_RemoveControl(AObj: TRadioGroup; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Realign(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Repaint(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_ScaleBy(AObj: TRadioGroup; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_ScrollBy(AObj: TRadioGroup; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_SetBounds(AObj: TRadioGroup; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_SetFocus(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Update(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_BringToFront(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioGroup_ClientToScreen(AObj: TRadioGroup; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioGroup_ClientToParent(AObj: TRadioGroup; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Dragging(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_HasParent(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Hide(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Perform(AObj: TRadioGroup; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Refresh(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioGroup_ScreenToClient(AObj: TRadioGroup; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

//CLASSMETHOD:
//RETURNISLASTPARAM:
//PARAMS:2=nonPtr
procedure RadioGroup_ParentToClient(AObj: TRadioGroup; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_SendToBack(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Show(AObj: TRadioGroup); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_GetTextBuf(AObj: TRadioGroup; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_GetTextLen(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_SetTextBuf(AObj: TRadioGroup; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_FindComponent(AObj: TRadioGroup; AName: PChar): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_GetNamePath(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_Assign(AObj: TRadioGroup; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ClassType(AObj: TRadioGroup): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ClassName(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_InstanceSize(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_InheritsFrom(AObj: TRadioGroup; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Equals(AObj: TRadioGroup; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_GetHashCode(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ToString(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorToNeighbour(AObj: TRadioGroup; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorParallel(AObj: TRadioGroup; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorHorizontalCenterTo(AObj: TRadioGroup; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorVerticalCenterTo(AObj: TRadioGroup; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorSame(AObj: TRadioGroup; ASide: TAnchorKind; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSame(ASide, ASibling);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorAsAlign(AObj: TRadioGroup; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AnchorClient(AObj: TRadioGroup; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleDesignToForm(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleDesignToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleFormToDesign(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormToDesign(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Scale96ToForm(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToForm(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleFormTo96(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFormTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Scale96ToFont(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleFontTo96(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleScreenToFont(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenToFont(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleFontToScreen(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleFontToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_Scale96ToScreen(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Scale96ToScreen(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
function RadioGroup_ScaleScreenTo96(AObj: TRadioGroup; ASize: Integer): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ScaleScreenTo96(ASize);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_AutoAdjustLayout(AObj: TRadioGroup; AMode: TLayoutAdjustmentPolicy; AFromPPI: Integer; AToPPI: Integer; AOldFormWidth: Integer; ANewFormWidth: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AutoAdjustLayout(AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure RadioGroup_FixDesignFontsPPI(AObj: TRadioGroup; ADesignTimePPI: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.FixDesignFontsPPI(ADesignTimePPI);
  handleExceptionEnd
end;

//CLASSMETHOD:
//PARAMS:3=nonPtr
procedure RadioGroup_ScaleFontsPPI(AObj: TRadioGroup; AToPPI: Integer; var AProportion: Double); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleFontsPPI(AToPPI, AProportion);
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioGroup_SetOnSelectionChanged(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnSelectionChanged}
  EventMethodCode
end;

function RadioGroup_GetAlign(AObj: TRadioGroup): TAlign; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TAlign);{$endif}
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure RadioGroup_SetAlign(AObj: TRadioGroup; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAnchors(AObj: TRadioGroup): TAnchors; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure RadioGroup_SetAnchors(AObj: TRadioGroup; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetBiDiMode(AObj: TRadioGroup): TBiDiMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TBiDiMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure RadioGroup_SetBiDiMode(AObj: TRadioGroup; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetCaption(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Caption);
  handleExceptionEnd
end;

procedure RadioGroup_SetCaption(AObj: TRadioGroup; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Caption := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetColor(AObj: TRadioGroup): TColor; extdecl;
begin
{$ifdef UsehandleException}Result := TColor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure RadioGroup_SetColor(AObj: TRadioGroup; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetColumns(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Columns;
  handleExceptionEnd
end;

procedure RadioGroup_SetColumns(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Columns := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetDoubleBuffered(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure RadioGroup_SetDoubleBuffered(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetDragCursor(AObj: TRadioGroup): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure RadioGroup_SetDragCursor(AObj: TRadioGroup; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetDragMode(AObj: TRadioGroup): TDragMode; extdecl;
begin
{$ifdef UsehandleException}Result := Low(TDragMode);{$endif}
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure RadioGroup_SetDragMode(AObj: TRadioGroup; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetEnabled(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure RadioGroup_SetEnabled(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetFont(AObj: TRadioGroup): TFont; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure RadioGroup_SetFont(AObj: TRadioGroup; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetItemIndex(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ItemIndex;
  handleExceptionEnd
end;

procedure RadioGroup_SetItemIndex(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ItemIndex := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetItems(AObj: TRadioGroup): TStrings; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Items;
  handleExceptionEnd
end;

procedure RadioGroup_SetItems(AObj: TRadioGroup; AValue: TStrings); extdecl;
begin
  handleExceptionBegin
  AObj.Items := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetConstraints(AObj: TRadioGroup): TSizeConstraints; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure RadioGroup_SetConstraints(AObj: TRadioGroup; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetParentBackground(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentBackground;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentBackground(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentBackground := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetParentColor(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentColor(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetParentDoubleBuffered(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentDoubleBuffered(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetParentFont(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentFont(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetParentShowHint(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentShowHint(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetPopupMenu(AObj: TRadioGroup): TPopupMenu; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure RadioGroup_SetPopupMenu(AObj: TRadioGroup; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetShowHint(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure RadioGroup_SetShowHint(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetTabOrder(AObj: TRadioGroup): TTabOrder; extdecl;
begin
{$ifdef UsehandleException}Result := TTabOrder(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure RadioGroup_SetTabOrder(AObj: TRadioGroup; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetTabStop(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure RadioGroup_SetTabStop(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetVisible(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure RadioGroup_SetVisible(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioGroup_SetOnClick(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure RadioGroup_SetOnDragDrop(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure RadioGroup_SetOnDragOver(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure RadioGroup_SetOnEndDrag(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioGroup_SetOnEnter(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure RadioGroup_SetOnExit(AObj: TRadioGroup; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

function RadioGroup_GetDockClientCount(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function RadioGroup_GetDockSite(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure RadioGroup_SetDockSite(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetMouseInClient(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function RadioGroup_GetVisibleDockClientCount(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function RadioGroup_GetBrush(AObj: TRadioGroup): TBrush; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function RadioGroup_GetControlCount(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function RadioGroup_GetHandle(AObj: TRadioGroup): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function RadioGroup_GetParentWindow(AObj: TRadioGroup): HWND; extdecl;
begin
{$ifdef UsehandleException}Result := HWND(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure RadioGroup_SetParentWindow(AObj: TRadioGroup; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetShowing(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function RadioGroup_GetUseDockManager(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure RadioGroup_SetUseDockManager(AObj: TRadioGroup; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAction(AObj: TRadioGroup): TBasicAction; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure RadioGroup_SetAction(AObj: TRadioGroup; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioGroup_GetBoundsRect(AObj: TRadioGroup; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

//PARAMS:2=nonPtr
procedure RadioGroup_SetBoundsRect(AObj: TRadioGroup; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetClientHeight(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure RadioGroup_SetClientHeight(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioGroup_GetClientOrigin(AObj: TRadioGroup; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

//RETURNISLASTPARAM:
procedure RadioGroup_GetClientRect(AObj: TRadioGroup; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function RadioGroup_GetClientWidth(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure RadioGroup_SetClientWidth(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetControlState(AObj: TRadioGroup): TControlState; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure RadioGroup_SetControlState(AObj: TRadioGroup; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetControlStyle(AObj: TRadioGroup): TControlStyle; extdecl;
begin
{$ifdef UsehandleException}Result := [];{$endif}
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure RadioGroup_SetControlStyle(AObj: TRadioGroup; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetFloating(AObj: TRadioGroup): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function RadioGroup_GetParent(AObj: TRadioGroup): TWinControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure RadioGroup_SetParent(AObj: TRadioGroup; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetLeft(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure RadioGroup_SetLeft(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetTop(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure RadioGroup_SetTop(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetWidth(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure RadioGroup_SetWidth(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetHeight(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure RadioGroup_SetHeight(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetCursor(AObj: TRadioGroup): TCursor; extdecl;
begin
{$ifdef UsehandleException}Result := TCursor(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure RadioGroup_SetCursor(AObj: TRadioGroup; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetHint(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure RadioGroup_SetHint(AObj: TRadioGroup; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetComponentCount(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function RadioGroup_GetComponentIndex(AObj: TRadioGroup): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure RadioGroup_SetComponentIndex(AObj: TRadioGroup; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetOwner(AObj: TRadioGroup): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function RadioGroup_GetName(AObj: TRadioGroup): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure RadioGroup_SetName(AObj: TRadioGroup; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetTag(AObj: TRadioGroup): NativeInt; extdecl;
begin
{$ifdef UsehandleException}Result := NativeInt(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure RadioGroup_SetTag(AObj: TRadioGroup; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAnchorSideLeft(AObj: TRadioGroup): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure RadioGroup_SetAnchorSideLeft(AObj: TRadioGroup; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAnchorSideTop(AObj: TRadioGroup): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure RadioGroup_SetAnchorSideTop(AObj: TRadioGroup; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAnchorSideRight(AObj: TRadioGroup): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure RadioGroup_SetAnchorSideRight(AObj: TRadioGroup; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetAnchorSideBottom(AObj: TRadioGroup): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure RadioGroup_SetAnchorSideBottom(AObj: TRadioGroup; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetChildSizing(AObj: TRadioGroup): TControlChildSizing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure RadioGroup_SetChildSizing(AObj: TRadioGroup; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetBorderSpacing(AObj: TRadioGroup): TControlBorderSpacing; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure RadioGroup_SetBorderSpacing(AObj: TRadioGroup; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function RadioGroup_GetDockClients(AObj: TRadioGroup; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function RadioGroup_GetControls(AObj: TRadioGroup; Index: Integer): TControl; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function RadioGroup_GetComponents(AObj: TRadioGroup; AIndex: Integer): TComponent; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function RadioGroup_GetAnchorSide(AObj: TRadioGroup; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function RadioGroup_StaticClassType: TClass; extdecl;
begin
  Result := TRadioGroup;
end;

exports
  RadioGroup_Create,
  RadioGroup_Free,
  RadioGroup_FlipChildren,
  RadioGroup_CanFocus,
  RadioGroup_ContainsControl,
  RadioGroup_ControlAtPos,
  RadioGroup_DisableAlign,
  RadioGroup_EnableAlign,
  RadioGroup_FindChildControl,
  RadioGroup_Focused,
  RadioGroup_HandleAllocated,
  RadioGroup_InsertControl,
  RadioGroup_Invalidate,
  RadioGroup_PaintTo,
  RadioGroup_RemoveControl,
  RadioGroup_Realign,
  RadioGroup_Repaint,
  RadioGroup_ScaleBy,
  RadioGroup_ScrollBy,
  RadioGroup_SetBounds,
  RadioGroup_SetFocus,
  RadioGroup_Update,
  RadioGroup_BringToFront,
  RadioGroup_ClientToScreen,
  RadioGroup_ClientToParent,
  RadioGroup_Dragging,
  RadioGroup_HasParent,
  RadioGroup_Hide,
  RadioGroup_Perform,
  RadioGroup_Refresh,
  RadioGroup_ScreenToClient,
  RadioGroup_ParentToClient,
  RadioGroup_SendToBack,
  RadioGroup_Show,
  RadioGroup_GetTextBuf,
  RadioGroup_GetTextLen,
  RadioGroup_SetTextBuf,
  RadioGroup_FindComponent,
  RadioGroup_GetNamePath,
  RadioGroup_Assign,
  RadioGroup_ClassType,
  RadioGroup_ClassName,
  RadioGroup_InstanceSize,
  RadioGroup_InheritsFrom,
  RadioGroup_Equals,
  RadioGroup_GetHashCode,
  RadioGroup_ToString,
  RadioGroup_AnchorToNeighbour,
  RadioGroup_AnchorParallel,
  RadioGroup_AnchorHorizontalCenterTo,
  RadioGroup_AnchorVerticalCenterTo,
  RadioGroup_AnchorSame,
  RadioGroup_AnchorAsAlign,
  RadioGroup_AnchorClient,
  RadioGroup_ScaleDesignToForm,
  RadioGroup_ScaleFormToDesign,
  RadioGroup_Scale96ToForm,
  RadioGroup_ScaleFormTo96,
  RadioGroup_Scale96ToFont,
  RadioGroup_ScaleFontTo96,
  RadioGroup_ScaleScreenToFont,
  RadioGroup_ScaleFontToScreen,
  RadioGroup_Scale96ToScreen,
  RadioGroup_ScaleScreenTo96,
  RadioGroup_AutoAdjustLayout,
  RadioGroup_FixDesignFontsPPI,
  RadioGroup_ScaleFontsPPI,
  RadioGroup_SetOnSelectionChanged,
  RadioGroup_GetAlign,
  RadioGroup_SetAlign,
  RadioGroup_GetAnchors,
  RadioGroup_SetAnchors,
  RadioGroup_GetBiDiMode,
  RadioGroup_SetBiDiMode,
  RadioGroup_GetCaption,
  RadioGroup_SetCaption,
  RadioGroup_GetColor,
  RadioGroup_SetColor,
  RadioGroup_GetColumns,
  RadioGroup_SetColumns,
  RadioGroup_GetDoubleBuffered,
  RadioGroup_SetDoubleBuffered,
  RadioGroup_GetDragCursor,
  RadioGroup_SetDragCursor,
  RadioGroup_GetDragMode,
  RadioGroup_SetDragMode,
  RadioGroup_GetEnabled,
  RadioGroup_SetEnabled,
  RadioGroup_GetFont,
  RadioGroup_SetFont,
  RadioGroup_GetItemIndex,
  RadioGroup_SetItemIndex,
  RadioGroup_GetItems,
  RadioGroup_SetItems,
  RadioGroup_GetConstraints,
  RadioGroup_SetConstraints,
  RadioGroup_GetParentBackground,
  RadioGroup_SetParentBackground,
  RadioGroup_GetParentColor,
  RadioGroup_SetParentColor,
  RadioGroup_GetParentDoubleBuffered,
  RadioGroup_SetParentDoubleBuffered,
  RadioGroup_GetParentFont,
  RadioGroup_SetParentFont,
  RadioGroup_GetParentShowHint,
  RadioGroup_SetParentShowHint,
  RadioGroup_GetPopupMenu,
  RadioGroup_SetPopupMenu,
  RadioGroup_GetShowHint,
  RadioGroup_SetShowHint,
  RadioGroup_GetTabOrder,
  RadioGroup_SetTabOrder,
  RadioGroup_GetTabStop,
  RadioGroup_SetTabStop,
  RadioGroup_GetVisible,
  RadioGroup_SetVisible,
  RadioGroup_SetOnClick,
  RadioGroup_SetOnDragDrop,
  RadioGroup_SetOnDragOver,
  RadioGroup_SetOnEndDrag,
  RadioGroup_SetOnEnter,
  RadioGroup_SetOnExit,
  RadioGroup_GetDockClientCount,
  RadioGroup_GetDockSite,
  RadioGroup_SetDockSite,
  RadioGroup_GetMouseInClient,
  RadioGroup_GetVisibleDockClientCount,
  RadioGroup_GetBrush,
  RadioGroup_GetControlCount,
  RadioGroup_GetHandle,
  RadioGroup_GetParentWindow,
  RadioGroup_SetParentWindow,
  RadioGroup_GetShowing,
  RadioGroup_GetUseDockManager,
  RadioGroup_SetUseDockManager,
  RadioGroup_GetAction,
  RadioGroup_SetAction,
  RadioGroup_GetBoundsRect,
  RadioGroup_SetBoundsRect,
  RadioGroup_GetClientHeight,
  RadioGroup_SetClientHeight,
  RadioGroup_GetClientOrigin,
  RadioGroup_GetClientRect,
  RadioGroup_GetClientWidth,
  RadioGroup_SetClientWidth,
  RadioGroup_GetControlState,
  RadioGroup_SetControlState,
  RadioGroup_GetControlStyle,
  RadioGroup_SetControlStyle,
  RadioGroup_GetFloating,
  RadioGroup_GetParent,
  RadioGroup_SetParent,
  RadioGroup_GetLeft,
  RadioGroup_SetLeft,
  RadioGroup_GetTop,
  RadioGroup_SetTop,
  RadioGroup_GetWidth,
  RadioGroup_SetWidth,
  RadioGroup_GetHeight,
  RadioGroup_SetHeight,
  RadioGroup_GetCursor,
  RadioGroup_SetCursor,
  RadioGroup_GetHint,
  RadioGroup_SetHint,
  RadioGroup_GetComponentCount,
  RadioGroup_GetComponentIndex,
  RadioGroup_SetComponentIndex,
  RadioGroup_GetOwner,
  RadioGroup_GetName,
  RadioGroup_SetName,
  RadioGroup_GetTag,
  RadioGroup_SetTag,
  RadioGroup_GetAnchorSideLeft,
  RadioGroup_SetAnchorSideLeft,
  RadioGroup_GetAnchorSideTop,
  RadioGroup_SetAnchorSideTop,
  RadioGroup_GetAnchorSideRight,
  RadioGroup_SetAnchorSideRight,
  RadioGroup_GetAnchorSideBottom,
  RadioGroup_SetAnchorSideBottom,
  RadioGroup_GetChildSizing,
  RadioGroup_SetChildSizing,
  RadioGroup_GetBorderSpacing,
  RadioGroup_SetBorderSpacing,
  RadioGroup_GetDockClients,
  RadioGroup_GetControls,
  RadioGroup_GetComponents,
  RadioGroup_GetAnchorSide,
  RadioGroup_StaticClassType;

