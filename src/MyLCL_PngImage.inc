
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Lazarus.modifiedLGPL
//
//----------------------------------------

function PngImage_Create: TPngImage; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  TPngImage.Create;
  handleExceptionEnd
end;

procedure PngImage_Free(AObj: TPngImage); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_Assign(AObj: TPngImage; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_LoadFromStream(AObj: TPngImage; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_SaveToStream(AObj: TPngImage; Stream: TStream); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToStream(Stream);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_LoadFromResourceName(AObj: TPngImage; Instance: NativeUInt; Name: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromResourceName(Instance, Name);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_LoadFromResourceID(AObj: TPngImage; Instance: NativeUInt; ResID: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromResourceID(Instance, ResID);
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_Equals(AObj: TPngImage; Obj: TObject): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_LoadFromFile(AObj: TPngImage; Filename: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.LoadFromFile(Filename);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_SaveToFile(AObj: TPngImage; Filename: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SaveToFile(Filename);
  handleExceptionEnd
end;

//CLASSMETHOD:
procedure PngImage_SetSize(AObj: TPngImage; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetSize(AWidth, AHeight);
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_GetNamePath(AObj: TPngImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_ClassType(AObj: TPngImage): TClass; extdecl;
begin
{$ifdef UsehandleException}Result := TClass(nil);{$endif}
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_ClassName(AObj: TPngImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_InstanceSize(AObj: TPngImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_InheritsFrom(AObj: TPngImage; AClass: TClass): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_GetHashCode(AObj: TPngImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

//CLASSMETHOD:
function PngImage_ToString(AObj: TPngImage): PChar; extdecl;
begin
{$ifdef UsehandleException}Result := PChar(nil);{$endif}
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

function PngImage_GetCanvas(AObj: TPngImage): TCanvas; extdecl;
begin
{$ifdef UsehandleException}Result := nil;{$endif}
  handleExceptionBegin
  Result :=  AObj.Canvas;
  handleExceptionEnd
end;

function PngImage_GetWidth(AObj: TPngImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

function PngImage_GetHeight(AObj: TPngImage): Integer; extdecl;
begin
{$ifdef UsehandleException}Result := Integer(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

function PngImage_GetEmpty(AObj: TPngImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Empty;
  handleExceptionEnd
end;

function PngImage_GetModified(AObj: TPngImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Modified;
  handleExceptionEnd
end;

procedure PngImage_SetModified(AObj: TPngImage; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Modified := AValue;
  handleExceptionEnd
end;

function PngImage_GetPalette(AObj: TPngImage): HPALETTE; extdecl;
begin
{$ifdef UsehandleException}Result := HPALETTE(0);{$endif}
  handleExceptionBegin
  Result :=  AObj.Palette;
  handleExceptionEnd
end;

procedure PngImage_SetPalette(AObj: TPngImage; AValue: HPALETTE); extdecl;
begin
  handleExceptionBegin
  AObj.Palette := AValue;
  handleExceptionEnd
end;

function PngImage_GetPaletteModified(AObj: TPngImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.PaletteModified;
  handleExceptionEnd
end;

procedure PngImage_SetPaletteModified(AObj: TPngImage; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.PaletteModified := AValue;
  handleExceptionEnd
end;

function PngImage_GetTransparent(AObj: TPngImage): LongBool; extdecl;
begin
{$ifdef UsehandleException}Result := False;{$endif}
  handleExceptionBegin
  Result :=  AObj.Transparent;
  handleExceptionEnd
end;

procedure PngImage_SetTransparent(AObj: TPngImage; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Transparent := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TNotifyEvent
procedure PngImage_SetOnChange(AObj: TPngImage; AEventData: Pointer); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent}
  {$DEFINE EventName := OnChange}
  EventMethodCode
end;

function PngImage_StaticClassType: TClass; extdecl;
begin
  Result := TPngImage;
end;

exports
  PngImage_Create,
  PngImage_Free,
  PngImage_Assign,
  PngImage_LoadFromStream,
  PngImage_SaveToStream,
  PngImage_LoadFromResourceName,
  PngImage_LoadFromResourceID,
  PngImage_Equals,
  PngImage_LoadFromFile,
  PngImage_SaveToFile,
  PngImage_SetSize,
  PngImage_GetNamePath,
  PngImage_ClassType,
  PngImage_ClassName,
  PngImage_InstanceSize,
  PngImage_InheritsFrom,
  PngImage_GetHashCode,
  PngImage_ToString,
  PngImage_GetCanvas,
  PngImage_GetWidth,
  PngImage_GetHeight,
  PngImage_GetEmpty,
  PngImage_GetModified,
  PngImage_SetModified,
  PngImage_GetPalette,
  PngImage_SetPalette,
  PngImage_GetPaletteModified,
  PngImage_SetPaletteModified,
  PngImage_GetTransparent,
  PngImage_SetTransparent,
  PngImage_SetOnChange,
  PngImage_StaticClassType;

