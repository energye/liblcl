name: build-linux-aarch64

on:
  workflow_dispatch:
#  push:
#    branches: [ "main" ]
#    tags:
#      - 'v*.*.*'

jobs:
  linux-aarch64:
    runs-on: ${{ matrix.operating-system }}
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      matrix:
        operating-system: [ ubuntu-20.04 ]
        lazarus-versions: [ 3.6 ]
        include:
          - arch: aarch64
            distro: ubuntu18.04

    steps:
      - uses: actions/checkout@v4

      - name: Config liblcl
        run: |
          mkdir $RUNNER_WORKSPACE/liblclbinary

      # Laz 环境
      - name: Lazarus Install Environment
        uses: sxmxta/lazarus@v1.0.18
        with:
          lazarus-version: ${{ matrix.lazarus-versions }}
          with-cache: false
          os-arch: arm64

      # arch
      - uses: uraimo/run-on-arch-action@v2
        name: Container Build Lazarus
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # 不需要，但可加快构建速度
          githubToken: ${{ github.token }}
          # 创建工件目录app
          #setup: |
          #  mkdir -p "$RUNNER_TEMP/app"
          # 将目录装载为容器中的/app
          dockerRunArgs: |
            --volume "$RUNNER_WORKSPACE:/app"

          # 将一些环境变量传递到容器
          # env: |
          # artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # 在容器中运行命令的shell
          shell: /bin/sh
          #在容器中安装一些依赖项。如果
          #您也在使用githubToken。此处安装的任何依赖项都将
          #是缓存的容器映像的一部分，因此后续
          #构建不必重新安装它们。缓存图像层
          #在项目的包存储库中公开，因此
          #容器状态或日志中不存在机密。
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*)
                apt-get update -q -y
                apt-get install -q -y git
                apt-get install -q -y make binutils build-essential gdb subversion zip unzip libx11-dev libgtk2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev libgtk-3-dev
                ;;
            esac
          # run 要在容器中运行的命令，复制git文件到挂载的目录中
          run: |
            #-- run 此处是在容器内运行命令，在--volume挂载了宿主机的工作目录为/app目录

            #-- 脚本赋予执行权限
            chmod +x /app/liblcl/shell/add-package-container.sh
            chmod +x /app/liblcl/shell/build-linux.sh

            #-- 进入fpc目录开始编译laz
            cd /app/lazarus/fpc-3.2.2.aarch64-linux
            #-- 执行安装fpc, esxu跳过用户交互输入
            ./install.sh <<esxu
            esxu
            #-- 返回上级目录make lazarus
            cd ../
            #-- 构建laz, 得到完整的lazarus, 使用lazbuild构建liblcl /app/lazarus/lazbuild
            make clean all

            #-- 开始编译liblcl
            cd /app/liblcl
            echo "ls -al"
            ls -al
            #-- 参数: $1:指定分枝 $2:arch $3:lazarus base dir
            #-- 构建 support Gtk3 :default
            ./shell/build-linux.sh "main" "arm64"
            #-- 构建 liblcl support Gtk2
            ./shell/build-linux.sh "GTK2-106.1.1" "arm64"
            #-- 构建 liblcl support Flash
            ./shell/build-linux.sh "Flash-89.0.18" "arm64"
